// Code generated by rclgo-gen. DO NOT EDIT.

package diagnostic_msgs_msg
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	primitives "github.com/ATIinc/rclgo/pkg/rclgo/primitives"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <diagnostic_msgs/msg/diagnostic_status.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("diagnostic_msgs/DiagnosticStatus", DiagnosticStatusTypeSupport)
	typemap.RegisterMessage("diagnostic_msgs/msg/DiagnosticStatus", DiagnosticStatusTypeSupport)
}
const (
	DiagnosticStatus_OK byte = 0// Possible levels of operations.
	DiagnosticStatus_WARN byte = 1
	DiagnosticStatus_ERROR byte = 2
	DiagnosticStatus_STALE byte = 3
)

type DiagnosticStatus struct {
	Level byte `yaml:"level" json:"level" mapstructure:"level"`// Level of operation enumerated above.
	Name string `yaml:"name" json:"name" mapstructure:"name"`// A description of the test/component reporting.
	Message string `yaml:"message" json:"message" mapstructure:"message"`// A description of the status.
	HardwareId string `yaml:"hardware_id" json:"hardware_id" mapstructure:"hardware_id"`// A hardware unique string.
	Values []KeyValue `yaml:"values" json:"values" mapstructure:"values"`// An array of values associated with the status.
}

// NewDiagnosticStatus creates a new DiagnosticStatus with default values.
func NewDiagnosticStatus() *DiagnosticStatus {
	self := DiagnosticStatus{}
	self.SetDefaults()
	return &self
}

func (t *DiagnosticStatus) Clone() *DiagnosticStatus {
	c := &DiagnosticStatus{}
	c.Level = t.Level
	c.Name = t.Name
	c.Message = t.Message
	c.HardwareId = t.HardwareId
	if t.Values != nil {
		c.Values = make([]KeyValue, len(t.Values))
		CloneKeyValueSlice(c.Values, t.Values)
	}
	return c
}

func (t *DiagnosticStatus) CloneMsg() types.Message {
	return t.Clone()
}

func (t *DiagnosticStatus) SetDefaults() {
	t.Level = 0
	t.Name = ""
	t.Message = ""
	t.HardwareId = ""
	t.Values = nil
}

func (t *DiagnosticStatus) GetTypeSupport() types.MessageTypeSupport {
	return DiagnosticStatusTypeSupport
}

// DiagnosticStatusPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type DiagnosticStatusPublisher struct {
	*rclgo.Publisher
}

// NewDiagnosticStatusPublisher creates and returns a new publisher for the
// DiagnosticStatus
func NewDiagnosticStatusPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*DiagnosticStatusPublisher, error) {
	pub, err := node.NewPublisher(topic_name, DiagnosticStatusTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &DiagnosticStatusPublisher{pub}, nil
}

func (p *DiagnosticStatusPublisher) Publish(msg *DiagnosticStatus) error {
	return p.Publisher.Publish(msg)
}

// DiagnosticStatusSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type DiagnosticStatusSubscription struct {
	*rclgo.Subscription
}

// DiagnosticStatusSubscriptionCallback type is used to provide a subscription
// handler function for a DiagnosticStatusSubscription.
type DiagnosticStatusSubscriptionCallback func(msg *DiagnosticStatus, info *rclgo.MessageInfo, err error)

// NewDiagnosticStatusSubscription creates and returns a new subscription for the
// DiagnosticStatus
func NewDiagnosticStatusSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback DiagnosticStatusSubscriptionCallback) (*DiagnosticStatusSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg DiagnosticStatus
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, DiagnosticStatusTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &DiagnosticStatusSubscription{sub}, nil
}

func (s *DiagnosticStatusSubscription) TakeMessage(out *DiagnosticStatus) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneDiagnosticStatusSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneDiagnosticStatusSlice(dst, src []DiagnosticStatus) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var DiagnosticStatusTypeSupport types.MessageTypeSupport = _DiagnosticStatusTypeSupport{}

type _DiagnosticStatusTypeSupport struct{}

func (t _DiagnosticStatusTypeSupport) New() types.Message {
	return NewDiagnosticStatus()
}

func (t _DiagnosticStatusTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.diagnostic_msgs__msg__DiagnosticStatus
	return (unsafe.Pointer)(C.diagnostic_msgs__msg__DiagnosticStatus__create())
}

func (t _DiagnosticStatusTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.diagnostic_msgs__msg__DiagnosticStatus__destroy((*C.diagnostic_msgs__msg__DiagnosticStatus)(pointer_to_free))
}

func (t _DiagnosticStatusTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*DiagnosticStatus)
	mem := (*C.diagnostic_msgs__msg__DiagnosticStatus)(dst)
	mem.level = C.uint8_t(m.Level)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.name), m.Name)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.message), m.Message)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.hardware_id), m.HardwareId)
	KeyValue__Sequence_to_C(&mem.values, m.Values)
}

func (t _DiagnosticStatusTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*DiagnosticStatus)
	mem := (*C.diagnostic_msgs__msg__DiagnosticStatus)(ros2_message_buffer)
	m.Level = byte(mem.level)
	primitives.StringAsGoStruct(&m.Name, unsafe.Pointer(&mem.name))
	primitives.StringAsGoStruct(&m.Message, unsafe.Pointer(&mem.message))
	primitives.StringAsGoStruct(&m.HardwareId, unsafe.Pointer(&mem.hardware_id))
	KeyValue__Sequence_to_Go(&m.Values, mem.values)
}

func (t _DiagnosticStatusTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__diagnostic_msgs__msg__DiagnosticStatus())
}

type CDiagnosticStatus = C.diagnostic_msgs__msg__DiagnosticStatus
type CDiagnosticStatus__Sequence = C.diagnostic_msgs__msg__DiagnosticStatus__Sequence

func DiagnosticStatus__Sequence_to_Go(goSlice *[]DiagnosticStatus, cSlice CDiagnosticStatus__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]DiagnosticStatus, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		DiagnosticStatusTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func DiagnosticStatus__Sequence_to_C(cSlice *CDiagnosticStatus__Sequence, goSlice []DiagnosticStatus) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.diagnostic_msgs__msg__DiagnosticStatus)(C.malloc(C.sizeof_struct_diagnostic_msgs__msg__DiagnosticStatus * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		DiagnosticStatusTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func DiagnosticStatus__Array_to_Go(goSlice []DiagnosticStatus, cSlice []CDiagnosticStatus) {
	for i := 0; i < len(cSlice); i++ {
		DiagnosticStatusTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func DiagnosticStatus__Array_to_C(cSlice []CDiagnosticStatus, goSlice []DiagnosticStatus) {
	for i := 0; i < len(goSlice); i++ {
		DiagnosticStatusTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
