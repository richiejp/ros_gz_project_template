// Code generated by rclgo-gen. DO NOT EDIT.

package diagnostic_msgs_srv
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	primitives "github.com/ATIinc/rclgo/pkg/rclgo/primitives"
	diagnostic_msgs_msg "github.com/iema-group/goros2/msgs/diagnostic_msgs/msg"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <diagnostic_msgs/srv/self_test.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("diagnostic_msgs/SelfTest_Response", SelfTest_ResponseTypeSupport)
	typemap.RegisterMessage("diagnostic_msgs/srv/SelfTest_Response", SelfTest_ResponseTypeSupport)
}

type SelfTest_Response struct {
	Id string `yaml:"id" json:"id" mapstructure:"id"`
	Passed byte `yaml:"passed" json:"passed" mapstructure:"passed"`
	Status []diagnostic_msgs_msg.DiagnosticStatus `yaml:"status" json:"status" mapstructure:"status"`
}

// NewSelfTest_Response creates a new SelfTest_Response with default values.
func NewSelfTest_Response() *SelfTest_Response {
	self := SelfTest_Response{}
	self.SetDefaults()
	return &self
}

func (t *SelfTest_Response) Clone() *SelfTest_Response {
	c := &SelfTest_Response{}
	c.Id = t.Id
	c.Passed = t.Passed
	if t.Status != nil {
		c.Status = make([]diagnostic_msgs_msg.DiagnosticStatus, len(t.Status))
		diagnostic_msgs_msg.CloneDiagnosticStatusSlice(c.Status, t.Status)
	}
	return c
}

func (t *SelfTest_Response) CloneMsg() types.Message {
	return t.Clone()
}

func (t *SelfTest_Response) SetDefaults() {
	t.Id = ""
	t.Passed = 0
	t.Status = nil
}

func (t *SelfTest_Response) GetTypeSupport() types.MessageTypeSupport {
	return SelfTest_ResponseTypeSupport
}

// SelfTest_ResponsePublisher wraps rclgo.Publisher to provide type safe helper
// functions
type SelfTest_ResponsePublisher struct {
	*rclgo.Publisher
}

// NewSelfTest_ResponsePublisher creates and returns a new publisher for the
// SelfTest_Response
func NewSelfTest_ResponsePublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*SelfTest_ResponsePublisher, error) {
	pub, err := node.NewPublisher(topic_name, SelfTest_ResponseTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &SelfTest_ResponsePublisher{pub}, nil
}

func (p *SelfTest_ResponsePublisher) Publish(msg *SelfTest_Response) error {
	return p.Publisher.Publish(msg)
}

// SelfTest_ResponseSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type SelfTest_ResponseSubscription struct {
	*rclgo.Subscription
}

// SelfTest_ResponseSubscriptionCallback type is used to provide a subscription
// handler function for a SelfTest_ResponseSubscription.
type SelfTest_ResponseSubscriptionCallback func(msg *SelfTest_Response, info *rclgo.MessageInfo, err error)

// NewSelfTest_ResponseSubscription creates and returns a new subscription for the
// SelfTest_Response
func NewSelfTest_ResponseSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback SelfTest_ResponseSubscriptionCallback) (*SelfTest_ResponseSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg SelfTest_Response
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, SelfTest_ResponseTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &SelfTest_ResponseSubscription{sub}, nil
}

func (s *SelfTest_ResponseSubscription) TakeMessage(out *SelfTest_Response) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneSelfTest_ResponseSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneSelfTest_ResponseSlice(dst, src []SelfTest_Response) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var SelfTest_ResponseTypeSupport types.MessageTypeSupport = _SelfTest_ResponseTypeSupport{}

type _SelfTest_ResponseTypeSupport struct{}

func (t _SelfTest_ResponseTypeSupport) New() types.Message {
	return NewSelfTest_Response()
}

func (t _SelfTest_ResponseTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.diagnostic_msgs__srv__SelfTest_Response
	return (unsafe.Pointer)(C.diagnostic_msgs__srv__SelfTest_Response__create())
}

func (t _SelfTest_ResponseTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.diagnostic_msgs__srv__SelfTest_Response__destroy((*C.diagnostic_msgs__srv__SelfTest_Response)(pointer_to_free))
}

func (t _SelfTest_ResponseTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*SelfTest_Response)
	mem := (*C.diagnostic_msgs__srv__SelfTest_Response)(dst)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.id), m.Id)
	mem.passed = C.uint8_t(m.Passed)
	diagnostic_msgs_msg.DiagnosticStatus__Sequence_to_C((*diagnostic_msgs_msg.CDiagnosticStatus__Sequence)(unsafe.Pointer(&mem.status)), m.Status)
}

func (t _SelfTest_ResponseTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*SelfTest_Response)
	mem := (*C.diagnostic_msgs__srv__SelfTest_Response)(ros2_message_buffer)
	primitives.StringAsGoStruct(&m.Id, unsafe.Pointer(&mem.id))
	m.Passed = byte(mem.passed)
	diagnostic_msgs_msg.DiagnosticStatus__Sequence_to_Go(&m.Status, *(*diagnostic_msgs_msg.CDiagnosticStatus__Sequence)(unsafe.Pointer(&mem.status)))
}

func (t _SelfTest_ResponseTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__diagnostic_msgs__srv__SelfTest_Response())
}

type CSelfTest_Response = C.diagnostic_msgs__srv__SelfTest_Response
type CSelfTest_Response__Sequence = C.diagnostic_msgs__srv__SelfTest_Response__Sequence

func SelfTest_Response__Sequence_to_Go(goSlice *[]SelfTest_Response, cSlice CSelfTest_Response__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]SelfTest_Response, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		SelfTest_ResponseTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func SelfTest_Response__Sequence_to_C(cSlice *CSelfTest_Response__Sequence, goSlice []SelfTest_Response) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.diagnostic_msgs__srv__SelfTest_Response)(C.malloc(C.sizeof_struct_diagnostic_msgs__srv__SelfTest_Response * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		SelfTest_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func SelfTest_Response__Array_to_Go(goSlice []SelfTest_Response, cSlice []CSelfTest_Response) {
	for i := 0; i < len(cSlice); i++ {
		SelfTest_ResponseTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func SelfTest_Response__Array_to_C(cSlice []CSelfTest_Response, goSlice []SelfTest_Response) {
	for i := 0; i < len(goSlice); i++ {
		SelfTest_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
