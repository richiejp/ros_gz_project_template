// Code generated by rclgo-gen. DO NOT EDIT.

package map_msgs_msg
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	nav_msgs_msg "github.com/iema-group/goros2/msgs/nav_msgs/msg"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <map_msgs/msg/projected_map.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("map_msgs/ProjectedMap", ProjectedMapTypeSupport)
	typemap.RegisterMessage("map_msgs/msg/ProjectedMap", ProjectedMapTypeSupport)
}

type ProjectedMap struct {
	Map nav_msgs_msg.OccupancyGrid `yaml:"map" json:"map" mapstructure:"map"`
	MinZ float64 `yaml:"min_z" json:"min_z" mapstructure:"min_z"`
	MaxZ float64 `yaml:"max_z" json:"max_z" mapstructure:"max_z"`
}

// NewProjectedMap creates a new ProjectedMap with default values.
func NewProjectedMap() *ProjectedMap {
	self := ProjectedMap{}
	self.SetDefaults()
	return &self
}

func (t *ProjectedMap) Clone() *ProjectedMap {
	c := &ProjectedMap{}
	c.Map = *t.Map.Clone()
	c.MinZ = t.MinZ
	c.MaxZ = t.MaxZ
	return c
}

func (t *ProjectedMap) CloneMsg() types.Message {
	return t.Clone()
}

func (t *ProjectedMap) SetDefaults() {
	t.Map.SetDefaults()
	t.MinZ = 0
	t.MaxZ = 0
}

func (t *ProjectedMap) GetTypeSupport() types.MessageTypeSupport {
	return ProjectedMapTypeSupport
}

// ProjectedMapPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type ProjectedMapPublisher struct {
	*rclgo.Publisher
}

// NewProjectedMapPublisher creates and returns a new publisher for the
// ProjectedMap
func NewProjectedMapPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*ProjectedMapPublisher, error) {
	pub, err := node.NewPublisher(topic_name, ProjectedMapTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ProjectedMapPublisher{pub}, nil
}

func (p *ProjectedMapPublisher) Publish(msg *ProjectedMap) error {
	return p.Publisher.Publish(msg)
}

// ProjectedMapSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type ProjectedMapSubscription struct {
	*rclgo.Subscription
}

// ProjectedMapSubscriptionCallback type is used to provide a subscription
// handler function for a ProjectedMapSubscription.
type ProjectedMapSubscriptionCallback func(msg *ProjectedMap, info *rclgo.MessageInfo, err error)

// NewProjectedMapSubscription creates and returns a new subscription for the
// ProjectedMap
func NewProjectedMapSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback ProjectedMapSubscriptionCallback) (*ProjectedMapSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg ProjectedMap
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, ProjectedMapTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &ProjectedMapSubscription{sub}, nil
}

func (s *ProjectedMapSubscription) TakeMessage(out *ProjectedMap) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneProjectedMapSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneProjectedMapSlice(dst, src []ProjectedMap) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ProjectedMapTypeSupport types.MessageTypeSupport = _ProjectedMapTypeSupport{}

type _ProjectedMapTypeSupport struct{}

func (t _ProjectedMapTypeSupport) New() types.Message {
	return NewProjectedMap()
}

func (t _ProjectedMapTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.map_msgs__msg__ProjectedMap
	return (unsafe.Pointer)(C.map_msgs__msg__ProjectedMap__create())
}

func (t _ProjectedMapTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.map_msgs__msg__ProjectedMap__destroy((*C.map_msgs__msg__ProjectedMap)(pointer_to_free))
}

func (t _ProjectedMapTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*ProjectedMap)
	mem := (*C.map_msgs__msg__ProjectedMap)(dst)
	nav_msgs_msg.OccupancyGridTypeSupport.AsCStruct(unsafe.Pointer(&mem._map), &m.Map)
	mem.min_z = C.double(m.MinZ)
	mem.max_z = C.double(m.MaxZ)
}

func (t _ProjectedMapTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*ProjectedMap)
	mem := (*C.map_msgs__msg__ProjectedMap)(ros2_message_buffer)
	nav_msgs_msg.OccupancyGridTypeSupport.AsGoStruct(&m.Map, unsafe.Pointer(&mem._map))
	m.MinZ = float64(mem.min_z)
	m.MaxZ = float64(mem.max_z)
}

func (t _ProjectedMapTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__map_msgs__msg__ProjectedMap())
}

type CProjectedMap = C.map_msgs__msg__ProjectedMap
type CProjectedMap__Sequence = C.map_msgs__msg__ProjectedMap__Sequence

func ProjectedMap__Sequence_to_Go(goSlice *[]ProjectedMap, cSlice CProjectedMap__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]ProjectedMap, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		ProjectedMapTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func ProjectedMap__Sequence_to_C(cSlice *CProjectedMap__Sequence, goSlice []ProjectedMap) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.map_msgs__msg__ProjectedMap)(C.malloc(C.sizeof_struct_map_msgs__msg__ProjectedMap * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		ProjectedMapTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func ProjectedMap__Array_to_Go(goSlice []ProjectedMap, cSlice []CProjectedMap) {
	for i := 0; i < len(cSlice); i++ {
		ProjectedMapTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func ProjectedMap__Array_to_C(cSlice []CProjectedMap, goSlice []ProjectedMap) {
	for i := 0; i < len(goSlice); i++ {
		ProjectedMapTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
