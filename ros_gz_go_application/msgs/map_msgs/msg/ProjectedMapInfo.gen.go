// Code generated by rclgo-gen. DO NOT EDIT.

package map_msgs_msg
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	primitives "github.com/ATIinc/rclgo/pkg/rclgo/primitives"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <map_msgs/msg/projected_map_info.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("map_msgs/ProjectedMapInfo", ProjectedMapInfoTypeSupport)
	typemap.RegisterMessage("map_msgs/msg/ProjectedMapInfo", ProjectedMapInfoTypeSupport)
}

type ProjectedMapInfo struct {
	FrameId string `yaml:"frame_id" json:"frame_id" mapstructure:"frame_id"`
	X float64 `yaml:"x" json:"x" mapstructure:"x"`
	Y float64 `yaml:"y" json:"y" mapstructure:"y"`
	Width float64 `yaml:"width" json:"width" mapstructure:"width"`
	Height float64 `yaml:"height" json:"height" mapstructure:"height"`
	MinZ float64 `yaml:"min_z" json:"min_z" mapstructure:"min_z"`
	MaxZ float64 `yaml:"max_z" json:"max_z" mapstructure:"max_z"`
}

// NewProjectedMapInfo creates a new ProjectedMapInfo with default values.
func NewProjectedMapInfo() *ProjectedMapInfo {
	self := ProjectedMapInfo{}
	self.SetDefaults()
	return &self
}

func (t *ProjectedMapInfo) Clone() *ProjectedMapInfo {
	c := &ProjectedMapInfo{}
	c.FrameId = t.FrameId
	c.X = t.X
	c.Y = t.Y
	c.Width = t.Width
	c.Height = t.Height
	c.MinZ = t.MinZ
	c.MaxZ = t.MaxZ
	return c
}

func (t *ProjectedMapInfo) CloneMsg() types.Message {
	return t.Clone()
}

func (t *ProjectedMapInfo) SetDefaults() {
	t.FrameId = ""
	t.X = 0
	t.Y = 0
	t.Width = 0
	t.Height = 0
	t.MinZ = 0
	t.MaxZ = 0
}

func (t *ProjectedMapInfo) GetTypeSupport() types.MessageTypeSupport {
	return ProjectedMapInfoTypeSupport
}

// ProjectedMapInfoPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type ProjectedMapInfoPublisher struct {
	*rclgo.Publisher
}

// NewProjectedMapInfoPublisher creates and returns a new publisher for the
// ProjectedMapInfo
func NewProjectedMapInfoPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*ProjectedMapInfoPublisher, error) {
	pub, err := node.NewPublisher(topic_name, ProjectedMapInfoTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ProjectedMapInfoPublisher{pub}, nil
}

func (p *ProjectedMapInfoPublisher) Publish(msg *ProjectedMapInfo) error {
	return p.Publisher.Publish(msg)
}

// ProjectedMapInfoSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type ProjectedMapInfoSubscription struct {
	*rclgo.Subscription
}

// ProjectedMapInfoSubscriptionCallback type is used to provide a subscription
// handler function for a ProjectedMapInfoSubscription.
type ProjectedMapInfoSubscriptionCallback func(msg *ProjectedMapInfo, info *rclgo.MessageInfo, err error)

// NewProjectedMapInfoSubscription creates and returns a new subscription for the
// ProjectedMapInfo
func NewProjectedMapInfoSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback ProjectedMapInfoSubscriptionCallback) (*ProjectedMapInfoSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg ProjectedMapInfo
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, ProjectedMapInfoTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &ProjectedMapInfoSubscription{sub}, nil
}

func (s *ProjectedMapInfoSubscription) TakeMessage(out *ProjectedMapInfo) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneProjectedMapInfoSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneProjectedMapInfoSlice(dst, src []ProjectedMapInfo) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ProjectedMapInfoTypeSupport types.MessageTypeSupport = _ProjectedMapInfoTypeSupport{}

type _ProjectedMapInfoTypeSupport struct{}

func (t _ProjectedMapInfoTypeSupport) New() types.Message {
	return NewProjectedMapInfo()
}

func (t _ProjectedMapInfoTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.map_msgs__msg__ProjectedMapInfo
	return (unsafe.Pointer)(C.map_msgs__msg__ProjectedMapInfo__create())
}

func (t _ProjectedMapInfoTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.map_msgs__msg__ProjectedMapInfo__destroy((*C.map_msgs__msg__ProjectedMapInfo)(pointer_to_free))
}

func (t _ProjectedMapInfoTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*ProjectedMapInfo)
	mem := (*C.map_msgs__msg__ProjectedMapInfo)(dst)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.frame_id), m.FrameId)
	mem.x = C.double(m.X)
	mem.y = C.double(m.Y)
	mem.width = C.double(m.Width)
	mem.height = C.double(m.Height)
	mem.min_z = C.double(m.MinZ)
	mem.max_z = C.double(m.MaxZ)
}

func (t _ProjectedMapInfoTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*ProjectedMapInfo)
	mem := (*C.map_msgs__msg__ProjectedMapInfo)(ros2_message_buffer)
	primitives.StringAsGoStruct(&m.FrameId, unsafe.Pointer(&mem.frame_id))
	m.X = float64(mem.x)
	m.Y = float64(mem.y)
	m.Width = float64(mem.width)
	m.Height = float64(mem.height)
	m.MinZ = float64(mem.min_z)
	m.MaxZ = float64(mem.max_z)
}

func (t _ProjectedMapInfoTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__map_msgs__msg__ProjectedMapInfo())
}

type CProjectedMapInfo = C.map_msgs__msg__ProjectedMapInfo
type CProjectedMapInfo__Sequence = C.map_msgs__msg__ProjectedMapInfo__Sequence

func ProjectedMapInfo__Sequence_to_Go(goSlice *[]ProjectedMapInfo, cSlice CProjectedMapInfo__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]ProjectedMapInfo, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		ProjectedMapInfoTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func ProjectedMapInfo__Sequence_to_C(cSlice *CProjectedMapInfo__Sequence, goSlice []ProjectedMapInfo) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.map_msgs__msg__ProjectedMapInfo)(C.malloc(C.sizeof_struct_map_msgs__msg__ProjectedMapInfo * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		ProjectedMapInfoTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func ProjectedMapInfo__Array_to_Go(goSlice []ProjectedMapInfo, cSlice []CProjectedMapInfo) {
	for i := 0; i < len(cSlice); i++ {
		ProjectedMapInfoTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func ProjectedMapInfo__Array_to_C(cSlice []CProjectedMapInfo, goSlice []ProjectedMapInfo) {
	for i := 0; i < len(goSlice); i++ {
		ProjectedMapInfoTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
