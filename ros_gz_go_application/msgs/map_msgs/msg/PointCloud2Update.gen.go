// Code generated by rclgo-gen. DO NOT EDIT.

package map_msgs_msg
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	sensor_msgs_msg "github.com/iema-group/goros2/msgs/sensor_msgs/msg"
	std_msgs_msg "github.com/iema-group/goros2/msgs/std_msgs/msg"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <map_msgs/msg/point_cloud2_update.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("map_msgs/PointCloud2Update", PointCloud2UpdateTypeSupport)
	typemap.RegisterMessage("map_msgs/msg/PointCloud2Update", PointCloud2UpdateTypeSupport)
}
const (
	PointCloud2Update_ADD uint32 = 0
	PointCloud2Update_DELETE uint32 = 1
)

type PointCloud2Update struct {
	Header std_msgs_msg.Header `yaml:"header" json:"header" mapstructure:"header"`
	Type uint32 `yaml:"type" json:"type" mapstructure:"type"`// type of update, one of ADD or DELETE
	Points sensor_msgs_msg.PointCloud2 `yaml:"points" json:"points" mapstructure:"points"`
}

// NewPointCloud2Update creates a new PointCloud2Update with default values.
func NewPointCloud2Update() *PointCloud2Update {
	self := PointCloud2Update{}
	self.SetDefaults()
	return &self
}

func (t *PointCloud2Update) Clone() *PointCloud2Update {
	c := &PointCloud2Update{}
	c.Header = *t.Header.Clone()
	c.Type = t.Type
	c.Points = *t.Points.Clone()
	return c
}

func (t *PointCloud2Update) CloneMsg() types.Message {
	return t.Clone()
}

func (t *PointCloud2Update) SetDefaults() {
	t.Header.SetDefaults()
	t.Type = 0
	t.Points.SetDefaults()
}

func (t *PointCloud2Update) GetTypeSupport() types.MessageTypeSupport {
	return PointCloud2UpdateTypeSupport
}

// PointCloud2UpdatePublisher wraps rclgo.Publisher to provide type safe helper
// functions
type PointCloud2UpdatePublisher struct {
	*rclgo.Publisher
}

// NewPointCloud2UpdatePublisher creates and returns a new publisher for the
// PointCloud2Update
func NewPointCloud2UpdatePublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*PointCloud2UpdatePublisher, error) {
	pub, err := node.NewPublisher(topic_name, PointCloud2UpdateTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &PointCloud2UpdatePublisher{pub}, nil
}

func (p *PointCloud2UpdatePublisher) Publish(msg *PointCloud2Update) error {
	return p.Publisher.Publish(msg)
}

// PointCloud2UpdateSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type PointCloud2UpdateSubscription struct {
	*rclgo.Subscription
}

// PointCloud2UpdateSubscriptionCallback type is used to provide a subscription
// handler function for a PointCloud2UpdateSubscription.
type PointCloud2UpdateSubscriptionCallback func(msg *PointCloud2Update, info *rclgo.MessageInfo, err error)

// NewPointCloud2UpdateSubscription creates and returns a new subscription for the
// PointCloud2Update
func NewPointCloud2UpdateSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback PointCloud2UpdateSubscriptionCallback) (*PointCloud2UpdateSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg PointCloud2Update
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, PointCloud2UpdateTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &PointCloud2UpdateSubscription{sub}, nil
}

func (s *PointCloud2UpdateSubscription) TakeMessage(out *PointCloud2Update) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// ClonePointCloud2UpdateSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func ClonePointCloud2UpdateSlice(dst, src []PointCloud2Update) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var PointCloud2UpdateTypeSupport types.MessageTypeSupport = _PointCloud2UpdateTypeSupport{}

type _PointCloud2UpdateTypeSupport struct{}

func (t _PointCloud2UpdateTypeSupport) New() types.Message {
	return NewPointCloud2Update()
}

func (t _PointCloud2UpdateTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.map_msgs__msg__PointCloud2Update
	return (unsafe.Pointer)(C.map_msgs__msg__PointCloud2Update__create())
}

func (t _PointCloud2UpdateTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.map_msgs__msg__PointCloud2Update__destroy((*C.map_msgs__msg__PointCloud2Update)(pointer_to_free))
}

func (t _PointCloud2UpdateTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*PointCloud2Update)
	mem := (*C.map_msgs__msg__PointCloud2Update)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	mem._type = C.uint32_t(m.Type)
	sensor_msgs_msg.PointCloud2TypeSupport.AsCStruct(unsafe.Pointer(&mem.points), &m.Points)
}

func (t _PointCloud2UpdateTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*PointCloud2Update)
	mem := (*C.map_msgs__msg__PointCloud2Update)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	m.Type = uint32(mem._type)
	sensor_msgs_msg.PointCloud2TypeSupport.AsGoStruct(&m.Points, unsafe.Pointer(&mem.points))
}

func (t _PointCloud2UpdateTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__map_msgs__msg__PointCloud2Update())
}

type CPointCloud2Update = C.map_msgs__msg__PointCloud2Update
type CPointCloud2Update__Sequence = C.map_msgs__msg__PointCloud2Update__Sequence

func PointCloud2Update__Sequence_to_Go(goSlice *[]PointCloud2Update, cSlice CPointCloud2Update__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]PointCloud2Update, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		PointCloud2UpdateTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func PointCloud2Update__Sequence_to_C(cSlice *CPointCloud2Update__Sequence, goSlice []PointCloud2Update) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.map_msgs__msg__PointCloud2Update)(C.malloc(C.sizeof_struct_map_msgs__msg__PointCloud2Update * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		PointCloud2UpdateTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func PointCloud2Update__Array_to_Go(goSlice []PointCloud2Update, cSlice []CPointCloud2Update) {
	for i := 0; i < len(cSlice); i++ {
		PointCloud2UpdateTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func PointCloud2Update__Array_to_C(cSlice []CPointCloud2Update, goSlice []PointCloud2Update) {
	for i := 0; i < len(goSlice); i++ {
		PointCloud2UpdateTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
