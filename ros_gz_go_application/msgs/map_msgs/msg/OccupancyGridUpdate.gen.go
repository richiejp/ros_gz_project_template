// Code generated by rclgo-gen. DO NOT EDIT.

package map_msgs_msg
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	primitives "github.com/ATIinc/rclgo/pkg/rclgo/primitives"
	std_msgs_msg "github.com/iema-group/goros2/msgs/std_msgs/msg"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <map_msgs/msg/occupancy_grid_update.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("map_msgs/OccupancyGridUpdate", OccupancyGridUpdateTypeSupport)
	typemap.RegisterMessage("map_msgs/msg/OccupancyGridUpdate", OccupancyGridUpdateTypeSupport)
}

type OccupancyGridUpdate struct {
	Header std_msgs_msg.Header `yaml:"header" json:"header" mapstructure:"header"`
	X int32 `yaml:"x" json:"x" mapstructure:"x"`
	Y int32 `yaml:"y" json:"y" mapstructure:"y"`
	Width uint32 `yaml:"width" json:"width" mapstructure:"width"`
	Height uint32 `yaml:"height" json:"height" mapstructure:"height"`
	Data []int8 `yaml:"data" json:"data" mapstructure:"data"`
}

// NewOccupancyGridUpdate creates a new OccupancyGridUpdate with default values.
func NewOccupancyGridUpdate() *OccupancyGridUpdate {
	self := OccupancyGridUpdate{}
	self.SetDefaults()
	return &self
}

func (t *OccupancyGridUpdate) Clone() *OccupancyGridUpdate {
	c := &OccupancyGridUpdate{}
	c.Header = *t.Header.Clone()
	c.X = t.X
	c.Y = t.Y
	c.Width = t.Width
	c.Height = t.Height
	if t.Data != nil {
		c.Data = make([]int8, len(t.Data))
		copy(c.Data, t.Data)
	}
	return c
}

func (t *OccupancyGridUpdate) CloneMsg() types.Message {
	return t.Clone()
}

func (t *OccupancyGridUpdate) SetDefaults() {
	t.Header.SetDefaults()
	t.X = 0
	t.Y = 0
	t.Width = 0
	t.Height = 0
	t.Data = nil
}

func (t *OccupancyGridUpdate) GetTypeSupport() types.MessageTypeSupport {
	return OccupancyGridUpdateTypeSupport
}

// OccupancyGridUpdatePublisher wraps rclgo.Publisher to provide type safe helper
// functions
type OccupancyGridUpdatePublisher struct {
	*rclgo.Publisher
}

// NewOccupancyGridUpdatePublisher creates and returns a new publisher for the
// OccupancyGridUpdate
func NewOccupancyGridUpdatePublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*OccupancyGridUpdatePublisher, error) {
	pub, err := node.NewPublisher(topic_name, OccupancyGridUpdateTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &OccupancyGridUpdatePublisher{pub}, nil
}

func (p *OccupancyGridUpdatePublisher) Publish(msg *OccupancyGridUpdate) error {
	return p.Publisher.Publish(msg)
}

// OccupancyGridUpdateSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type OccupancyGridUpdateSubscription struct {
	*rclgo.Subscription
}

// OccupancyGridUpdateSubscriptionCallback type is used to provide a subscription
// handler function for a OccupancyGridUpdateSubscription.
type OccupancyGridUpdateSubscriptionCallback func(msg *OccupancyGridUpdate, info *rclgo.MessageInfo, err error)

// NewOccupancyGridUpdateSubscription creates and returns a new subscription for the
// OccupancyGridUpdate
func NewOccupancyGridUpdateSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback OccupancyGridUpdateSubscriptionCallback) (*OccupancyGridUpdateSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg OccupancyGridUpdate
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, OccupancyGridUpdateTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &OccupancyGridUpdateSubscription{sub}, nil
}

func (s *OccupancyGridUpdateSubscription) TakeMessage(out *OccupancyGridUpdate) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneOccupancyGridUpdateSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneOccupancyGridUpdateSlice(dst, src []OccupancyGridUpdate) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var OccupancyGridUpdateTypeSupport types.MessageTypeSupport = _OccupancyGridUpdateTypeSupport{}

type _OccupancyGridUpdateTypeSupport struct{}

func (t _OccupancyGridUpdateTypeSupport) New() types.Message {
	return NewOccupancyGridUpdate()
}

func (t _OccupancyGridUpdateTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.map_msgs__msg__OccupancyGridUpdate
	return (unsafe.Pointer)(C.map_msgs__msg__OccupancyGridUpdate__create())
}

func (t _OccupancyGridUpdateTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.map_msgs__msg__OccupancyGridUpdate__destroy((*C.map_msgs__msg__OccupancyGridUpdate)(pointer_to_free))
}

func (t _OccupancyGridUpdateTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*OccupancyGridUpdate)
	mem := (*C.map_msgs__msg__OccupancyGridUpdate)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	mem.x = C.int32_t(m.X)
	mem.y = C.int32_t(m.Y)
	mem.width = C.uint32_t(m.Width)
	mem.height = C.uint32_t(m.Height)
	primitives.Int8__Sequence_to_C((*primitives.CInt8__Sequence)(unsafe.Pointer(&mem.data)), m.Data)
}

func (t _OccupancyGridUpdateTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*OccupancyGridUpdate)
	mem := (*C.map_msgs__msg__OccupancyGridUpdate)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	m.X = int32(mem.x)
	m.Y = int32(mem.y)
	m.Width = uint32(mem.width)
	m.Height = uint32(mem.height)
	primitives.Int8__Sequence_to_Go(&m.Data, *(*primitives.CInt8__Sequence)(unsafe.Pointer(&mem.data)))
}

func (t _OccupancyGridUpdateTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__map_msgs__msg__OccupancyGridUpdate())
}

type COccupancyGridUpdate = C.map_msgs__msg__OccupancyGridUpdate
type COccupancyGridUpdate__Sequence = C.map_msgs__msg__OccupancyGridUpdate__Sequence

func OccupancyGridUpdate__Sequence_to_Go(goSlice *[]OccupancyGridUpdate, cSlice COccupancyGridUpdate__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]OccupancyGridUpdate, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		OccupancyGridUpdateTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func OccupancyGridUpdate__Sequence_to_C(cSlice *COccupancyGridUpdate__Sequence, goSlice []OccupancyGridUpdate) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.map_msgs__msg__OccupancyGridUpdate)(C.malloc(C.sizeof_struct_map_msgs__msg__OccupancyGridUpdate * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		OccupancyGridUpdateTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func OccupancyGridUpdate__Array_to_Go(goSlice []OccupancyGridUpdate, cSlice []COccupancyGridUpdate) {
	for i := 0; i < len(cSlice); i++ {
		OccupancyGridUpdateTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func OccupancyGridUpdate__Array_to_C(cSlice []COccupancyGridUpdate, goSlice []OccupancyGridUpdate) {
	for i := 0; i < len(goSlice); i++ {
		OccupancyGridUpdateTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
