// Code generated by rclgo-gen. DO NOT EDIT.

package map_msgs_srv

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <map_msgs/srv/set_map_projections.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
)

func init() {
	typemap.RegisterService("map_msgs/SetMapProjections", SetMapProjectionsTypeSupport)
	typemap.RegisterService("map_msgs/srv/SetMapProjections", SetMapProjectionsTypeSupport)
}

type _SetMapProjectionsTypeSupport struct {}

func (s _SetMapProjectionsTypeSupport) Request() types.MessageTypeSupport {
	return SetMapProjections_RequestTypeSupport
}

func (s _SetMapProjectionsTypeSupport) Response() types.MessageTypeSupport {
	return SetMapProjections_ResponseTypeSupport
}

func (s _SetMapProjectionsTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__map_msgs__srv__SetMapProjections())
}

// Modifying this variable is undefined behavior.
var SetMapProjectionsTypeSupport types.ServiceTypeSupport = _SetMapProjectionsTypeSupport{}

// SetMapProjectionsClient wraps rclgo.Client to provide type safe helper
// functions
type SetMapProjectionsClient struct {
	*rclgo.Client
}

// NewSetMapProjectionsClient creates and returns a new client for the
// SetMapProjections
func NewSetMapProjectionsClient(node *rclgo.Node, serviceName string, options *rclgo.ClientOptions) (*SetMapProjectionsClient, error) {
	client, err := node.NewClient(serviceName, SetMapProjectionsTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &SetMapProjectionsClient{client}, nil
}

func (s *SetMapProjectionsClient) Send(ctx context.Context, req *SetMapProjections_Request) (*SetMapProjections_Response, *rclgo.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*SetMapProjections_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type SetMapProjectionsServiceResponseSender struct {
	sender rclgo.ServiceResponseSender
}

func (s SetMapProjectionsServiceResponseSender) SendResponse(resp *SetMapProjections_Response) error {
	return s.sender.SendResponse(resp)
}

type SetMapProjectionsServiceRequestHandler func(*rclgo.ServiceInfo, *SetMapProjections_Request, SetMapProjectionsServiceResponseSender)

// SetMapProjectionsService wraps rclgo.Service to provide type safe helper
// functions
type SetMapProjectionsService struct {
	*rclgo.Service
}

// NewSetMapProjectionsService creates and returns a new service for the
// SetMapProjections
func NewSetMapProjectionsService(node *rclgo.Node, name string, options *rclgo.ServiceOptions, handler SetMapProjectionsServiceRequestHandler) (*SetMapProjectionsService, error) {
	h := func(rmw *rclgo.ServiceInfo, msg types.Message, rs rclgo.ServiceResponseSender) {
		m := msg.(*SetMapProjections_Request)
		responseSender := SetMapProjectionsServiceResponseSender{sender: rs}
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, SetMapProjectionsTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &SetMapProjectionsService{service}, nil
}
