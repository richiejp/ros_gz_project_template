// Code generated by rclgo-gen. DO NOT EDIT.

package map_msgs_srv
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <map_msgs/srv/get_point_map_roi.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("map_msgs/GetPointMapROI_Request", GetPointMapROI_RequestTypeSupport)
	typemap.RegisterMessage("map_msgs/srv/GetPointMapROI_Request", GetPointMapROI_RequestTypeSupport)
}

type GetPointMapROI_Request struct {
	X float64 `yaml:"x" json:"x" mapstructure:"x"`
	Y float64 `yaml:"y" json:"y" mapstructure:"y"`
	Z float64 `yaml:"z" json:"z" mapstructure:"z"`
	R float64 `yaml:"r" json:"r" mapstructure:"r"`// if != 0, circular ROI of radius r
	LX float64 `yaml:"l_x" json:"l_x" mapstructure:"l_x"`// if r == 0, length of AABB on x
	LY float64 `yaml:"l_y" json:"l_y" mapstructure:"l_y"`// if r == 0, length of AABB on y
	LZ float64 `yaml:"l_z" json:"l_z" mapstructure:"l_z"`// if r == 0, length of AABB on z
}

// NewGetPointMapROI_Request creates a new GetPointMapROI_Request with default values.
func NewGetPointMapROI_Request() *GetPointMapROI_Request {
	self := GetPointMapROI_Request{}
	self.SetDefaults()
	return &self
}

func (t *GetPointMapROI_Request) Clone() *GetPointMapROI_Request {
	c := &GetPointMapROI_Request{}
	c.X = t.X
	c.Y = t.Y
	c.Z = t.Z
	c.R = t.R
	c.LX = t.LX
	c.LY = t.LY
	c.LZ = t.LZ
	return c
}

func (t *GetPointMapROI_Request) CloneMsg() types.Message {
	return t.Clone()
}

func (t *GetPointMapROI_Request) SetDefaults() {
	t.X = 0
	t.Y = 0
	t.Z = 0
	t.R = 0
	t.LX = 0
	t.LY = 0
	t.LZ = 0
}

func (t *GetPointMapROI_Request) GetTypeSupport() types.MessageTypeSupport {
	return GetPointMapROI_RequestTypeSupport
}

// GetPointMapROI_RequestPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type GetPointMapROI_RequestPublisher struct {
	*rclgo.Publisher
}

// NewGetPointMapROI_RequestPublisher creates and returns a new publisher for the
// GetPointMapROI_Request
func NewGetPointMapROI_RequestPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*GetPointMapROI_RequestPublisher, error) {
	pub, err := node.NewPublisher(topic_name, GetPointMapROI_RequestTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &GetPointMapROI_RequestPublisher{pub}, nil
}

func (p *GetPointMapROI_RequestPublisher) Publish(msg *GetPointMapROI_Request) error {
	return p.Publisher.Publish(msg)
}

// GetPointMapROI_RequestSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type GetPointMapROI_RequestSubscription struct {
	*rclgo.Subscription
}

// GetPointMapROI_RequestSubscriptionCallback type is used to provide a subscription
// handler function for a GetPointMapROI_RequestSubscription.
type GetPointMapROI_RequestSubscriptionCallback func(msg *GetPointMapROI_Request, info *rclgo.MessageInfo, err error)

// NewGetPointMapROI_RequestSubscription creates and returns a new subscription for the
// GetPointMapROI_Request
func NewGetPointMapROI_RequestSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback GetPointMapROI_RequestSubscriptionCallback) (*GetPointMapROI_RequestSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg GetPointMapROI_Request
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, GetPointMapROI_RequestTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &GetPointMapROI_RequestSubscription{sub}, nil
}

func (s *GetPointMapROI_RequestSubscription) TakeMessage(out *GetPointMapROI_Request) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneGetPointMapROI_RequestSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneGetPointMapROI_RequestSlice(dst, src []GetPointMapROI_Request) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var GetPointMapROI_RequestTypeSupport types.MessageTypeSupport = _GetPointMapROI_RequestTypeSupport{}

type _GetPointMapROI_RequestTypeSupport struct{}

func (t _GetPointMapROI_RequestTypeSupport) New() types.Message {
	return NewGetPointMapROI_Request()
}

func (t _GetPointMapROI_RequestTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.map_msgs__srv__GetPointMapROI_Request
	return (unsafe.Pointer)(C.map_msgs__srv__GetPointMapROI_Request__create())
}

func (t _GetPointMapROI_RequestTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.map_msgs__srv__GetPointMapROI_Request__destroy((*C.map_msgs__srv__GetPointMapROI_Request)(pointer_to_free))
}

func (t _GetPointMapROI_RequestTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*GetPointMapROI_Request)
	mem := (*C.map_msgs__srv__GetPointMapROI_Request)(dst)
	mem.x = C.double(m.X)
	mem.y = C.double(m.Y)
	mem.z = C.double(m.Z)
	mem.r = C.double(m.R)
	mem.l_x = C.double(m.LX)
	mem.l_y = C.double(m.LY)
	mem.l_z = C.double(m.LZ)
}

func (t _GetPointMapROI_RequestTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*GetPointMapROI_Request)
	mem := (*C.map_msgs__srv__GetPointMapROI_Request)(ros2_message_buffer)
	m.X = float64(mem.x)
	m.Y = float64(mem.y)
	m.Z = float64(mem.z)
	m.R = float64(mem.r)
	m.LX = float64(mem.l_x)
	m.LY = float64(mem.l_y)
	m.LZ = float64(mem.l_z)
}

func (t _GetPointMapROI_RequestTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__map_msgs__srv__GetPointMapROI_Request())
}

type CGetPointMapROI_Request = C.map_msgs__srv__GetPointMapROI_Request
type CGetPointMapROI_Request__Sequence = C.map_msgs__srv__GetPointMapROI_Request__Sequence

func GetPointMapROI_Request__Sequence_to_Go(goSlice *[]GetPointMapROI_Request, cSlice CGetPointMapROI_Request__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]GetPointMapROI_Request, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		GetPointMapROI_RequestTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func GetPointMapROI_Request__Sequence_to_C(cSlice *CGetPointMapROI_Request__Sequence, goSlice []GetPointMapROI_Request) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.map_msgs__srv__GetPointMapROI_Request)(C.malloc(C.sizeof_struct_map_msgs__srv__GetPointMapROI_Request * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		GetPointMapROI_RequestTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func GetPointMapROI_Request__Array_to_Go(goSlice []GetPointMapROI_Request, cSlice []CGetPointMapROI_Request) {
	for i := 0; i < len(cSlice); i++ {
		GetPointMapROI_RequestTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func GetPointMapROI_Request__Array_to_C(cSlice []CGetPointMapROI_Request, goSlice []GetPointMapROI_Request) {
	for i := 0; i < len(goSlice); i++ {
		GetPointMapROI_RequestTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
