// Code generated by rclgo-gen. DO NOT EDIT.

package map_msgs_srv
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	nav_msgs_msg "github.com/iema-group/goros2/msgs/nav_msgs/msg"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <map_msgs/srv/get_map_roi.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("map_msgs/GetMapROI_Response", GetMapROI_ResponseTypeSupport)
	typemap.RegisterMessage("map_msgs/srv/GetMapROI_Response", GetMapROI_ResponseTypeSupport)
}

type GetMapROI_Response struct {
	SubMap nav_msgs_msg.OccupancyGrid `yaml:"sub_map" json:"sub_map" mapstructure:"sub_map"`
}

// NewGetMapROI_Response creates a new GetMapROI_Response with default values.
func NewGetMapROI_Response() *GetMapROI_Response {
	self := GetMapROI_Response{}
	self.SetDefaults()
	return &self
}

func (t *GetMapROI_Response) Clone() *GetMapROI_Response {
	c := &GetMapROI_Response{}
	c.SubMap = *t.SubMap.Clone()
	return c
}

func (t *GetMapROI_Response) CloneMsg() types.Message {
	return t.Clone()
}

func (t *GetMapROI_Response) SetDefaults() {
	t.SubMap.SetDefaults()
}

func (t *GetMapROI_Response) GetTypeSupport() types.MessageTypeSupport {
	return GetMapROI_ResponseTypeSupport
}

// GetMapROI_ResponsePublisher wraps rclgo.Publisher to provide type safe helper
// functions
type GetMapROI_ResponsePublisher struct {
	*rclgo.Publisher
}

// NewGetMapROI_ResponsePublisher creates and returns a new publisher for the
// GetMapROI_Response
func NewGetMapROI_ResponsePublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*GetMapROI_ResponsePublisher, error) {
	pub, err := node.NewPublisher(topic_name, GetMapROI_ResponseTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &GetMapROI_ResponsePublisher{pub}, nil
}

func (p *GetMapROI_ResponsePublisher) Publish(msg *GetMapROI_Response) error {
	return p.Publisher.Publish(msg)
}

// GetMapROI_ResponseSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type GetMapROI_ResponseSubscription struct {
	*rclgo.Subscription
}

// GetMapROI_ResponseSubscriptionCallback type is used to provide a subscription
// handler function for a GetMapROI_ResponseSubscription.
type GetMapROI_ResponseSubscriptionCallback func(msg *GetMapROI_Response, info *rclgo.MessageInfo, err error)

// NewGetMapROI_ResponseSubscription creates and returns a new subscription for the
// GetMapROI_Response
func NewGetMapROI_ResponseSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback GetMapROI_ResponseSubscriptionCallback) (*GetMapROI_ResponseSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg GetMapROI_Response
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, GetMapROI_ResponseTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &GetMapROI_ResponseSubscription{sub}, nil
}

func (s *GetMapROI_ResponseSubscription) TakeMessage(out *GetMapROI_Response) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneGetMapROI_ResponseSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneGetMapROI_ResponseSlice(dst, src []GetMapROI_Response) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var GetMapROI_ResponseTypeSupport types.MessageTypeSupport = _GetMapROI_ResponseTypeSupport{}

type _GetMapROI_ResponseTypeSupport struct{}

func (t _GetMapROI_ResponseTypeSupport) New() types.Message {
	return NewGetMapROI_Response()
}

func (t _GetMapROI_ResponseTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.map_msgs__srv__GetMapROI_Response
	return (unsafe.Pointer)(C.map_msgs__srv__GetMapROI_Response__create())
}

func (t _GetMapROI_ResponseTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.map_msgs__srv__GetMapROI_Response__destroy((*C.map_msgs__srv__GetMapROI_Response)(pointer_to_free))
}

func (t _GetMapROI_ResponseTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*GetMapROI_Response)
	mem := (*C.map_msgs__srv__GetMapROI_Response)(dst)
	nav_msgs_msg.OccupancyGridTypeSupport.AsCStruct(unsafe.Pointer(&mem.sub_map), &m.SubMap)
}

func (t _GetMapROI_ResponseTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*GetMapROI_Response)
	mem := (*C.map_msgs__srv__GetMapROI_Response)(ros2_message_buffer)
	nav_msgs_msg.OccupancyGridTypeSupport.AsGoStruct(&m.SubMap, unsafe.Pointer(&mem.sub_map))
}

func (t _GetMapROI_ResponseTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__map_msgs__srv__GetMapROI_Response())
}

type CGetMapROI_Response = C.map_msgs__srv__GetMapROI_Response
type CGetMapROI_Response__Sequence = C.map_msgs__srv__GetMapROI_Response__Sequence

func GetMapROI_Response__Sequence_to_Go(goSlice *[]GetMapROI_Response, cSlice CGetMapROI_Response__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]GetMapROI_Response, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		GetMapROI_ResponseTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func GetMapROI_Response__Sequence_to_C(cSlice *CGetMapROI_Response__Sequence, goSlice []GetMapROI_Response) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.map_msgs__srv__GetMapROI_Response)(C.malloc(C.sizeof_struct_map_msgs__srv__GetMapROI_Response * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		GetMapROI_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func GetMapROI_Response__Array_to_Go(goSlice []GetMapROI_Response, cSlice []CGetMapROI_Response) {
	for i := 0; i < len(cSlice); i++ {
		GetMapROI_ResponseTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func GetMapROI_Response__Array_to_C(cSlice []CGetMapROI_Response, goSlice []GetMapROI_Response) {
	for i := 0; i < len(goSlice); i++ {
		GetMapROI_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
