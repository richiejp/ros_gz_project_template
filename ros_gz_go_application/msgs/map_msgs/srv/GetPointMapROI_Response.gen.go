// Code generated by rclgo-gen. DO NOT EDIT.

package map_msgs_srv
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	sensor_msgs_msg "github.com/iema-group/goros2/msgs/sensor_msgs/msg"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <map_msgs/srv/get_point_map_roi.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("map_msgs/GetPointMapROI_Response", GetPointMapROI_ResponseTypeSupport)
	typemap.RegisterMessage("map_msgs/srv/GetPointMapROI_Response", GetPointMapROI_ResponseTypeSupport)
}

type GetPointMapROI_Response struct {
	SubMap sensor_msgs_msg.PointCloud2 `yaml:"sub_map" json:"sub_map" mapstructure:"sub_map"`
}

// NewGetPointMapROI_Response creates a new GetPointMapROI_Response with default values.
func NewGetPointMapROI_Response() *GetPointMapROI_Response {
	self := GetPointMapROI_Response{}
	self.SetDefaults()
	return &self
}

func (t *GetPointMapROI_Response) Clone() *GetPointMapROI_Response {
	c := &GetPointMapROI_Response{}
	c.SubMap = *t.SubMap.Clone()
	return c
}

func (t *GetPointMapROI_Response) CloneMsg() types.Message {
	return t.Clone()
}

func (t *GetPointMapROI_Response) SetDefaults() {
	t.SubMap.SetDefaults()
}

func (t *GetPointMapROI_Response) GetTypeSupport() types.MessageTypeSupport {
	return GetPointMapROI_ResponseTypeSupport
}

// GetPointMapROI_ResponsePublisher wraps rclgo.Publisher to provide type safe helper
// functions
type GetPointMapROI_ResponsePublisher struct {
	*rclgo.Publisher
}

// NewGetPointMapROI_ResponsePublisher creates and returns a new publisher for the
// GetPointMapROI_Response
func NewGetPointMapROI_ResponsePublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*GetPointMapROI_ResponsePublisher, error) {
	pub, err := node.NewPublisher(topic_name, GetPointMapROI_ResponseTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &GetPointMapROI_ResponsePublisher{pub}, nil
}

func (p *GetPointMapROI_ResponsePublisher) Publish(msg *GetPointMapROI_Response) error {
	return p.Publisher.Publish(msg)
}

// GetPointMapROI_ResponseSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type GetPointMapROI_ResponseSubscription struct {
	*rclgo.Subscription
}

// GetPointMapROI_ResponseSubscriptionCallback type is used to provide a subscription
// handler function for a GetPointMapROI_ResponseSubscription.
type GetPointMapROI_ResponseSubscriptionCallback func(msg *GetPointMapROI_Response, info *rclgo.MessageInfo, err error)

// NewGetPointMapROI_ResponseSubscription creates and returns a new subscription for the
// GetPointMapROI_Response
func NewGetPointMapROI_ResponseSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback GetPointMapROI_ResponseSubscriptionCallback) (*GetPointMapROI_ResponseSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg GetPointMapROI_Response
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, GetPointMapROI_ResponseTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &GetPointMapROI_ResponseSubscription{sub}, nil
}

func (s *GetPointMapROI_ResponseSubscription) TakeMessage(out *GetPointMapROI_Response) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneGetPointMapROI_ResponseSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneGetPointMapROI_ResponseSlice(dst, src []GetPointMapROI_Response) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var GetPointMapROI_ResponseTypeSupport types.MessageTypeSupport = _GetPointMapROI_ResponseTypeSupport{}

type _GetPointMapROI_ResponseTypeSupport struct{}

func (t _GetPointMapROI_ResponseTypeSupport) New() types.Message {
	return NewGetPointMapROI_Response()
}

func (t _GetPointMapROI_ResponseTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.map_msgs__srv__GetPointMapROI_Response
	return (unsafe.Pointer)(C.map_msgs__srv__GetPointMapROI_Response__create())
}

func (t _GetPointMapROI_ResponseTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.map_msgs__srv__GetPointMapROI_Response__destroy((*C.map_msgs__srv__GetPointMapROI_Response)(pointer_to_free))
}

func (t _GetPointMapROI_ResponseTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*GetPointMapROI_Response)
	mem := (*C.map_msgs__srv__GetPointMapROI_Response)(dst)
	sensor_msgs_msg.PointCloud2TypeSupport.AsCStruct(unsafe.Pointer(&mem.sub_map), &m.SubMap)
}

func (t _GetPointMapROI_ResponseTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*GetPointMapROI_Response)
	mem := (*C.map_msgs__srv__GetPointMapROI_Response)(ros2_message_buffer)
	sensor_msgs_msg.PointCloud2TypeSupport.AsGoStruct(&m.SubMap, unsafe.Pointer(&mem.sub_map))
}

func (t _GetPointMapROI_ResponseTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__map_msgs__srv__GetPointMapROI_Response())
}

type CGetPointMapROI_Response = C.map_msgs__srv__GetPointMapROI_Response
type CGetPointMapROI_Response__Sequence = C.map_msgs__srv__GetPointMapROI_Response__Sequence

func GetPointMapROI_Response__Sequence_to_Go(goSlice *[]GetPointMapROI_Response, cSlice CGetPointMapROI_Response__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]GetPointMapROI_Response, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		GetPointMapROI_ResponseTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func GetPointMapROI_Response__Sequence_to_C(cSlice *CGetPointMapROI_Response__Sequence, goSlice []GetPointMapROI_Response) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.map_msgs__srv__GetPointMapROI_Response)(C.malloc(C.sizeof_struct_map_msgs__srv__GetPointMapROI_Response * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		GetPointMapROI_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func GetPointMapROI_Response__Array_to_Go(goSlice []GetPointMapROI_Response, cSlice []CGetPointMapROI_Response) {
	for i := 0; i < len(cSlice); i++ {
		GetPointMapROI_ResponseTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func GetPointMapROI_Response__Array_to_C(cSlice []CGetPointMapROI_Response, goSlice []GetPointMapROI_Response) {
	for i := 0; i < len(goSlice); i++ {
		GetPointMapROI_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
