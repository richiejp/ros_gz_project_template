// Code generated by rclgo-gen. DO NOT EDIT.

package map_msgs_srv
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	map_msgs_msg "github.com/iema-group/goros2/msgs/map_msgs/msg"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <map_msgs/srv/projected_maps_info.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("map_msgs/ProjectedMapsInfo_Request", ProjectedMapsInfo_RequestTypeSupport)
	typemap.RegisterMessage("map_msgs/srv/ProjectedMapsInfo_Request", ProjectedMapsInfo_RequestTypeSupport)
}

type ProjectedMapsInfo_Request struct {
	ProjectedMapsInfo []map_msgs_msg.ProjectedMapInfo `yaml:"projected_maps_info" json:"projected_maps_info" mapstructure:"projected_maps_info"`
}

// NewProjectedMapsInfo_Request creates a new ProjectedMapsInfo_Request with default values.
func NewProjectedMapsInfo_Request() *ProjectedMapsInfo_Request {
	self := ProjectedMapsInfo_Request{}
	self.SetDefaults()
	return &self
}

func (t *ProjectedMapsInfo_Request) Clone() *ProjectedMapsInfo_Request {
	c := &ProjectedMapsInfo_Request{}
	if t.ProjectedMapsInfo != nil {
		c.ProjectedMapsInfo = make([]map_msgs_msg.ProjectedMapInfo, len(t.ProjectedMapsInfo))
		map_msgs_msg.CloneProjectedMapInfoSlice(c.ProjectedMapsInfo, t.ProjectedMapsInfo)
	}
	return c
}

func (t *ProjectedMapsInfo_Request) CloneMsg() types.Message {
	return t.Clone()
}

func (t *ProjectedMapsInfo_Request) SetDefaults() {
	t.ProjectedMapsInfo = nil
}

func (t *ProjectedMapsInfo_Request) GetTypeSupport() types.MessageTypeSupport {
	return ProjectedMapsInfo_RequestTypeSupport
}

// ProjectedMapsInfo_RequestPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type ProjectedMapsInfo_RequestPublisher struct {
	*rclgo.Publisher
}

// NewProjectedMapsInfo_RequestPublisher creates and returns a new publisher for the
// ProjectedMapsInfo_Request
func NewProjectedMapsInfo_RequestPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*ProjectedMapsInfo_RequestPublisher, error) {
	pub, err := node.NewPublisher(topic_name, ProjectedMapsInfo_RequestTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ProjectedMapsInfo_RequestPublisher{pub}, nil
}

func (p *ProjectedMapsInfo_RequestPublisher) Publish(msg *ProjectedMapsInfo_Request) error {
	return p.Publisher.Publish(msg)
}

// ProjectedMapsInfo_RequestSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type ProjectedMapsInfo_RequestSubscription struct {
	*rclgo.Subscription
}

// ProjectedMapsInfo_RequestSubscriptionCallback type is used to provide a subscription
// handler function for a ProjectedMapsInfo_RequestSubscription.
type ProjectedMapsInfo_RequestSubscriptionCallback func(msg *ProjectedMapsInfo_Request, info *rclgo.MessageInfo, err error)

// NewProjectedMapsInfo_RequestSubscription creates and returns a new subscription for the
// ProjectedMapsInfo_Request
func NewProjectedMapsInfo_RequestSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback ProjectedMapsInfo_RequestSubscriptionCallback) (*ProjectedMapsInfo_RequestSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg ProjectedMapsInfo_Request
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, ProjectedMapsInfo_RequestTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &ProjectedMapsInfo_RequestSubscription{sub}, nil
}

func (s *ProjectedMapsInfo_RequestSubscription) TakeMessage(out *ProjectedMapsInfo_Request) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneProjectedMapsInfo_RequestSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneProjectedMapsInfo_RequestSlice(dst, src []ProjectedMapsInfo_Request) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ProjectedMapsInfo_RequestTypeSupport types.MessageTypeSupport = _ProjectedMapsInfo_RequestTypeSupport{}

type _ProjectedMapsInfo_RequestTypeSupport struct{}

func (t _ProjectedMapsInfo_RequestTypeSupport) New() types.Message {
	return NewProjectedMapsInfo_Request()
}

func (t _ProjectedMapsInfo_RequestTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.map_msgs__srv__ProjectedMapsInfo_Request
	return (unsafe.Pointer)(C.map_msgs__srv__ProjectedMapsInfo_Request__create())
}

func (t _ProjectedMapsInfo_RequestTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.map_msgs__srv__ProjectedMapsInfo_Request__destroy((*C.map_msgs__srv__ProjectedMapsInfo_Request)(pointer_to_free))
}

func (t _ProjectedMapsInfo_RequestTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*ProjectedMapsInfo_Request)
	mem := (*C.map_msgs__srv__ProjectedMapsInfo_Request)(dst)
	map_msgs_msg.ProjectedMapInfo__Sequence_to_C((*map_msgs_msg.CProjectedMapInfo__Sequence)(unsafe.Pointer(&mem.projected_maps_info)), m.ProjectedMapsInfo)
}

func (t _ProjectedMapsInfo_RequestTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*ProjectedMapsInfo_Request)
	mem := (*C.map_msgs__srv__ProjectedMapsInfo_Request)(ros2_message_buffer)
	map_msgs_msg.ProjectedMapInfo__Sequence_to_Go(&m.ProjectedMapsInfo, *(*map_msgs_msg.CProjectedMapInfo__Sequence)(unsafe.Pointer(&mem.projected_maps_info)))
}

func (t _ProjectedMapsInfo_RequestTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__map_msgs__srv__ProjectedMapsInfo_Request())
}

type CProjectedMapsInfo_Request = C.map_msgs__srv__ProjectedMapsInfo_Request
type CProjectedMapsInfo_Request__Sequence = C.map_msgs__srv__ProjectedMapsInfo_Request__Sequence

func ProjectedMapsInfo_Request__Sequence_to_Go(goSlice *[]ProjectedMapsInfo_Request, cSlice CProjectedMapsInfo_Request__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]ProjectedMapsInfo_Request, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		ProjectedMapsInfo_RequestTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func ProjectedMapsInfo_Request__Sequence_to_C(cSlice *CProjectedMapsInfo_Request__Sequence, goSlice []ProjectedMapsInfo_Request) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.map_msgs__srv__ProjectedMapsInfo_Request)(C.malloc(C.sizeof_struct_map_msgs__srv__ProjectedMapsInfo_Request * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		ProjectedMapsInfo_RequestTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func ProjectedMapsInfo_Request__Array_to_Go(goSlice []ProjectedMapsInfo_Request, cSlice []CProjectedMapsInfo_Request) {
	for i := 0; i < len(cSlice); i++ {
		ProjectedMapsInfo_RequestTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func ProjectedMapsInfo_Request__Array_to_C(cSlice []CProjectedMapsInfo_Request, goSlice []ProjectedMapsInfo_Request) {
	for i := 0; i < len(goSlice); i++ {
		ProjectedMapsInfo_RequestTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
