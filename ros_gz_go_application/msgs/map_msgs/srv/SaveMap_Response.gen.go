// Code generated by rclgo-gen. DO NOT EDIT.

package map_msgs_srv
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <map_msgs/srv/save_map.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("map_msgs/SaveMap_Response", SaveMap_ResponseTypeSupport)
	typemap.RegisterMessage("map_msgs/srv/SaveMap_Response", SaveMap_ResponseTypeSupport)
}

type SaveMap_Response struct {
}

// NewSaveMap_Response creates a new SaveMap_Response with default values.
func NewSaveMap_Response() *SaveMap_Response {
	self := SaveMap_Response{}
	self.SetDefaults()
	return &self
}

func (t *SaveMap_Response) Clone() *SaveMap_Response {
	c := &SaveMap_Response{}
	return c
}

func (t *SaveMap_Response) CloneMsg() types.Message {
	return t.Clone()
}

func (t *SaveMap_Response) SetDefaults() {
}

func (t *SaveMap_Response) GetTypeSupport() types.MessageTypeSupport {
	return SaveMap_ResponseTypeSupport
}

// SaveMap_ResponsePublisher wraps rclgo.Publisher to provide type safe helper
// functions
type SaveMap_ResponsePublisher struct {
	*rclgo.Publisher
}

// NewSaveMap_ResponsePublisher creates and returns a new publisher for the
// SaveMap_Response
func NewSaveMap_ResponsePublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*SaveMap_ResponsePublisher, error) {
	pub, err := node.NewPublisher(topic_name, SaveMap_ResponseTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &SaveMap_ResponsePublisher{pub}, nil
}

func (p *SaveMap_ResponsePublisher) Publish(msg *SaveMap_Response) error {
	return p.Publisher.Publish(msg)
}

// SaveMap_ResponseSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type SaveMap_ResponseSubscription struct {
	*rclgo.Subscription
}

// SaveMap_ResponseSubscriptionCallback type is used to provide a subscription
// handler function for a SaveMap_ResponseSubscription.
type SaveMap_ResponseSubscriptionCallback func(msg *SaveMap_Response, info *rclgo.MessageInfo, err error)

// NewSaveMap_ResponseSubscription creates and returns a new subscription for the
// SaveMap_Response
func NewSaveMap_ResponseSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback SaveMap_ResponseSubscriptionCallback) (*SaveMap_ResponseSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg SaveMap_Response
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, SaveMap_ResponseTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &SaveMap_ResponseSubscription{sub}, nil
}

func (s *SaveMap_ResponseSubscription) TakeMessage(out *SaveMap_Response) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneSaveMap_ResponseSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneSaveMap_ResponseSlice(dst, src []SaveMap_Response) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var SaveMap_ResponseTypeSupport types.MessageTypeSupport = _SaveMap_ResponseTypeSupport{}

type _SaveMap_ResponseTypeSupport struct{}

func (t _SaveMap_ResponseTypeSupport) New() types.Message {
	return NewSaveMap_Response()
}

func (t _SaveMap_ResponseTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.map_msgs__srv__SaveMap_Response
	return (unsafe.Pointer)(C.map_msgs__srv__SaveMap_Response__create())
}

func (t _SaveMap_ResponseTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.map_msgs__srv__SaveMap_Response__destroy((*C.map_msgs__srv__SaveMap_Response)(pointer_to_free))
}

func (t _SaveMap_ResponseTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	
}

func (t _SaveMap_ResponseTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	
}

func (t _SaveMap_ResponseTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__map_msgs__srv__SaveMap_Response())
}

type CSaveMap_Response = C.map_msgs__srv__SaveMap_Response
type CSaveMap_Response__Sequence = C.map_msgs__srv__SaveMap_Response__Sequence

func SaveMap_Response__Sequence_to_Go(goSlice *[]SaveMap_Response, cSlice CSaveMap_Response__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]SaveMap_Response, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		SaveMap_ResponseTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func SaveMap_Response__Sequence_to_C(cSlice *CSaveMap_Response__Sequence, goSlice []SaveMap_Response) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.map_msgs__srv__SaveMap_Response)(C.malloc(C.sizeof_struct_map_msgs__srv__SaveMap_Response * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		SaveMap_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func SaveMap_Response__Array_to_Go(goSlice []SaveMap_Response, cSlice []CSaveMap_Response) {
	for i := 0; i < len(cSlice); i++ {
		SaveMap_ResponseTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func SaveMap_Response__Array_to_C(cSlice []CSaveMap_Response, goSlice []SaveMap_Response) {
	for i := 0; i < len(goSlice); i++ {
		SaveMap_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
