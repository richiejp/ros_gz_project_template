// Code generated by rclgo-gen. DO NOT EDIT.

package map_msgs_srv
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <map_msgs/srv/get_map_roi.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("map_msgs/GetMapROI_Request", GetMapROI_RequestTypeSupport)
	typemap.RegisterMessage("map_msgs/srv/GetMapROI_Request", GetMapROI_RequestTypeSupport)
}

type GetMapROI_Request struct {
	X float64 `yaml:"x" json:"x" mapstructure:"x"`
	Y float64 `yaml:"y" json:"y" mapstructure:"y"`
	LX float64 `yaml:"l_x" json:"l_x" mapstructure:"l_x"`
	LY float64 `yaml:"l_y" json:"l_y" mapstructure:"l_y"`
}

// NewGetMapROI_Request creates a new GetMapROI_Request with default values.
func NewGetMapROI_Request() *GetMapROI_Request {
	self := GetMapROI_Request{}
	self.SetDefaults()
	return &self
}

func (t *GetMapROI_Request) Clone() *GetMapROI_Request {
	c := &GetMapROI_Request{}
	c.X = t.X
	c.Y = t.Y
	c.LX = t.LX
	c.LY = t.LY
	return c
}

func (t *GetMapROI_Request) CloneMsg() types.Message {
	return t.Clone()
}

func (t *GetMapROI_Request) SetDefaults() {
	t.X = 0
	t.Y = 0
	t.LX = 0
	t.LY = 0
}

func (t *GetMapROI_Request) GetTypeSupport() types.MessageTypeSupport {
	return GetMapROI_RequestTypeSupport
}

// GetMapROI_RequestPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type GetMapROI_RequestPublisher struct {
	*rclgo.Publisher
}

// NewGetMapROI_RequestPublisher creates and returns a new publisher for the
// GetMapROI_Request
func NewGetMapROI_RequestPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*GetMapROI_RequestPublisher, error) {
	pub, err := node.NewPublisher(topic_name, GetMapROI_RequestTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &GetMapROI_RequestPublisher{pub}, nil
}

func (p *GetMapROI_RequestPublisher) Publish(msg *GetMapROI_Request) error {
	return p.Publisher.Publish(msg)
}

// GetMapROI_RequestSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type GetMapROI_RequestSubscription struct {
	*rclgo.Subscription
}

// GetMapROI_RequestSubscriptionCallback type is used to provide a subscription
// handler function for a GetMapROI_RequestSubscription.
type GetMapROI_RequestSubscriptionCallback func(msg *GetMapROI_Request, info *rclgo.MessageInfo, err error)

// NewGetMapROI_RequestSubscription creates and returns a new subscription for the
// GetMapROI_Request
func NewGetMapROI_RequestSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback GetMapROI_RequestSubscriptionCallback) (*GetMapROI_RequestSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg GetMapROI_Request
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, GetMapROI_RequestTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &GetMapROI_RequestSubscription{sub}, nil
}

func (s *GetMapROI_RequestSubscription) TakeMessage(out *GetMapROI_Request) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneGetMapROI_RequestSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneGetMapROI_RequestSlice(dst, src []GetMapROI_Request) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var GetMapROI_RequestTypeSupport types.MessageTypeSupport = _GetMapROI_RequestTypeSupport{}

type _GetMapROI_RequestTypeSupport struct{}

func (t _GetMapROI_RequestTypeSupport) New() types.Message {
	return NewGetMapROI_Request()
}

func (t _GetMapROI_RequestTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.map_msgs__srv__GetMapROI_Request
	return (unsafe.Pointer)(C.map_msgs__srv__GetMapROI_Request__create())
}

func (t _GetMapROI_RequestTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.map_msgs__srv__GetMapROI_Request__destroy((*C.map_msgs__srv__GetMapROI_Request)(pointer_to_free))
}

func (t _GetMapROI_RequestTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*GetMapROI_Request)
	mem := (*C.map_msgs__srv__GetMapROI_Request)(dst)
	mem.x = C.double(m.X)
	mem.y = C.double(m.Y)
	mem.l_x = C.double(m.LX)
	mem.l_y = C.double(m.LY)
}

func (t _GetMapROI_RequestTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*GetMapROI_Request)
	mem := (*C.map_msgs__srv__GetMapROI_Request)(ros2_message_buffer)
	m.X = float64(mem.x)
	m.Y = float64(mem.y)
	m.LX = float64(mem.l_x)
	m.LY = float64(mem.l_y)
}

func (t _GetMapROI_RequestTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__map_msgs__srv__GetMapROI_Request())
}

type CGetMapROI_Request = C.map_msgs__srv__GetMapROI_Request
type CGetMapROI_Request__Sequence = C.map_msgs__srv__GetMapROI_Request__Sequence

func GetMapROI_Request__Sequence_to_Go(goSlice *[]GetMapROI_Request, cSlice CGetMapROI_Request__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]GetMapROI_Request, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		GetMapROI_RequestTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func GetMapROI_Request__Sequence_to_C(cSlice *CGetMapROI_Request__Sequence, goSlice []GetMapROI_Request) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.map_msgs__srv__GetMapROI_Request)(C.malloc(C.sizeof_struct_map_msgs__srv__GetMapROI_Request * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		GetMapROI_RequestTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func GetMapROI_Request__Array_to_Go(goSlice []GetMapROI_Request, cSlice []CGetMapROI_Request) {
	for i := 0; i < len(cSlice); i++ {
		GetMapROI_RequestTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func GetMapROI_Request__Array_to_C(cSlice []CGetMapROI_Request, goSlice []GetMapROI_Request) {
	for i := 0; i < len(goSlice); i++ {
		GetMapROI_RequestTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
