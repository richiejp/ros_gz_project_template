// Code generated by rclgo-gen. DO NOT EDIT.

package map_msgs_srv
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	std_msgs_msg "github.com/iema-group/goros2/msgs/std_msgs/msg"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <map_msgs/srv/save_map.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("map_msgs/SaveMap_Request", SaveMap_RequestTypeSupport)
	typemap.RegisterMessage("map_msgs/srv/SaveMap_Request", SaveMap_RequestTypeSupport)
}

type SaveMap_Request struct {
	Filename std_msgs_msg.String `yaml:"filename" json:"filename" mapstructure:"filename"`// Save the map to the filesystem
}

// NewSaveMap_Request creates a new SaveMap_Request with default values.
func NewSaveMap_Request() *SaveMap_Request {
	self := SaveMap_Request{}
	self.SetDefaults()
	return &self
}

func (t *SaveMap_Request) Clone() *SaveMap_Request {
	c := &SaveMap_Request{}
	c.Filename = *t.Filename.Clone()
	return c
}

func (t *SaveMap_Request) CloneMsg() types.Message {
	return t.Clone()
}

func (t *SaveMap_Request) SetDefaults() {
	t.Filename.SetDefaults()
}

func (t *SaveMap_Request) GetTypeSupport() types.MessageTypeSupport {
	return SaveMap_RequestTypeSupport
}

// SaveMap_RequestPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type SaveMap_RequestPublisher struct {
	*rclgo.Publisher
}

// NewSaveMap_RequestPublisher creates and returns a new publisher for the
// SaveMap_Request
func NewSaveMap_RequestPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*SaveMap_RequestPublisher, error) {
	pub, err := node.NewPublisher(topic_name, SaveMap_RequestTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &SaveMap_RequestPublisher{pub}, nil
}

func (p *SaveMap_RequestPublisher) Publish(msg *SaveMap_Request) error {
	return p.Publisher.Publish(msg)
}

// SaveMap_RequestSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type SaveMap_RequestSubscription struct {
	*rclgo.Subscription
}

// SaveMap_RequestSubscriptionCallback type is used to provide a subscription
// handler function for a SaveMap_RequestSubscription.
type SaveMap_RequestSubscriptionCallback func(msg *SaveMap_Request, info *rclgo.MessageInfo, err error)

// NewSaveMap_RequestSubscription creates and returns a new subscription for the
// SaveMap_Request
func NewSaveMap_RequestSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback SaveMap_RequestSubscriptionCallback) (*SaveMap_RequestSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg SaveMap_Request
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, SaveMap_RequestTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &SaveMap_RequestSubscription{sub}, nil
}

func (s *SaveMap_RequestSubscription) TakeMessage(out *SaveMap_Request) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneSaveMap_RequestSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneSaveMap_RequestSlice(dst, src []SaveMap_Request) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var SaveMap_RequestTypeSupport types.MessageTypeSupport = _SaveMap_RequestTypeSupport{}

type _SaveMap_RequestTypeSupport struct{}

func (t _SaveMap_RequestTypeSupport) New() types.Message {
	return NewSaveMap_Request()
}

func (t _SaveMap_RequestTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.map_msgs__srv__SaveMap_Request
	return (unsafe.Pointer)(C.map_msgs__srv__SaveMap_Request__create())
}

func (t _SaveMap_RequestTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.map_msgs__srv__SaveMap_Request__destroy((*C.map_msgs__srv__SaveMap_Request)(pointer_to_free))
}

func (t _SaveMap_RequestTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*SaveMap_Request)
	mem := (*C.map_msgs__srv__SaveMap_Request)(dst)
	std_msgs_msg.StringTypeSupport.AsCStruct(unsafe.Pointer(&mem.filename), &m.Filename)
}

func (t _SaveMap_RequestTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*SaveMap_Request)
	mem := (*C.map_msgs__srv__SaveMap_Request)(ros2_message_buffer)
	std_msgs_msg.StringTypeSupport.AsGoStruct(&m.Filename, unsafe.Pointer(&mem.filename))
}

func (t _SaveMap_RequestTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__map_msgs__srv__SaveMap_Request())
}

type CSaveMap_Request = C.map_msgs__srv__SaveMap_Request
type CSaveMap_Request__Sequence = C.map_msgs__srv__SaveMap_Request__Sequence

func SaveMap_Request__Sequence_to_Go(goSlice *[]SaveMap_Request, cSlice CSaveMap_Request__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]SaveMap_Request, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		SaveMap_RequestTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func SaveMap_Request__Sequence_to_C(cSlice *CSaveMap_Request__Sequence, goSlice []SaveMap_Request) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.map_msgs__srv__SaveMap_Request)(C.malloc(C.sizeof_struct_map_msgs__srv__SaveMap_Request * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		SaveMap_RequestTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func SaveMap_Request__Array_to_Go(goSlice []SaveMap_Request, cSlice []CSaveMap_Request) {
	for i := 0; i < len(cSlice); i++ {
		SaveMap_RequestTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func SaveMap_Request__Array_to_C(cSlice []CSaveMap_Request, goSlice []SaveMap_Request) {
	for i := 0; i < len(goSlice); i++ {
		SaveMap_RequestTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
