// Code generated by rclgo-gen. DO NOT EDIT.

package map_msgs_srv

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <map_msgs/srv/save_map.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
)

func init() {
	typemap.RegisterService("map_msgs/SaveMap", SaveMapTypeSupport)
	typemap.RegisterService("map_msgs/srv/SaveMap", SaveMapTypeSupport)
}

type _SaveMapTypeSupport struct {}

func (s _SaveMapTypeSupport) Request() types.MessageTypeSupport {
	return SaveMap_RequestTypeSupport
}

func (s _SaveMapTypeSupport) Response() types.MessageTypeSupport {
	return SaveMap_ResponseTypeSupport
}

func (s _SaveMapTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__map_msgs__srv__SaveMap())
}

// Modifying this variable is undefined behavior.
var SaveMapTypeSupport types.ServiceTypeSupport = _SaveMapTypeSupport{}

// SaveMapClient wraps rclgo.Client to provide type safe helper
// functions
type SaveMapClient struct {
	*rclgo.Client
}

// NewSaveMapClient creates and returns a new client for the
// SaveMap
func NewSaveMapClient(node *rclgo.Node, serviceName string, options *rclgo.ClientOptions) (*SaveMapClient, error) {
	client, err := node.NewClient(serviceName, SaveMapTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &SaveMapClient{client}, nil
}

func (s *SaveMapClient) Send(ctx context.Context, req *SaveMap_Request) (*SaveMap_Response, *rclgo.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*SaveMap_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type SaveMapServiceResponseSender struct {
	sender rclgo.ServiceResponseSender
}

func (s SaveMapServiceResponseSender) SendResponse(resp *SaveMap_Response) error {
	return s.sender.SendResponse(resp)
}

type SaveMapServiceRequestHandler func(*rclgo.ServiceInfo, *SaveMap_Request, SaveMapServiceResponseSender)

// SaveMapService wraps rclgo.Service to provide type safe helper
// functions
type SaveMapService struct {
	*rclgo.Service
}

// NewSaveMapService creates and returns a new service for the
// SaveMap
func NewSaveMapService(node *rclgo.Node, name string, options *rclgo.ServiceOptions, handler SaveMapServiceRequestHandler) (*SaveMapService, error) {
	h := func(rmw *rclgo.ServiceInfo, msg types.Message, rs rclgo.ServiceResponseSender) {
		m := msg.(*SaveMap_Request)
		responseSender := SaveMapServiceResponseSender{sender: rs}
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, SaveMapTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &SaveMapService{service}, nil
}
