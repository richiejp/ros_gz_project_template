// Code generated by rclgo-gen. DO NOT EDIT.

package gps_msgs_msg
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	primitives "github.com/ATIinc/rclgo/pkg/rclgo/primitives"
	std_msgs_msg "github.com/iema-group/goros2/msgs/std_msgs/msg"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <gps_msgs/msg/gps_status.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("gps_msgs/GPSStatus", GPSStatusTypeSupport)
	typemap.RegisterMessage("gps_msgs/msg/GPSStatus", GPSStatusTypeSupport)
}
const (
	GPSStatus_STATUS_NO_FIX int16 = -1// Unable to fix position. Measurement status
	GPSStatus_STATUS_FIX int16 = 0// Normal fix
	GPSStatus_STATUS_SBAS_FIX int16 = 1// Fixed using a satellite-based augmentation system
	GPSStatus_STATUS_GBAS_FIX int16 = 2// or a ground-based augmentation system
	GPSStatus_STATUS_DGPS_FIX int16 = 18// Fixed with DGPS
	GPSStatus_STATUS_WAAS_FIX int16 = 33// Fixed with WAAS
	GPSStatus_SOURCE_NONE uint16 = 0// No information is available
	GPSStatus_SOURCE_GPS uint16 = 1// Using standard GPS location [only valid for position_source]
	GPSStatus_SOURCE_POINTS uint16 = 2// Motion/orientation fix is derived from successive points
	GPSStatus_SOURCE_DOPPLER uint16 = 4// Motion is derived using the Doppler effect
	GPSStatus_SOURCE_ALTIMETER uint16 = 8// Using an altimeter
	GPSStatus_SOURCE_MAGNETIC uint16 = 16// Using magnetic sensors
	GPSStatus_SOURCE_GYRO uint16 = 32// Using gyroscopes
	GPSStatus_SOURCE_ACCEL uint16 = 64// Using accelerometers
)

type GPSStatus struct {
	Header std_msgs_msg.Header `yaml:"header" json:"header" mapstructure:"header"`
	SatellitesUsed uint16 `yaml:"satellites_used" json:"satellites_used" mapstructure:"satellites_used"`// Number of satellites. Satellites used in solution
	SatelliteUsedPrn []int32 `yaml:"satellite_used_prn" json:"satellite_used_prn" mapstructure:"satellite_used_prn"`// PRN identifiers
	SatellitesVisible uint16 `yaml:"satellites_visible" json:"satellites_visible" mapstructure:"satellites_visible"`// Satellites visible
	SatelliteVisiblePrn []int32 `yaml:"satellite_visible_prn" json:"satellite_visible_prn" mapstructure:"satellite_visible_prn"`// PRN identifiers
	SatelliteVisibleZ []int32 `yaml:"satellite_visible_z" json:"satellite_visible_z" mapstructure:"satellite_visible_z"`// Elevation of satellites
	SatelliteVisibleAzimuth []int32 `yaml:"satellite_visible_azimuth" json:"satellite_visible_azimuth" mapstructure:"satellite_visible_azimuth"`// Azimuth of satellites
	SatelliteVisibleSnr []int32 `yaml:"satellite_visible_snr" json:"satellite_visible_snr" mapstructure:"satellite_visible_snr"`// Signal-to-noise ratios (dB)
	Status int16 `yaml:"status" json:"status" mapstructure:"status"`
	MotionSource uint16 `yaml:"motion_source" json:"motion_source" mapstructure:"motion_source"`// Source for speed, climb and track
	OrientationSource uint16 `yaml:"orientation_source" json:"orientation_source" mapstructure:"orientation_source"`// Source for device orientation
	PositionSource uint16 `yaml:"position_source" json:"position_source" mapstructure:"position_source"`// Source for position
}

// NewGPSStatus creates a new GPSStatus with default values.
func NewGPSStatus() *GPSStatus {
	self := GPSStatus{}
	self.SetDefaults()
	return &self
}

func (t *GPSStatus) Clone() *GPSStatus {
	c := &GPSStatus{}
	c.Header = *t.Header.Clone()
	c.SatellitesUsed = t.SatellitesUsed
	if t.SatelliteUsedPrn != nil {
		c.SatelliteUsedPrn = make([]int32, len(t.SatelliteUsedPrn))
		copy(c.SatelliteUsedPrn, t.SatelliteUsedPrn)
	}
	c.SatellitesVisible = t.SatellitesVisible
	if t.SatelliteVisiblePrn != nil {
		c.SatelliteVisiblePrn = make([]int32, len(t.SatelliteVisiblePrn))
		copy(c.SatelliteVisiblePrn, t.SatelliteVisiblePrn)
	}
	if t.SatelliteVisibleZ != nil {
		c.SatelliteVisibleZ = make([]int32, len(t.SatelliteVisibleZ))
		copy(c.SatelliteVisibleZ, t.SatelliteVisibleZ)
	}
	if t.SatelliteVisibleAzimuth != nil {
		c.SatelliteVisibleAzimuth = make([]int32, len(t.SatelliteVisibleAzimuth))
		copy(c.SatelliteVisibleAzimuth, t.SatelliteVisibleAzimuth)
	}
	if t.SatelliteVisibleSnr != nil {
		c.SatelliteVisibleSnr = make([]int32, len(t.SatelliteVisibleSnr))
		copy(c.SatelliteVisibleSnr, t.SatelliteVisibleSnr)
	}
	c.Status = t.Status
	c.MotionSource = t.MotionSource
	c.OrientationSource = t.OrientationSource
	c.PositionSource = t.PositionSource
	return c
}

func (t *GPSStatus) CloneMsg() types.Message {
	return t.Clone()
}

func (t *GPSStatus) SetDefaults() {
	t.Header.SetDefaults()
	t.SatellitesUsed = 0
	t.SatelliteUsedPrn = nil
	t.SatellitesVisible = 0
	t.SatelliteVisiblePrn = nil
	t.SatelliteVisibleZ = nil
	t.SatelliteVisibleAzimuth = nil
	t.SatelliteVisibleSnr = nil
	t.Status = 0
	t.MotionSource = 0
	t.OrientationSource = 0
	t.PositionSource = 0
}

func (t *GPSStatus) GetTypeSupport() types.MessageTypeSupport {
	return GPSStatusTypeSupport
}

// GPSStatusPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type GPSStatusPublisher struct {
	*rclgo.Publisher
}

// NewGPSStatusPublisher creates and returns a new publisher for the
// GPSStatus
func NewGPSStatusPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*GPSStatusPublisher, error) {
	pub, err := node.NewPublisher(topic_name, GPSStatusTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &GPSStatusPublisher{pub}, nil
}

func (p *GPSStatusPublisher) Publish(msg *GPSStatus) error {
	return p.Publisher.Publish(msg)
}

// GPSStatusSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type GPSStatusSubscription struct {
	*rclgo.Subscription
}

// GPSStatusSubscriptionCallback type is used to provide a subscription
// handler function for a GPSStatusSubscription.
type GPSStatusSubscriptionCallback func(msg *GPSStatus, info *rclgo.MessageInfo, err error)

// NewGPSStatusSubscription creates and returns a new subscription for the
// GPSStatus
func NewGPSStatusSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback GPSStatusSubscriptionCallback) (*GPSStatusSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg GPSStatus
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, GPSStatusTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &GPSStatusSubscription{sub}, nil
}

func (s *GPSStatusSubscription) TakeMessage(out *GPSStatus) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneGPSStatusSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneGPSStatusSlice(dst, src []GPSStatus) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var GPSStatusTypeSupport types.MessageTypeSupport = _GPSStatusTypeSupport{}

type _GPSStatusTypeSupport struct{}

func (t _GPSStatusTypeSupport) New() types.Message {
	return NewGPSStatus()
}

func (t _GPSStatusTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.gps_msgs__msg__GPSStatus
	return (unsafe.Pointer)(C.gps_msgs__msg__GPSStatus__create())
}

func (t _GPSStatusTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.gps_msgs__msg__GPSStatus__destroy((*C.gps_msgs__msg__GPSStatus)(pointer_to_free))
}

func (t _GPSStatusTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*GPSStatus)
	mem := (*C.gps_msgs__msg__GPSStatus)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	mem.satellites_used = C.uint16_t(m.SatellitesUsed)
	primitives.Int32__Sequence_to_C((*primitives.CInt32__Sequence)(unsafe.Pointer(&mem.satellite_used_prn)), m.SatelliteUsedPrn)
	mem.satellites_visible = C.uint16_t(m.SatellitesVisible)
	primitives.Int32__Sequence_to_C((*primitives.CInt32__Sequence)(unsafe.Pointer(&mem.satellite_visible_prn)), m.SatelliteVisiblePrn)
	primitives.Int32__Sequence_to_C((*primitives.CInt32__Sequence)(unsafe.Pointer(&mem.satellite_visible_z)), m.SatelliteVisibleZ)
	primitives.Int32__Sequence_to_C((*primitives.CInt32__Sequence)(unsafe.Pointer(&mem.satellite_visible_azimuth)), m.SatelliteVisibleAzimuth)
	primitives.Int32__Sequence_to_C((*primitives.CInt32__Sequence)(unsafe.Pointer(&mem.satellite_visible_snr)), m.SatelliteVisibleSnr)
	mem.status = C.int16_t(m.Status)
	mem.motion_source = C.uint16_t(m.MotionSource)
	mem.orientation_source = C.uint16_t(m.OrientationSource)
	mem.position_source = C.uint16_t(m.PositionSource)
}

func (t _GPSStatusTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*GPSStatus)
	mem := (*C.gps_msgs__msg__GPSStatus)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	m.SatellitesUsed = uint16(mem.satellites_used)
	primitives.Int32__Sequence_to_Go(&m.SatelliteUsedPrn, *(*primitives.CInt32__Sequence)(unsafe.Pointer(&mem.satellite_used_prn)))
	m.SatellitesVisible = uint16(mem.satellites_visible)
	primitives.Int32__Sequence_to_Go(&m.SatelliteVisiblePrn, *(*primitives.CInt32__Sequence)(unsafe.Pointer(&mem.satellite_visible_prn)))
	primitives.Int32__Sequence_to_Go(&m.SatelliteVisibleZ, *(*primitives.CInt32__Sequence)(unsafe.Pointer(&mem.satellite_visible_z)))
	primitives.Int32__Sequence_to_Go(&m.SatelliteVisibleAzimuth, *(*primitives.CInt32__Sequence)(unsafe.Pointer(&mem.satellite_visible_azimuth)))
	primitives.Int32__Sequence_to_Go(&m.SatelliteVisibleSnr, *(*primitives.CInt32__Sequence)(unsafe.Pointer(&mem.satellite_visible_snr)))
	m.Status = int16(mem.status)
	m.MotionSource = uint16(mem.motion_source)
	m.OrientationSource = uint16(mem.orientation_source)
	m.PositionSource = uint16(mem.position_source)
}

func (t _GPSStatusTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__gps_msgs__msg__GPSStatus())
}

type CGPSStatus = C.gps_msgs__msg__GPSStatus
type CGPSStatus__Sequence = C.gps_msgs__msg__GPSStatus__Sequence

func GPSStatus__Sequence_to_Go(goSlice *[]GPSStatus, cSlice CGPSStatus__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]GPSStatus, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		GPSStatusTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func GPSStatus__Sequence_to_C(cSlice *CGPSStatus__Sequence, goSlice []GPSStatus) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.gps_msgs__msg__GPSStatus)(C.malloc(C.sizeof_struct_gps_msgs__msg__GPSStatus * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		GPSStatusTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func GPSStatus__Array_to_Go(goSlice []GPSStatus, cSlice []CGPSStatus) {
	for i := 0; i < len(cSlice); i++ {
		GPSStatusTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func GPSStatus__Array_to_C(cSlice []CGPSStatus, goSlice []GPSStatus) {
	for i := 0; i < len(goSlice); i++ {
		GPSStatusTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
