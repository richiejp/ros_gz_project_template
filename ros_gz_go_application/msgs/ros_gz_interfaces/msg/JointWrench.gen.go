// Code generated by rclgo-gen. DO NOT EDIT.

package ros_gz_interfaces_msg
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	geometry_msgs_msg "github.com/iema-group/goros2/msgs/geometry_msgs/msg"
	std_msgs_msg "github.com/iema-group/goros2/msgs/std_msgs/msg"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <ros_gz_interfaces/msg/joint_wrench.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("ros_gz_interfaces/JointWrench", JointWrenchTypeSupport)
	typemap.RegisterMessage("ros_gz_interfaces/msg/JointWrench", JointWrenchTypeSupport)
}

type JointWrench struct {
	Header std_msgs_msg.Header `yaml:"header" json:"header" mapstructure:"header"`// Time stamp
	Body1Name std_msgs_msg.String `yaml:"body_1_name" json:"body_1_name" mapstructure:"body_1_name"`// Body 1 name string
	Body1Id std_msgs_msg.UInt32 `yaml:"body_1_id" json:"body_1_id" mapstructure:"body_1_id"`// Body 1 id
	Body2Name std_msgs_msg.String `yaml:"body_2_name" json:"body_2_name" mapstructure:"body_2_name"`// Body 2 name string
	Body2Id std_msgs_msg.UInt32 `yaml:"body_2_id" json:"body_2_id" mapstructure:"body_2_id"`// Body 2 id
	Body1Wrench geometry_msgs_msg.Wrench `yaml:"body_1_wrench" json:"body_1_wrench" mapstructure:"body_1_wrench"`// Body 1 wrench
	Body2Wrench geometry_msgs_msg.Wrench `yaml:"body_2_wrench" json:"body_2_wrench" mapstructure:"body_2_wrench"`// Body 2 wrench
}

// NewJointWrench creates a new JointWrench with default values.
func NewJointWrench() *JointWrench {
	self := JointWrench{}
	self.SetDefaults()
	return &self
}

func (t *JointWrench) Clone() *JointWrench {
	c := &JointWrench{}
	c.Header = *t.Header.Clone()
	c.Body1Name = *t.Body1Name.Clone()
	c.Body1Id = *t.Body1Id.Clone()
	c.Body2Name = *t.Body2Name.Clone()
	c.Body2Id = *t.Body2Id.Clone()
	c.Body1Wrench = *t.Body1Wrench.Clone()
	c.Body2Wrench = *t.Body2Wrench.Clone()
	return c
}

func (t *JointWrench) CloneMsg() types.Message {
	return t.Clone()
}

func (t *JointWrench) SetDefaults() {
	t.Header.SetDefaults()
	t.Body1Name.SetDefaults()
	t.Body1Id.SetDefaults()
	t.Body2Name.SetDefaults()
	t.Body2Id.SetDefaults()
	t.Body1Wrench.SetDefaults()
	t.Body2Wrench.SetDefaults()
}

func (t *JointWrench) GetTypeSupport() types.MessageTypeSupport {
	return JointWrenchTypeSupport
}

// JointWrenchPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type JointWrenchPublisher struct {
	*rclgo.Publisher
}

// NewJointWrenchPublisher creates and returns a new publisher for the
// JointWrench
func NewJointWrenchPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*JointWrenchPublisher, error) {
	pub, err := node.NewPublisher(topic_name, JointWrenchTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &JointWrenchPublisher{pub}, nil
}

func (p *JointWrenchPublisher) Publish(msg *JointWrench) error {
	return p.Publisher.Publish(msg)
}

// JointWrenchSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type JointWrenchSubscription struct {
	*rclgo.Subscription
}

// JointWrenchSubscriptionCallback type is used to provide a subscription
// handler function for a JointWrenchSubscription.
type JointWrenchSubscriptionCallback func(msg *JointWrench, info *rclgo.MessageInfo, err error)

// NewJointWrenchSubscription creates and returns a new subscription for the
// JointWrench
func NewJointWrenchSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback JointWrenchSubscriptionCallback) (*JointWrenchSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg JointWrench
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, JointWrenchTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &JointWrenchSubscription{sub}, nil
}

func (s *JointWrenchSubscription) TakeMessage(out *JointWrench) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneJointWrenchSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneJointWrenchSlice(dst, src []JointWrench) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var JointWrenchTypeSupport types.MessageTypeSupport = _JointWrenchTypeSupport{}

type _JointWrenchTypeSupport struct{}

func (t _JointWrenchTypeSupport) New() types.Message {
	return NewJointWrench()
}

func (t _JointWrenchTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.ros_gz_interfaces__msg__JointWrench
	return (unsafe.Pointer)(C.ros_gz_interfaces__msg__JointWrench__create())
}

func (t _JointWrenchTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.ros_gz_interfaces__msg__JointWrench__destroy((*C.ros_gz_interfaces__msg__JointWrench)(pointer_to_free))
}

func (t _JointWrenchTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*JointWrench)
	mem := (*C.ros_gz_interfaces__msg__JointWrench)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	std_msgs_msg.StringTypeSupport.AsCStruct(unsafe.Pointer(&mem.body_1_name), &m.Body1Name)
	std_msgs_msg.UInt32TypeSupport.AsCStruct(unsafe.Pointer(&mem.body_1_id), &m.Body1Id)
	std_msgs_msg.StringTypeSupport.AsCStruct(unsafe.Pointer(&mem.body_2_name), &m.Body2Name)
	std_msgs_msg.UInt32TypeSupport.AsCStruct(unsafe.Pointer(&mem.body_2_id), &m.Body2Id)
	geometry_msgs_msg.WrenchTypeSupport.AsCStruct(unsafe.Pointer(&mem.body_1_wrench), &m.Body1Wrench)
	geometry_msgs_msg.WrenchTypeSupport.AsCStruct(unsafe.Pointer(&mem.body_2_wrench), &m.Body2Wrench)
}

func (t _JointWrenchTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*JointWrench)
	mem := (*C.ros_gz_interfaces__msg__JointWrench)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	std_msgs_msg.StringTypeSupport.AsGoStruct(&m.Body1Name, unsafe.Pointer(&mem.body_1_name))
	std_msgs_msg.UInt32TypeSupport.AsGoStruct(&m.Body1Id, unsafe.Pointer(&mem.body_1_id))
	std_msgs_msg.StringTypeSupport.AsGoStruct(&m.Body2Name, unsafe.Pointer(&mem.body_2_name))
	std_msgs_msg.UInt32TypeSupport.AsGoStruct(&m.Body2Id, unsafe.Pointer(&mem.body_2_id))
	geometry_msgs_msg.WrenchTypeSupport.AsGoStruct(&m.Body1Wrench, unsafe.Pointer(&mem.body_1_wrench))
	geometry_msgs_msg.WrenchTypeSupport.AsGoStruct(&m.Body2Wrench, unsafe.Pointer(&mem.body_2_wrench))
}

func (t _JointWrenchTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__ros_gz_interfaces__msg__JointWrench())
}

type CJointWrench = C.ros_gz_interfaces__msg__JointWrench
type CJointWrench__Sequence = C.ros_gz_interfaces__msg__JointWrench__Sequence

func JointWrench__Sequence_to_Go(goSlice *[]JointWrench, cSlice CJointWrench__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]JointWrench, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		JointWrenchTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func JointWrench__Sequence_to_C(cSlice *CJointWrench__Sequence, goSlice []JointWrench) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.ros_gz_interfaces__msg__JointWrench)(C.malloc(C.sizeof_struct_ros_gz_interfaces__msg__JointWrench * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		JointWrenchTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func JointWrench__Array_to_Go(goSlice []JointWrench, cSlice []CJointWrench) {
	for i := 0; i < len(cSlice); i++ {
		JointWrenchTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func JointWrench__Array_to_C(cSlice []CJointWrench, goSlice []JointWrench) {
	for i := 0; i < len(goSlice); i++ {
		JointWrenchTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
