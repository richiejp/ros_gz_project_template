// Code generated by rclgo-gen. DO NOT EDIT.

package ros_gz_interfaces_msg
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	std_msgs_msg "github.com/iema-group/goros2/msgs/std_msgs/msg"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <ros_gz_interfaces/msg/contacts.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("ros_gz_interfaces/Contacts", ContactsTypeSupport)
	typemap.RegisterMessage("ros_gz_interfaces/msg/Contacts", ContactsTypeSupport)
}

type Contacts struct {
	Header std_msgs_msg.Header `yaml:"header" json:"header" mapstructure:"header"`// Time stamp
	Contacts []Contact `yaml:"contacts" json:"contacts" mapstructure:"contacts"`// List of contacts
}

// NewContacts creates a new Contacts with default values.
func NewContacts() *Contacts {
	self := Contacts{}
	self.SetDefaults()
	return &self
}

func (t *Contacts) Clone() *Contacts {
	c := &Contacts{}
	c.Header = *t.Header.Clone()
	if t.Contacts != nil {
		c.Contacts = make([]Contact, len(t.Contacts))
		CloneContactSlice(c.Contacts, t.Contacts)
	}
	return c
}

func (t *Contacts) CloneMsg() types.Message {
	return t.Clone()
}

func (t *Contacts) SetDefaults() {
	t.Header.SetDefaults()
	t.Contacts = nil
}

func (t *Contacts) GetTypeSupport() types.MessageTypeSupport {
	return ContactsTypeSupport
}

// ContactsPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type ContactsPublisher struct {
	*rclgo.Publisher
}

// NewContactsPublisher creates and returns a new publisher for the
// Contacts
func NewContactsPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*ContactsPublisher, error) {
	pub, err := node.NewPublisher(topic_name, ContactsTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ContactsPublisher{pub}, nil
}

func (p *ContactsPublisher) Publish(msg *Contacts) error {
	return p.Publisher.Publish(msg)
}

// ContactsSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type ContactsSubscription struct {
	*rclgo.Subscription
}

// ContactsSubscriptionCallback type is used to provide a subscription
// handler function for a ContactsSubscription.
type ContactsSubscriptionCallback func(msg *Contacts, info *rclgo.MessageInfo, err error)

// NewContactsSubscription creates and returns a new subscription for the
// Contacts
func NewContactsSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback ContactsSubscriptionCallback) (*ContactsSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg Contacts
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, ContactsTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &ContactsSubscription{sub}, nil
}

func (s *ContactsSubscription) TakeMessage(out *Contacts) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneContactsSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneContactsSlice(dst, src []Contacts) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ContactsTypeSupport types.MessageTypeSupport = _ContactsTypeSupport{}

type _ContactsTypeSupport struct{}

func (t _ContactsTypeSupport) New() types.Message {
	return NewContacts()
}

func (t _ContactsTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.ros_gz_interfaces__msg__Contacts
	return (unsafe.Pointer)(C.ros_gz_interfaces__msg__Contacts__create())
}

func (t _ContactsTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.ros_gz_interfaces__msg__Contacts__destroy((*C.ros_gz_interfaces__msg__Contacts)(pointer_to_free))
}

func (t _ContactsTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*Contacts)
	mem := (*C.ros_gz_interfaces__msg__Contacts)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	Contact__Sequence_to_C(&mem.contacts, m.Contacts)
}

func (t _ContactsTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*Contacts)
	mem := (*C.ros_gz_interfaces__msg__Contacts)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	Contact__Sequence_to_Go(&m.Contacts, mem.contacts)
}

func (t _ContactsTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__ros_gz_interfaces__msg__Contacts())
}

type CContacts = C.ros_gz_interfaces__msg__Contacts
type CContacts__Sequence = C.ros_gz_interfaces__msg__Contacts__Sequence

func Contacts__Sequence_to_Go(goSlice *[]Contacts, cSlice CContacts__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Contacts, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		ContactsTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func Contacts__Sequence_to_C(cSlice *CContacts__Sequence, goSlice []Contacts) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.ros_gz_interfaces__msg__Contacts)(C.malloc(C.sizeof_struct_ros_gz_interfaces__msg__Contacts * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		ContactsTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func Contacts__Array_to_Go(goSlice []Contacts, cSlice []CContacts) {
	for i := 0; i < len(cSlice); i++ {
		ContactsTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func Contacts__Array_to_C(cSlice []CContacts, goSlice []Contacts) {
	for i := 0; i < len(goSlice); i++ {
		ContactsTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
