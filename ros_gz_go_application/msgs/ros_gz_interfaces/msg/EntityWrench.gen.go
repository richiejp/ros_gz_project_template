// Code generated by rclgo-gen. DO NOT EDIT.

package ros_gz_interfaces_msg
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	geometry_msgs_msg "github.com/iema-group/goros2/msgs/geometry_msgs/msg"
	std_msgs_msg "github.com/iema-group/goros2/msgs/std_msgs/msg"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <ros_gz_interfaces/msg/entity_wrench.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("ros_gz_interfaces/EntityWrench", EntityWrenchTypeSupport)
	typemap.RegisterMessage("ros_gz_interfaces/msg/EntityWrench", EntityWrenchTypeSupport)
}

type EntityWrench struct {
	Header std_msgs_msg.Header `yaml:"header" json:"header" mapstructure:"header"`// Time stamp
	Entity Entity `yaml:"entity" json:"entity" mapstructure:"entity"`// Entity
	Wrench geometry_msgs_msg.Wrench `yaml:"wrench" json:"wrench" mapstructure:"wrench"`// Wrench to be applied to entity
}

// NewEntityWrench creates a new EntityWrench with default values.
func NewEntityWrench() *EntityWrench {
	self := EntityWrench{}
	self.SetDefaults()
	return &self
}

func (t *EntityWrench) Clone() *EntityWrench {
	c := &EntityWrench{}
	c.Header = *t.Header.Clone()
	c.Entity = *t.Entity.Clone()
	c.Wrench = *t.Wrench.Clone()
	return c
}

func (t *EntityWrench) CloneMsg() types.Message {
	return t.Clone()
}

func (t *EntityWrench) SetDefaults() {
	t.Header.SetDefaults()
	t.Entity.SetDefaults()
	t.Wrench.SetDefaults()
}

func (t *EntityWrench) GetTypeSupport() types.MessageTypeSupport {
	return EntityWrenchTypeSupport
}

// EntityWrenchPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type EntityWrenchPublisher struct {
	*rclgo.Publisher
}

// NewEntityWrenchPublisher creates and returns a new publisher for the
// EntityWrench
func NewEntityWrenchPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*EntityWrenchPublisher, error) {
	pub, err := node.NewPublisher(topic_name, EntityWrenchTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &EntityWrenchPublisher{pub}, nil
}

func (p *EntityWrenchPublisher) Publish(msg *EntityWrench) error {
	return p.Publisher.Publish(msg)
}

// EntityWrenchSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type EntityWrenchSubscription struct {
	*rclgo.Subscription
}

// EntityWrenchSubscriptionCallback type is used to provide a subscription
// handler function for a EntityWrenchSubscription.
type EntityWrenchSubscriptionCallback func(msg *EntityWrench, info *rclgo.MessageInfo, err error)

// NewEntityWrenchSubscription creates and returns a new subscription for the
// EntityWrench
func NewEntityWrenchSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback EntityWrenchSubscriptionCallback) (*EntityWrenchSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg EntityWrench
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, EntityWrenchTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &EntityWrenchSubscription{sub}, nil
}

func (s *EntityWrenchSubscription) TakeMessage(out *EntityWrench) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneEntityWrenchSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneEntityWrenchSlice(dst, src []EntityWrench) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var EntityWrenchTypeSupport types.MessageTypeSupport = _EntityWrenchTypeSupport{}

type _EntityWrenchTypeSupport struct{}

func (t _EntityWrenchTypeSupport) New() types.Message {
	return NewEntityWrench()
}

func (t _EntityWrenchTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.ros_gz_interfaces__msg__EntityWrench
	return (unsafe.Pointer)(C.ros_gz_interfaces__msg__EntityWrench__create())
}

func (t _EntityWrenchTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.ros_gz_interfaces__msg__EntityWrench__destroy((*C.ros_gz_interfaces__msg__EntityWrench)(pointer_to_free))
}

func (t _EntityWrenchTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*EntityWrench)
	mem := (*C.ros_gz_interfaces__msg__EntityWrench)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	EntityTypeSupport.AsCStruct(unsafe.Pointer(&mem.entity), &m.Entity)
	geometry_msgs_msg.WrenchTypeSupport.AsCStruct(unsafe.Pointer(&mem.wrench), &m.Wrench)
}

func (t _EntityWrenchTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*EntityWrench)
	mem := (*C.ros_gz_interfaces__msg__EntityWrench)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	EntityTypeSupport.AsGoStruct(&m.Entity, unsafe.Pointer(&mem.entity))
	geometry_msgs_msg.WrenchTypeSupport.AsGoStruct(&m.Wrench, unsafe.Pointer(&mem.wrench))
}

func (t _EntityWrenchTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__ros_gz_interfaces__msg__EntityWrench())
}

type CEntityWrench = C.ros_gz_interfaces__msg__EntityWrench
type CEntityWrench__Sequence = C.ros_gz_interfaces__msg__EntityWrench__Sequence

func EntityWrench__Sequence_to_Go(goSlice *[]EntityWrench, cSlice CEntityWrench__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]EntityWrench, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		EntityWrenchTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func EntityWrench__Sequence_to_C(cSlice *CEntityWrench__Sequence, goSlice []EntityWrench) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.ros_gz_interfaces__msg__EntityWrench)(C.malloc(C.sizeof_struct_ros_gz_interfaces__msg__EntityWrench * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		EntityWrenchTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func EntityWrench__Array_to_Go(goSlice []EntityWrench, cSlice []CEntityWrench) {
	for i := 0; i < len(cSlice); i++ {
		EntityWrenchTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func EntityWrench__Array_to_C(cSlice []CEntityWrench, goSlice []EntityWrench) {
	for i := 0; i < len(goSlice); i++ {
		EntityWrenchTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
