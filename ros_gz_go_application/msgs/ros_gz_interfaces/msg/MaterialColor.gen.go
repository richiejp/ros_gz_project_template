// Code generated by rclgo-gen. DO NOT EDIT.

package ros_gz_interfaces_msg
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	std_msgs_msg "github.com/iema-group/goros2/msgs/std_msgs/msg"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <ros_gz_interfaces/msg/material_color.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("ros_gz_interfaces/MaterialColor", MaterialColorTypeSupport)
	typemap.RegisterMessage("ros_gz_interfaces/msg/MaterialColor", MaterialColorTypeSupport)
}
const (
	MaterialColor_FIRST uint8 = 0// Entities that match to apply material color: constant definition
	MaterialColor_ALL uint8 = 1
)

type MaterialColor struct {
	Header std_msgs_msg.Header `yaml:"header" json:"header" mapstructure:"header"`// Optional header data
	Entity Entity `yaml:"entity" json:"entity" mapstructure:"entity"`// Entity to change material color
	Ambient std_msgs_msg.ColorRGBA `yaml:"ambient" json:"ambient" mapstructure:"ambient"`// Ambient color
	Diffuse std_msgs_msg.ColorRGBA `yaml:"diffuse" json:"diffuse" mapstructure:"diffuse"`// Diffuse color
	Specular std_msgs_msg.ColorRGBA `yaml:"specular" json:"specular" mapstructure:"specular"`// Specular color
	Emissive std_msgs_msg.ColorRGBA `yaml:"emissive" json:"emissive" mapstructure:"emissive"`// Emissive color
	Shininess float64 `yaml:"shininess" json:"shininess" mapstructure:"shininess"`// Specular exponent
	EntityMatch uint8 `yaml:"entity_match" json:"entity_match" mapstructure:"entity_match"`// Entities that match to apply material color
}

// NewMaterialColor creates a new MaterialColor with default values.
func NewMaterialColor() *MaterialColor {
	self := MaterialColor{}
	self.SetDefaults()
	return &self
}

func (t *MaterialColor) Clone() *MaterialColor {
	c := &MaterialColor{}
	c.Header = *t.Header.Clone()
	c.Entity = *t.Entity.Clone()
	c.Ambient = *t.Ambient.Clone()
	c.Diffuse = *t.Diffuse.Clone()
	c.Specular = *t.Specular.Clone()
	c.Emissive = *t.Emissive.Clone()
	c.Shininess = t.Shininess
	c.EntityMatch = t.EntityMatch
	return c
}

func (t *MaterialColor) CloneMsg() types.Message {
	return t.Clone()
}

func (t *MaterialColor) SetDefaults() {
	t.Header.SetDefaults()
	t.Entity.SetDefaults()
	t.Ambient.SetDefaults()
	t.Diffuse.SetDefaults()
	t.Specular.SetDefaults()
	t.Emissive.SetDefaults()
	t.Shininess = 0
	t.EntityMatch = 0
}

func (t *MaterialColor) GetTypeSupport() types.MessageTypeSupport {
	return MaterialColorTypeSupport
}

// MaterialColorPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type MaterialColorPublisher struct {
	*rclgo.Publisher
}

// NewMaterialColorPublisher creates and returns a new publisher for the
// MaterialColor
func NewMaterialColorPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*MaterialColorPublisher, error) {
	pub, err := node.NewPublisher(topic_name, MaterialColorTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &MaterialColorPublisher{pub}, nil
}

func (p *MaterialColorPublisher) Publish(msg *MaterialColor) error {
	return p.Publisher.Publish(msg)
}

// MaterialColorSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type MaterialColorSubscription struct {
	*rclgo.Subscription
}

// MaterialColorSubscriptionCallback type is used to provide a subscription
// handler function for a MaterialColorSubscription.
type MaterialColorSubscriptionCallback func(msg *MaterialColor, info *rclgo.MessageInfo, err error)

// NewMaterialColorSubscription creates and returns a new subscription for the
// MaterialColor
func NewMaterialColorSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback MaterialColorSubscriptionCallback) (*MaterialColorSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg MaterialColor
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, MaterialColorTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &MaterialColorSubscription{sub}, nil
}

func (s *MaterialColorSubscription) TakeMessage(out *MaterialColor) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneMaterialColorSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneMaterialColorSlice(dst, src []MaterialColor) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var MaterialColorTypeSupport types.MessageTypeSupport = _MaterialColorTypeSupport{}

type _MaterialColorTypeSupport struct{}

func (t _MaterialColorTypeSupport) New() types.Message {
	return NewMaterialColor()
}

func (t _MaterialColorTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.ros_gz_interfaces__msg__MaterialColor
	return (unsafe.Pointer)(C.ros_gz_interfaces__msg__MaterialColor__create())
}

func (t _MaterialColorTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.ros_gz_interfaces__msg__MaterialColor__destroy((*C.ros_gz_interfaces__msg__MaterialColor)(pointer_to_free))
}

func (t _MaterialColorTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*MaterialColor)
	mem := (*C.ros_gz_interfaces__msg__MaterialColor)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	EntityTypeSupport.AsCStruct(unsafe.Pointer(&mem.entity), &m.Entity)
	std_msgs_msg.ColorRGBATypeSupport.AsCStruct(unsafe.Pointer(&mem.ambient), &m.Ambient)
	std_msgs_msg.ColorRGBATypeSupport.AsCStruct(unsafe.Pointer(&mem.diffuse), &m.Diffuse)
	std_msgs_msg.ColorRGBATypeSupport.AsCStruct(unsafe.Pointer(&mem.specular), &m.Specular)
	std_msgs_msg.ColorRGBATypeSupport.AsCStruct(unsafe.Pointer(&mem.emissive), &m.Emissive)
	mem.shininess = C.double(m.Shininess)
	mem.entity_match = C.uint8_t(m.EntityMatch)
}

func (t _MaterialColorTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*MaterialColor)
	mem := (*C.ros_gz_interfaces__msg__MaterialColor)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	EntityTypeSupport.AsGoStruct(&m.Entity, unsafe.Pointer(&mem.entity))
	std_msgs_msg.ColorRGBATypeSupport.AsGoStruct(&m.Ambient, unsafe.Pointer(&mem.ambient))
	std_msgs_msg.ColorRGBATypeSupport.AsGoStruct(&m.Diffuse, unsafe.Pointer(&mem.diffuse))
	std_msgs_msg.ColorRGBATypeSupport.AsGoStruct(&m.Specular, unsafe.Pointer(&mem.specular))
	std_msgs_msg.ColorRGBATypeSupport.AsGoStruct(&m.Emissive, unsafe.Pointer(&mem.emissive))
	m.Shininess = float64(mem.shininess)
	m.EntityMatch = uint8(mem.entity_match)
}

func (t _MaterialColorTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__ros_gz_interfaces__msg__MaterialColor())
}

type CMaterialColor = C.ros_gz_interfaces__msg__MaterialColor
type CMaterialColor__Sequence = C.ros_gz_interfaces__msg__MaterialColor__Sequence

func MaterialColor__Sequence_to_Go(goSlice *[]MaterialColor, cSlice CMaterialColor__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]MaterialColor, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		MaterialColorTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func MaterialColor__Sequence_to_C(cSlice *CMaterialColor__Sequence, goSlice []MaterialColor) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.ros_gz_interfaces__msg__MaterialColor)(C.malloc(C.sizeof_struct_ros_gz_interfaces__msg__MaterialColor * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		MaterialColorTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func MaterialColor__Array_to_Go(goSlice []MaterialColor, cSlice []CMaterialColor) {
	for i := 0; i < len(cSlice); i++ {
		MaterialColorTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func MaterialColor__Array_to_C(cSlice []CMaterialColor, goSlice []MaterialColor) {
	for i := 0; i < len(goSlice); i++ {
		MaterialColorTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
