// Code generated by rclgo-gen. DO NOT EDIT.

package ros_gz_interfaces_msg
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	primitives "github.com/ATIinc/rclgo/pkg/rclgo/primitives"
	geometry_msgs_msg "github.com/iema-group/goros2/msgs/geometry_msgs/msg"
	std_msgs_msg "github.com/iema-group/goros2/msgs/std_msgs/msg"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <ros_gz_interfaces/msg/light.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("ros_gz_interfaces/Light", LightTypeSupport)
	typemap.RegisterMessage("ros_gz_interfaces/msg/Light", LightTypeSupport)
}
const (
	Light_POINT uint8 = 0// Light type: constant definition
	Light_SPOT uint8 = 1
	Light_DIRECTIONAL uint8 = 2
)

type Light struct {
	Header std_msgs_msg.Header `yaml:"header" json:"header" mapstructure:"header"`// Optional header data
	Name string `yaml:"name" json:"name" mapstructure:"name"`// Light name
	Type uint8 `yaml:"type" json:"type" mapstructure:"type"`// Light type (from constant definitions)
	Pose geometry_msgs_msg.Pose `yaml:"pose" json:"pose" mapstructure:"pose"`// Light pose
	Diffuse std_msgs_msg.ColorRGBA `yaml:"diffuse" json:"diffuse" mapstructure:"diffuse"`// Light diffuse emission
	Specular std_msgs_msg.ColorRGBA `yaml:"specular" json:"specular" mapstructure:"specular"`// Light specular emission
	AttenuationConstant float32 `yaml:"attenuation_constant" json:"attenuation_constant" mapstructure:"attenuation_constant"`// Constant variable in attenuation formula
	AttenuationLinear float32 `yaml:"attenuation_linear" json:"attenuation_linear" mapstructure:"attenuation_linear"`// Linear variable in attenuation formula
	AttenuationQuadratic float32 `yaml:"attenuation_quadratic" json:"attenuation_quadratic" mapstructure:"attenuation_quadratic"`// Quadratic variable in attenuation formula
	Direction geometry_msgs_msg.Vector3 `yaml:"direction" json:"direction" mapstructure:"direction"`// Light direction
	Range float32 `yaml:"range" json:"range" mapstructure:"range"`// Light range
	CastShadows bool `yaml:"cast_shadows" json:"cast_shadows" mapstructure:"cast_shadows"`// Enable/disable shadow casting
	SpotInnerAngle float32 `yaml:"spot_inner_angle" json:"spot_inner_angle" mapstructure:"spot_inner_angle"`// Spotlight inner cone angle
	SpotOuterAngle float32 `yaml:"spot_outer_angle" json:"spot_outer_angle" mapstructure:"spot_outer_angle"`// Spotlight outer cone angle
	SpotFalloff float32 `yaml:"spot_falloff" json:"spot_falloff" mapstructure:"spot_falloff"`// Falloff between inner and outer cone
	Id uint32 `yaml:"id" json:"id" mapstructure:"id"`// Unique id of the light
	ParentId uint32 `yaml:"parent_id" json:"parent_id" mapstructure:"parent_id"`// Unique id of the light's parent
	Intensity float32 `yaml:"intensity" json:"intensity" mapstructure:"intensity"`// Light intensity
}

// NewLight creates a new Light with default values.
func NewLight() *Light {
	self := Light{}
	self.SetDefaults()
	return &self
}

func (t *Light) Clone() *Light {
	c := &Light{}
	c.Header = *t.Header.Clone()
	c.Name = t.Name
	c.Type = t.Type
	c.Pose = *t.Pose.Clone()
	c.Diffuse = *t.Diffuse.Clone()
	c.Specular = *t.Specular.Clone()
	c.AttenuationConstant = t.AttenuationConstant
	c.AttenuationLinear = t.AttenuationLinear
	c.AttenuationQuadratic = t.AttenuationQuadratic
	c.Direction = *t.Direction.Clone()
	c.Range = t.Range
	c.CastShadows = t.CastShadows
	c.SpotInnerAngle = t.SpotInnerAngle
	c.SpotOuterAngle = t.SpotOuterAngle
	c.SpotFalloff = t.SpotFalloff
	c.Id = t.Id
	c.ParentId = t.ParentId
	c.Intensity = t.Intensity
	return c
}

func (t *Light) CloneMsg() types.Message {
	return t.Clone()
}

func (t *Light) SetDefaults() {
	t.Header.SetDefaults()
	t.Name = ""
	t.Type = 0
	t.Pose.SetDefaults()
	t.Diffuse.SetDefaults()
	t.Specular.SetDefaults()
	t.AttenuationConstant = 0
	t.AttenuationLinear = 0
	t.AttenuationQuadratic = 0
	t.Direction.SetDefaults()
	t.Range = 0
	t.CastShadows = false
	t.SpotInnerAngle = 0
	t.SpotOuterAngle = 0
	t.SpotFalloff = 0
	t.Id = 0
	t.ParentId = 0
	t.Intensity = 0
}

func (t *Light) GetTypeSupport() types.MessageTypeSupport {
	return LightTypeSupport
}

// LightPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type LightPublisher struct {
	*rclgo.Publisher
}

// NewLightPublisher creates and returns a new publisher for the
// Light
func NewLightPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*LightPublisher, error) {
	pub, err := node.NewPublisher(topic_name, LightTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &LightPublisher{pub}, nil
}

func (p *LightPublisher) Publish(msg *Light) error {
	return p.Publisher.Publish(msg)
}

// LightSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type LightSubscription struct {
	*rclgo.Subscription
}

// LightSubscriptionCallback type is used to provide a subscription
// handler function for a LightSubscription.
type LightSubscriptionCallback func(msg *Light, info *rclgo.MessageInfo, err error)

// NewLightSubscription creates and returns a new subscription for the
// Light
func NewLightSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback LightSubscriptionCallback) (*LightSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg Light
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, LightTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &LightSubscription{sub}, nil
}

func (s *LightSubscription) TakeMessage(out *Light) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneLightSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneLightSlice(dst, src []Light) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var LightTypeSupport types.MessageTypeSupport = _LightTypeSupport{}

type _LightTypeSupport struct{}

func (t _LightTypeSupport) New() types.Message {
	return NewLight()
}

func (t _LightTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.ros_gz_interfaces__msg__Light
	return (unsafe.Pointer)(C.ros_gz_interfaces__msg__Light__create())
}

func (t _LightTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.ros_gz_interfaces__msg__Light__destroy((*C.ros_gz_interfaces__msg__Light)(pointer_to_free))
}

func (t _LightTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*Light)
	mem := (*C.ros_gz_interfaces__msg__Light)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.name), m.Name)
	mem._type = C.uint8_t(m.Type)
	geometry_msgs_msg.PoseTypeSupport.AsCStruct(unsafe.Pointer(&mem.pose), &m.Pose)
	std_msgs_msg.ColorRGBATypeSupport.AsCStruct(unsafe.Pointer(&mem.diffuse), &m.Diffuse)
	std_msgs_msg.ColorRGBATypeSupport.AsCStruct(unsafe.Pointer(&mem.specular), &m.Specular)
	mem.attenuation_constant = C.float(m.AttenuationConstant)
	mem.attenuation_linear = C.float(m.AttenuationLinear)
	mem.attenuation_quadratic = C.float(m.AttenuationQuadratic)
	geometry_msgs_msg.Vector3TypeSupport.AsCStruct(unsafe.Pointer(&mem.direction), &m.Direction)
	mem._range = C.float(m.Range)
	mem.cast_shadows = C.bool(m.CastShadows)
	mem.spot_inner_angle = C.float(m.SpotInnerAngle)
	mem.spot_outer_angle = C.float(m.SpotOuterAngle)
	mem.spot_falloff = C.float(m.SpotFalloff)
	mem.id = C.uint32_t(m.Id)
	mem.parent_id = C.uint32_t(m.ParentId)
	mem.intensity = C.float(m.Intensity)
}

func (t _LightTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*Light)
	mem := (*C.ros_gz_interfaces__msg__Light)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	primitives.StringAsGoStruct(&m.Name, unsafe.Pointer(&mem.name))
	m.Type = uint8(mem._type)
	geometry_msgs_msg.PoseTypeSupport.AsGoStruct(&m.Pose, unsafe.Pointer(&mem.pose))
	std_msgs_msg.ColorRGBATypeSupport.AsGoStruct(&m.Diffuse, unsafe.Pointer(&mem.diffuse))
	std_msgs_msg.ColorRGBATypeSupport.AsGoStruct(&m.Specular, unsafe.Pointer(&mem.specular))
	m.AttenuationConstant = float32(mem.attenuation_constant)
	m.AttenuationLinear = float32(mem.attenuation_linear)
	m.AttenuationQuadratic = float32(mem.attenuation_quadratic)
	geometry_msgs_msg.Vector3TypeSupport.AsGoStruct(&m.Direction, unsafe.Pointer(&mem.direction))
	m.Range = float32(mem._range)
	m.CastShadows = bool(mem.cast_shadows)
	m.SpotInnerAngle = float32(mem.spot_inner_angle)
	m.SpotOuterAngle = float32(mem.spot_outer_angle)
	m.SpotFalloff = float32(mem.spot_falloff)
	m.Id = uint32(mem.id)
	m.ParentId = uint32(mem.parent_id)
	m.Intensity = float32(mem.intensity)
}

func (t _LightTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__ros_gz_interfaces__msg__Light())
}

type CLight = C.ros_gz_interfaces__msg__Light
type CLight__Sequence = C.ros_gz_interfaces__msg__Light__Sequence

func Light__Sequence_to_Go(goSlice *[]Light, cSlice CLight__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Light, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		LightTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func Light__Sequence_to_C(cSlice *CLight__Sequence, goSlice []Light) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.ros_gz_interfaces__msg__Light)(C.malloc(C.sizeof_struct_ros_gz_interfaces__msg__Light * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		LightTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func Light__Array_to_Go(goSlice []Light, cSlice []CLight) {
	for i := 0; i < len(cSlice); i++ {
		LightTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func Light__Array_to_C(cSlice []CLight, goSlice []Light) {
	for i := 0; i < len(goSlice); i++ {
		LightTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
