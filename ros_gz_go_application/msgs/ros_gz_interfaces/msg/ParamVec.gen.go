// Code generated by rclgo-gen. DO NOT EDIT.

package ros_gz_interfaces_msg
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	rcl_interfaces_msg "github.com/iema-group/goros2/msgs/rcl_interfaces/msg"
	std_msgs_msg "github.com/iema-group/goros2/msgs/std_msgs/msg"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <ros_gz_interfaces/msg/param_vec.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("ros_gz_interfaces/ParamVec", ParamVecTypeSupport)
	typemap.RegisterMessage("ros_gz_interfaces/msg/ParamVec", ParamVecTypeSupport)
}

type ParamVec struct {
	Header std_msgs_msg.Header `yaml:"header" json:"header" mapstructure:"header"`// Optional header data.
	Params []rcl_interfaces_msg.Parameter `yaml:"params" json:"params" mapstructure:"params"`// A set of name, value pairs
}

// NewParamVec creates a new ParamVec with default values.
func NewParamVec() *ParamVec {
	self := ParamVec{}
	self.SetDefaults()
	return &self
}

func (t *ParamVec) Clone() *ParamVec {
	c := &ParamVec{}
	c.Header = *t.Header.Clone()
	if t.Params != nil {
		c.Params = make([]rcl_interfaces_msg.Parameter, len(t.Params))
		rcl_interfaces_msg.CloneParameterSlice(c.Params, t.Params)
	}
	return c
}

func (t *ParamVec) CloneMsg() types.Message {
	return t.Clone()
}

func (t *ParamVec) SetDefaults() {
	t.Header.SetDefaults()
	t.Params = nil
}

func (t *ParamVec) GetTypeSupport() types.MessageTypeSupport {
	return ParamVecTypeSupport
}

// ParamVecPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type ParamVecPublisher struct {
	*rclgo.Publisher
}

// NewParamVecPublisher creates and returns a new publisher for the
// ParamVec
func NewParamVecPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*ParamVecPublisher, error) {
	pub, err := node.NewPublisher(topic_name, ParamVecTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ParamVecPublisher{pub}, nil
}

func (p *ParamVecPublisher) Publish(msg *ParamVec) error {
	return p.Publisher.Publish(msg)
}

// ParamVecSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type ParamVecSubscription struct {
	*rclgo.Subscription
}

// ParamVecSubscriptionCallback type is used to provide a subscription
// handler function for a ParamVecSubscription.
type ParamVecSubscriptionCallback func(msg *ParamVec, info *rclgo.MessageInfo, err error)

// NewParamVecSubscription creates and returns a new subscription for the
// ParamVec
func NewParamVecSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback ParamVecSubscriptionCallback) (*ParamVecSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg ParamVec
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, ParamVecTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &ParamVecSubscription{sub}, nil
}

func (s *ParamVecSubscription) TakeMessage(out *ParamVec) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneParamVecSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneParamVecSlice(dst, src []ParamVec) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ParamVecTypeSupport types.MessageTypeSupport = _ParamVecTypeSupport{}

type _ParamVecTypeSupport struct{}

func (t _ParamVecTypeSupport) New() types.Message {
	return NewParamVec()
}

func (t _ParamVecTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.ros_gz_interfaces__msg__ParamVec
	return (unsafe.Pointer)(C.ros_gz_interfaces__msg__ParamVec__create())
}

func (t _ParamVecTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.ros_gz_interfaces__msg__ParamVec__destroy((*C.ros_gz_interfaces__msg__ParamVec)(pointer_to_free))
}

func (t _ParamVecTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*ParamVec)
	mem := (*C.ros_gz_interfaces__msg__ParamVec)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	rcl_interfaces_msg.Parameter__Sequence_to_C((*rcl_interfaces_msg.CParameter__Sequence)(unsafe.Pointer(&mem.params)), m.Params)
}

func (t _ParamVecTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*ParamVec)
	mem := (*C.ros_gz_interfaces__msg__ParamVec)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	rcl_interfaces_msg.Parameter__Sequence_to_Go(&m.Params, *(*rcl_interfaces_msg.CParameter__Sequence)(unsafe.Pointer(&mem.params)))
}

func (t _ParamVecTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__ros_gz_interfaces__msg__ParamVec())
}

type CParamVec = C.ros_gz_interfaces__msg__ParamVec
type CParamVec__Sequence = C.ros_gz_interfaces__msg__ParamVec__Sequence

func ParamVec__Sequence_to_Go(goSlice *[]ParamVec, cSlice CParamVec__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]ParamVec, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		ParamVecTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func ParamVec__Sequence_to_C(cSlice *CParamVec__Sequence, goSlice []ParamVec) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.ros_gz_interfaces__msg__ParamVec)(C.malloc(C.sizeof_struct_ros_gz_interfaces__msg__ParamVec * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		ParamVecTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func ParamVec__Array_to_Go(goSlice []ParamVec, cSlice []CParamVec) {
	for i := 0; i < len(cSlice); i++ {
		ParamVecTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func ParamVec__Array_to_C(cSlice []CParamVec, goSlice []ParamVec) {
	for i := 0; i < len(goSlice); i++ {
		ParamVecTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
