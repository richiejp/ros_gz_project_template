// Code generated by rclgo-gen. DO NOT EDIT.

package ros_gz_interfaces_msg
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	primitives "github.com/ATIinc/rclgo/pkg/rclgo/primitives"
	geometry_msgs_msg "github.com/iema-group/goros2/msgs/geometry_msgs/msg"
	std_msgs_msg "github.com/iema-group/goros2/msgs/std_msgs/msg"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <ros_gz_interfaces/msg/gui_camera.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("ros_gz_interfaces/GuiCamera", GuiCameraTypeSupport)
	typemap.RegisterMessage("ros_gz_interfaces/msg/GuiCamera", GuiCameraTypeSupport)
}

type GuiCamera struct {
	Header std_msgs_msg.Header `yaml:"header" json:"header" mapstructure:"header"`// Optional header data.
	Name string `yaml:"name" json:"name" mapstructure:"name"`
	ViewController string `yaml:"view_controller" json:"view_controller" mapstructure:"view_controller"`
	Pose geometry_msgs_msg.Pose `yaml:"pose" json:"pose" mapstructure:"pose"`
	Track TrackVisual `yaml:"track" json:"track" mapstructure:"track"`
	ProjectionType string `yaml:"projection_type" json:"projection_type" mapstructure:"projection_type"`// Type of projection: "perspective" or "orthographic".
}

// NewGuiCamera creates a new GuiCamera with default values.
func NewGuiCamera() *GuiCamera {
	self := GuiCamera{}
	self.SetDefaults()
	return &self
}

func (t *GuiCamera) Clone() *GuiCamera {
	c := &GuiCamera{}
	c.Header = *t.Header.Clone()
	c.Name = t.Name
	c.ViewController = t.ViewController
	c.Pose = *t.Pose.Clone()
	c.Track = *t.Track.Clone()
	c.ProjectionType = t.ProjectionType
	return c
}

func (t *GuiCamera) CloneMsg() types.Message {
	return t.Clone()
}

func (t *GuiCamera) SetDefaults() {
	t.Header.SetDefaults()
	t.Name = ""
	t.ViewController = ""
	t.Pose.SetDefaults()
	t.Track.SetDefaults()
	t.ProjectionType = ""
}

func (t *GuiCamera) GetTypeSupport() types.MessageTypeSupport {
	return GuiCameraTypeSupport
}

// GuiCameraPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type GuiCameraPublisher struct {
	*rclgo.Publisher
}

// NewGuiCameraPublisher creates and returns a new publisher for the
// GuiCamera
func NewGuiCameraPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*GuiCameraPublisher, error) {
	pub, err := node.NewPublisher(topic_name, GuiCameraTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &GuiCameraPublisher{pub}, nil
}

func (p *GuiCameraPublisher) Publish(msg *GuiCamera) error {
	return p.Publisher.Publish(msg)
}

// GuiCameraSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type GuiCameraSubscription struct {
	*rclgo.Subscription
}

// GuiCameraSubscriptionCallback type is used to provide a subscription
// handler function for a GuiCameraSubscription.
type GuiCameraSubscriptionCallback func(msg *GuiCamera, info *rclgo.MessageInfo, err error)

// NewGuiCameraSubscription creates and returns a new subscription for the
// GuiCamera
func NewGuiCameraSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback GuiCameraSubscriptionCallback) (*GuiCameraSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg GuiCamera
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, GuiCameraTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &GuiCameraSubscription{sub}, nil
}

func (s *GuiCameraSubscription) TakeMessage(out *GuiCamera) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneGuiCameraSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneGuiCameraSlice(dst, src []GuiCamera) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var GuiCameraTypeSupport types.MessageTypeSupport = _GuiCameraTypeSupport{}

type _GuiCameraTypeSupport struct{}

func (t _GuiCameraTypeSupport) New() types.Message {
	return NewGuiCamera()
}

func (t _GuiCameraTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.ros_gz_interfaces__msg__GuiCamera
	return (unsafe.Pointer)(C.ros_gz_interfaces__msg__GuiCamera__create())
}

func (t _GuiCameraTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.ros_gz_interfaces__msg__GuiCamera__destroy((*C.ros_gz_interfaces__msg__GuiCamera)(pointer_to_free))
}

func (t _GuiCameraTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*GuiCamera)
	mem := (*C.ros_gz_interfaces__msg__GuiCamera)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.name), m.Name)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.view_controller), m.ViewController)
	geometry_msgs_msg.PoseTypeSupport.AsCStruct(unsafe.Pointer(&mem.pose), &m.Pose)
	TrackVisualTypeSupport.AsCStruct(unsafe.Pointer(&mem.track), &m.Track)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.projection_type), m.ProjectionType)
}

func (t _GuiCameraTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*GuiCamera)
	mem := (*C.ros_gz_interfaces__msg__GuiCamera)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	primitives.StringAsGoStruct(&m.Name, unsafe.Pointer(&mem.name))
	primitives.StringAsGoStruct(&m.ViewController, unsafe.Pointer(&mem.view_controller))
	geometry_msgs_msg.PoseTypeSupport.AsGoStruct(&m.Pose, unsafe.Pointer(&mem.pose))
	TrackVisualTypeSupport.AsGoStruct(&m.Track, unsafe.Pointer(&mem.track))
	primitives.StringAsGoStruct(&m.ProjectionType, unsafe.Pointer(&mem.projection_type))
}

func (t _GuiCameraTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__ros_gz_interfaces__msg__GuiCamera())
}

type CGuiCamera = C.ros_gz_interfaces__msg__GuiCamera
type CGuiCamera__Sequence = C.ros_gz_interfaces__msg__GuiCamera__Sequence

func GuiCamera__Sequence_to_Go(goSlice *[]GuiCamera, cSlice CGuiCamera__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]GuiCamera, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		GuiCameraTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func GuiCamera__Sequence_to_C(cSlice *CGuiCamera__Sequence, goSlice []GuiCamera) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.ros_gz_interfaces__msg__GuiCamera)(C.malloc(C.sizeof_struct_ros_gz_interfaces__msg__GuiCamera * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		GuiCameraTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func GuiCamera__Array_to_Go(goSlice []GuiCamera, cSlice []CGuiCamera) {
	for i := 0; i < len(cSlice); i++ {
		GuiCameraTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func GuiCamera__Array_to_C(cSlice []CGuiCamera, goSlice []GuiCamera) {
	for i := 0; i < len(goSlice); i++ {
		GuiCameraTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
