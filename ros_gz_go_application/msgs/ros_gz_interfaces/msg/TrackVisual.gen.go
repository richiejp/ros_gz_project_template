// Code generated by rclgo-gen. DO NOT EDIT.

package ros_gz_interfaces_msg
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	primitives "github.com/ATIinc/rclgo/pkg/rclgo/primitives"
	geometry_msgs_msg "github.com/iema-group/goros2/msgs/geometry_msgs/msg"
	std_msgs_msg "github.com/iema-group/goros2/msgs/std_msgs/msg"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <ros_gz_interfaces/msg/track_visual.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("ros_gz_interfaces/TrackVisual", TrackVisualTypeSupport)
	typemap.RegisterMessage("ros_gz_interfaces/msg/TrackVisual", TrackVisualTypeSupport)
}

type TrackVisual struct {
	Header std_msgs_msg.Header `yaml:"header" json:"header" mapstructure:"header"`// Optional header data.
	Name string `yaml:"name" json:"name" mapstructure:"name"`// Name of the visual to track.
	Id uint32 `yaml:"id" json:"id" mapstructure:"id"`// Id of the visual to track.
	InheritOrientation bool `yaml:"inherit_orientation" json:"inherit_orientation" mapstructure:"inherit_orientation"`// True to have the tracking camera inherit the orientation ofthe tracked visual.
	MinDist float64 `yaml:"min_dist" json:"min_dist" mapstructure:"min_dist"`// Minimum follow distance.
	MaxDist float64 `yaml:"max_dist" json:"max_dist" mapstructure:"max_dist"`// Maximum follow distance.
	IsStatic bool `yaml:"is_static" json:"is_static" mapstructure:"is_static"`// If set to true, the position of the camera is fixed.
	UseModelFrame bool `yaml:"use_model_frame" json:"use_model_frame" mapstructure:"use_model_frame"`// If set to true, the position of the camera is relative to the.model reference frame.
	Xyz geometry_msgs_msg.Vector3 `yaml:"xyz" json:"xyz" mapstructure:"xyz"`// Position of the camera.
	InheritYaw bool `yaml:"inherit_yaw" json:"inherit_yaw" mapstructure:"inherit_yaw"`// If set to true, the camera inherits the yaw rotation of the model.
}

// NewTrackVisual creates a new TrackVisual with default values.
func NewTrackVisual() *TrackVisual {
	self := TrackVisual{}
	self.SetDefaults()
	return &self
}

func (t *TrackVisual) Clone() *TrackVisual {
	c := &TrackVisual{}
	c.Header = *t.Header.Clone()
	c.Name = t.Name
	c.Id = t.Id
	c.InheritOrientation = t.InheritOrientation
	c.MinDist = t.MinDist
	c.MaxDist = t.MaxDist
	c.IsStatic = t.IsStatic
	c.UseModelFrame = t.UseModelFrame
	c.Xyz = *t.Xyz.Clone()
	c.InheritYaw = t.InheritYaw
	return c
}

func (t *TrackVisual) CloneMsg() types.Message {
	return t.Clone()
}

func (t *TrackVisual) SetDefaults() {
	t.Header.SetDefaults()
	t.Name = ""
	t.Id = 0
	t.InheritOrientation = false
	t.MinDist = 0
	t.MaxDist = 0
	t.IsStatic = false
	t.UseModelFrame = false
	t.Xyz.SetDefaults()
	t.InheritYaw = false
}

func (t *TrackVisual) GetTypeSupport() types.MessageTypeSupport {
	return TrackVisualTypeSupport
}

// TrackVisualPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type TrackVisualPublisher struct {
	*rclgo.Publisher
}

// NewTrackVisualPublisher creates and returns a new publisher for the
// TrackVisual
func NewTrackVisualPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*TrackVisualPublisher, error) {
	pub, err := node.NewPublisher(topic_name, TrackVisualTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &TrackVisualPublisher{pub}, nil
}

func (p *TrackVisualPublisher) Publish(msg *TrackVisual) error {
	return p.Publisher.Publish(msg)
}

// TrackVisualSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type TrackVisualSubscription struct {
	*rclgo.Subscription
}

// TrackVisualSubscriptionCallback type is used to provide a subscription
// handler function for a TrackVisualSubscription.
type TrackVisualSubscriptionCallback func(msg *TrackVisual, info *rclgo.MessageInfo, err error)

// NewTrackVisualSubscription creates and returns a new subscription for the
// TrackVisual
func NewTrackVisualSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback TrackVisualSubscriptionCallback) (*TrackVisualSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg TrackVisual
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, TrackVisualTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &TrackVisualSubscription{sub}, nil
}

func (s *TrackVisualSubscription) TakeMessage(out *TrackVisual) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneTrackVisualSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneTrackVisualSlice(dst, src []TrackVisual) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var TrackVisualTypeSupport types.MessageTypeSupport = _TrackVisualTypeSupport{}

type _TrackVisualTypeSupport struct{}

func (t _TrackVisualTypeSupport) New() types.Message {
	return NewTrackVisual()
}

func (t _TrackVisualTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.ros_gz_interfaces__msg__TrackVisual
	return (unsafe.Pointer)(C.ros_gz_interfaces__msg__TrackVisual__create())
}

func (t _TrackVisualTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.ros_gz_interfaces__msg__TrackVisual__destroy((*C.ros_gz_interfaces__msg__TrackVisual)(pointer_to_free))
}

func (t _TrackVisualTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*TrackVisual)
	mem := (*C.ros_gz_interfaces__msg__TrackVisual)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.name), m.Name)
	mem.id = C.uint32_t(m.Id)
	mem.inherit_orientation = C.bool(m.InheritOrientation)
	mem.min_dist = C.double(m.MinDist)
	mem.max_dist = C.double(m.MaxDist)
	mem.is_static = C.bool(m.IsStatic)
	mem.use_model_frame = C.bool(m.UseModelFrame)
	geometry_msgs_msg.Vector3TypeSupport.AsCStruct(unsafe.Pointer(&mem.xyz), &m.Xyz)
	mem.inherit_yaw = C.bool(m.InheritYaw)
}

func (t _TrackVisualTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*TrackVisual)
	mem := (*C.ros_gz_interfaces__msg__TrackVisual)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	primitives.StringAsGoStruct(&m.Name, unsafe.Pointer(&mem.name))
	m.Id = uint32(mem.id)
	m.InheritOrientation = bool(mem.inherit_orientation)
	m.MinDist = float64(mem.min_dist)
	m.MaxDist = float64(mem.max_dist)
	m.IsStatic = bool(mem.is_static)
	m.UseModelFrame = bool(mem.use_model_frame)
	geometry_msgs_msg.Vector3TypeSupport.AsGoStruct(&m.Xyz, unsafe.Pointer(&mem.xyz))
	m.InheritYaw = bool(mem.inherit_yaw)
}

func (t _TrackVisualTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__ros_gz_interfaces__msg__TrackVisual())
}

type CTrackVisual = C.ros_gz_interfaces__msg__TrackVisual
type CTrackVisual__Sequence = C.ros_gz_interfaces__msg__TrackVisual__Sequence

func TrackVisual__Sequence_to_Go(goSlice *[]TrackVisual, cSlice CTrackVisual__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]TrackVisual, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		TrackVisualTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func TrackVisual__Sequence_to_C(cSlice *CTrackVisual__Sequence, goSlice []TrackVisual) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.ros_gz_interfaces__msg__TrackVisual)(C.malloc(C.sizeof_struct_ros_gz_interfaces__msg__TrackVisual * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		TrackVisualTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func TrackVisual__Array_to_Go(goSlice []TrackVisual, cSlice []CTrackVisual) {
	for i := 0; i < len(cSlice); i++ {
		TrackVisualTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func TrackVisual__Array_to_C(cSlice []CTrackVisual, goSlice []TrackVisual) {
	for i := 0; i < len(goSlice); i++ {
		TrackVisualTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
