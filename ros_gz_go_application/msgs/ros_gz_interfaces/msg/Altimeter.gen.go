// Code generated by rclgo-gen. DO NOT EDIT.

package ros_gz_interfaces_msg
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	std_msgs_msg "github.com/iema-group/goros2/msgs/std_msgs/msg"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <ros_gz_interfaces/msg/altimeter.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("ros_gz_interfaces/Altimeter", AltimeterTypeSupport)
	typemap.RegisterMessage("ros_gz_interfaces/msg/Altimeter", AltimeterTypeSupport)
}

type Altimeter struct {
	Header std_msgs_msg.Header `yaml:"header" json:"header" mapstructure:"header"`// Optional header data.
	VerticalPosition float64 `yaml:"vertical_position" json:"vertical_position" mapstructure:"vertical_position"`// Vertical position data, in meters.
	VerticalVelocity float64 `yaml:"vertical_velocity" json:"vertical_velocity" mapstructure:"vertical_velocity"`// Vertical velocity data, in meters/second.
	VerticalReference float64 `yaml:"vertical_reference" json:"vertical_reference" mapstructure:"vertical_reference"`// Vertical reference.
}

// NewAltimeter creates a new Altimeter with default values.
func NewAltimeter() *Altimeter {
	self := Altimeter{}
	self.SetDefaults()
	return &self
}

func (t *Altimeter) Clone() *Altimeter {
	c := &Altimeter{}
	c.Header = *t.Header.Clone()
	c.VerticalPosition = t.VerticalPosition
	c.VerticalVelocity = t.VerticalVelocity
	c.VerticalReference = t.VerticalReference
	return c
}

func (t *Altimeter) CloneMsg() types.Message {
	return t.Clone()
}

func (t *Altimeter) SetDefaults() {
	t.Header.SetDefaults()
	t.VerticalPosition = 0
	t.VerticalVelocity = 0
	t.VerticalReference = 0
}

func (t *Altimeter) GetTypeSupport() types.MessageTypeSupport {
	return AltimeterTypeSupport
}

// AltimeterPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type AltimeterPublisher struct {
	*rclgo.Publisher
}

// NewAltimeterPublisher creates and returns a new publisher for the
// Altimeter
func NewAltimeterPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*AltimeterPublisher, error) {
	pub, err := node.NewPublisher(topic_name, AltimeterTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &AltimeterPublisher{pub}, nil
}

func (p *AltimeterPublisher) Publish(msg *Altimeter) error {
	return p.Publisher.Publish(msg)
}

// AltimeterSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type AltimeterSubscription struct {
	*rclgo.Subscription
}

// AltimeterSubscriptionCallback type is used to provide a subscription
// handler function for a AltimeterSubscription.
type AltimeterSubscriptionCallback func(msg *Altimeter, info *rclgo.MessageInfo, err error)

// NewAltimeterSubscription creates and returns a new subscription for the
// Altimeter
func NewAltimeterSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback AltimeterSubscriptionCallback) (*AltimeterSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg Altimeter
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, AltimeterTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &AltimeterSubscription{sub}, nil
}

func (s *AltimeterSubscription) TakeMessage(out *Altimeter) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneAltimeterSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneAltimeterSlice(dst, src []Altimeter) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var AltimeterTypeSupport types.MessageTypeSupport = _AltimeterTypeSupport{}

type _AltimeterTypeSupport struct{}

func (t _AltimeterTypeSupport) New() types.Message {
	return NewAltimeter()
}

func (t _AltimeterTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.ros_gz_interfaces__msg__Altimeter
	return (unsafe.Pointer)(C.ros_gz_interfaces__msg__Altimeter__create())
}

func (t _AltimeterTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.ros_gz_interfaces__msg__Altimeter__destroy((*C.ros_gz_interfaces__msg__Altimeter)(pointer_to_free))
}

func (t _AltimeterTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*Altimeter)
	mem := (*C.ros_gz_interfaces__msg__Altimeter)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	mem.vertical_position = C.double(m.VerticalPosition)
	mem.vertical_velocity = C.double(m.VerticalVelocity)
	mem.vertical_reference = C.double(m.VerticalReference)
}

func (t _AltimeterTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*Altimeter)
	mem := (*C.ros_gz_interfaces__msg__Altimeter)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	m.VerticalPosition = float64(mem.vertical_position)
	m.VerticalVelocity = float64(mem.vertical_velocity)
	m.VerticalReference = float64(mem.vertical_reference)
}

func (t _AltimeterTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__ros_gz_interfaces__msg__Altimeter())
}

type CAltimeter = C.ros_gz_interfaces__msg__Altimeter
type CAltimeter__Sequence = C.ros_gz_interfaces__msg__Altimeter__Sequence

func Altimeter__Sequence_to_Go(goSlice *[]Altimeter, cSlice CAltimeter__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Altimeter, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		AltimeterTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func Altimeter__Sequence_to_C(cSlice *CAltimeter__Sequence, goSlice []Altimeter) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.ros_gz_interfaces__msg__Altimeter)(C.malloc(C.sizeof_struct_ros_gz_interfaces__msg__Altimeter * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		AltimeterTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func Altimeter__Array_to_Go(goSlice []Altimeter, cSlice []CAltimeter) {
	for i := 0; i < len(cSlice); i++ {
		AltimeterTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func Altimeter__Array_to_C(cSlice []CAltimeter, goSlice []Altimeter) {
	for i := 0; i < len(goSlice); i++ {
		AltimeterTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
