// Code generated by rclgo-gen. DO NOT EDIT.

package ros_gz_interfaces_msg
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	primitives "github.com/ATIinc/rclgo/pkg/rclgo/primitives"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <ros_gz_interfaces/msg/entity.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("ros_gz_interfaces/Entity", EntityTypeSupport)
	typemap.RegisterMessage("ros_gz_interfaces/msg/Entity", EntityTypeSupport)
}
const (
	Entity_NONE uint8 = 0// Entity type: constant definition
	Entity_LIGHT uint8 = 1
	Entity_MODEL uint8 = 2
	Entity_LINK uint8 = 3
	Entity_VISUAL uint8 = 4
	Entity_COLLISION uint8 = 5
	Entity_SENSOR uint8 = 6
	Entity_JOINT uint8 = 7
)

type Entity struct {
	Id uint64 `yaml:"id" json:"id" mapstructure:"id"`// Entity unique identifier accross all types. Defaults to 0
	Name string `yaml:"name" json:"name" mapstructure:"name"`// Entity name, which is not guaranteed to be unique.
	Type uint8 `yaml:"type" json:"type" mapstructure:"type"`// Entity type.
}

// NewEntity creates a new Entity with default values.
func NewEntity() *Entity {
	self := Entity{}
	self.SetDefaults()
	return &self
}

func (t *Entity) Clone() *Entity {
	c := &Entity{}
	c.Id = t.Id
	c.Name = t.Name
	c.Type = t.Type
	return c
}

func (t *Entity) CloneMsg() types.Message {
	return t.Clone()
}

func (t *Entity) SetDefaults() {
	t.Id = 0
	t.Name = ""
	t.Type = 0
}

func (t *Entity) GetTypeSupport() types.MessageTypeSupport {
	return EntityTypeSupport
}

// EntityPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type EntityPublisher struct {
	*rclgo.Publisher
}

// NewEntityPublisher creates and returns a new publisher for the
// Entity
func NewEntityPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*EntityPublisher, error) {
	pub, err := node.NewPublisher(topic_name, EntityTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &EntityPublisher{pub}, nil
}

func (p *EntityPublisher) Publish(msg *Entity) error {
	return p.Publisher.Publish(msg)
}

// EntitySubscription wraps rclgo.Subscription to provide type safe helper
// functions
type EntitySubscription struct {
	*rclgo.Subscription
}

// EntitySubscriptionCallback type is used to provide a subscription
// handler function for a EntitySubscription.
type EntitySubscriptionCallback func(msg *Entity, info *rclgo.MessageInfo, err error)

// NewEntitySubscription creates and returns a new subscription for the
// Entity
func NewEntitySubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback EntitySubscriptionCallback) (*EntitySubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg Entity
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, EntityTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &EntitySubscription{sub}, nil
}

func (s *EntitySubscription) TakeMessage(out *Entity) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneEntitySlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneEntitySlice(dst, src []Entity) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var EntityTypeSupport types.MessageTypeSupport = _EntityTypeSupport{}

type _EntityTypeSupport struct{}

func (t _EntityTypeSupport) New() types.Message {
	return NewEntity()
}

func (t _EntityTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.ros_gz_interfaces__msg__Entity
	return (unsafe.Pointer)(C.ros_gz_interfaces__msg__Entity__create())
}

func (t _EntityTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.ros_gz_interfaces__msg__Entity__destroy((*C.ros_gz_interfaces__msg__Entity)(pointer_to_free))
}

func (t _EntityTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*Entity)
	mem := (*C.ros_gz_interfaces__msg__Entity)(dst)
	mem.id = C.uint64_t(m.Id)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.name), m.Name)
	mem._type = C.uint8_t(m.Type)
}

func (t _EntityTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*Entity)
	mem := (*C.ros_gz_interfaces__msg__Entity)(ros2_message_buffer)
	m.Id = uint64(mem.id)
	primitives.StringAsGoStruct(&m.Name, unsafe.Pointer(&mem.name))
	m.Type = uint8(mem._type)
}

func (t _EntityTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__ros_gz_interfaces__msg__Entity())
}

type CEntity = C.ros_gz_interfaces__msg__Entity
type CEntity__Sequence = C.ros_gz_interfaces__msg__Entity__Sequence

func Entity__Sequence_to_Go(goSlice *[]Entity, cSlice CEntity__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Entity, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		EntityTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func Entity__Sequence_to_C(cSlice *CEntity__Sequence, goSlice []Entity) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.ros_gz_interfaces__msg__Entity)(C.malloc(C.sizeof_struct_ros_gz_interfaces__msg__Entity * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		EntityTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func Entity__Array_to_Go(goSlice []Entity, cSlice []CEntity) {
	for i := 0; i < len(cSlice); i++ {
		EntityTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func Entity__Array_to_C(cSlice []CEntity, goSlice []Entity) {
	for i := 0; i < len(goSlice); i++ {
		EntityTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
