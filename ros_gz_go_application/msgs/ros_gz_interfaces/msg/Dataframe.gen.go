// Code generated by rclgo-gen. DO NOT EDIT.

package ros_gz_interfaces_msg
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	primitives "github.com/ATIinc/rclgo/pkg/rclgo/primitives"
	std_msgs_msg "github.com/iema-group/goros2/msgs/std_msgs/msg"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <ros_gz_interfaces/msg/dataframe.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("ros_gz_interfaces/Dataframe", DataframeTypeSupport)
	typemap.RegisterMessage("ros_gz_interfaces/msg/Dataframe", DataframeTypeSupport)
}

type Dataframe struct {
	Header std_msgs_msg.Header `yaml:"header" json:"header" mapstructure:"header"`// Time stamp. Message containing some payload as well as sender and destinationIntended for use with the comms system in Gazebo
	SrcAddress string `yaml:"src_address" json:"src_address" mapstructure:"src_address"`// Address of the sender
	DstAddress string `yaml:"dst_address" json:"dst_address" mapstructure:"dst_address"`// Address of the destination
	Data []uint8 `yaml:"data" json:"data" mapstructure:"data"`// Payload
	Rssi float64 `yaml:"rssi" json:"rssi" mapstructure:"rssi"`// Received Signal Strength Indicator
}

// NewDataframe creates a new Dataframe with default values.
func NewDataframe() *Dataframe {
	self := Dataframe{}
	self.SetDefaults()
	return &self
}

func (t *Dataframe) Clone() *Dataframe {
	c := &Dataframe{}
	c.Header = *t.Header.Clone()
	c.SrcAddress = t.SrcAddress
	c.DstAddress = t.DstAddress
	if t.Data != nil {
		c.Data = make([]uint8, len(t.Data))
		copy(c.Data, t.Data)
	}
	c.Rssi = t.Rssi
	return c
}

func (t *Dataframe) CloneMsg() types.Message {
	return t.Clone()
}

func (t *Dataframe) SetDefaults() {
	t.Header.SetDefaults()
	t.SrcAddress = ""
	t.DstAddress = ""
	t.Data = nil
	t.Rssi = 0
}

func (t *Dataframe) GetTypeSupport() types.MessageTypeSupport {
	return DataframeTypeSupport
}

// DataframePublisher wraps rclgo.Publisher to provide type safe helper
// functions
type DataframePublisher struct {
	*rclgo.Publisher
}

// NewDataframePublisher creates and returns a new publisher for the
// Dataframe
func NewDataframePublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*DataframePublisher, error) {
	pub, err := node.NewPublisher(topic_name, DataframeTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &DataframePublisher{pub}, nil
}

func (p *DataframePublisher) Publish(msg *Dataframe) error {
	return p.Publisher.Publish(msg)
}

// DataframeSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type DataframeSubscription struct {
	*rclgo.Subscription
}

// DataframeSubscriptionCallback type is used to provide a subscription
// handler function for a DataframeSubscription.
type DataframeSubscriptionCallback func(msg *Dataframe, info *rclgo.MessageInfo, err error)

// NewDataframeSubscription creates and returns a new subscription for the
// Dataframe
func NewDataframeSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback DataframeSubscriptionCallback) (*DataframeSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg Dataframe
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, DataframeTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &DataframeSubscription{sub}, nil
}

func (s *DataframeSubscription) TakeMessage(out *Dataframe) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneDataframeSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneDataframeSlice(dst, src []Dataframe) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var DataframeTypeSupport types.MessageTypeSupport = _DataframeTypeSupport{}

type _DataframeTypeSupport struct{}

func (t _DataframeTypeSupport) New() types.Message {
	return NewDataframe()
}

func (t _DataframeTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.ros_gz_interfaces__msg__Dataframe
	return (unsafe.Pointer)(C.ros_gz_interfaces__msg__Dataframe__create())
}

func (t _DataframeTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.ros_gz_interfaces__msg__Dataframe__destroy((*C.ros_gz_interfaces__msg__Dataframe)(pointer_to_free))
}

func (t _DataframeTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*Dataframe)
	mem := (*C.ros_gz_interfaces__msg__Dataframe)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.src_address), m.SrcAddress)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.dst_address), m.DstAddress)
	primitives.Uint8__Sequence_to_C((*primitives.CUint8__Sequence)(unsafe.Pointer(&mem.data)), m.Data)
	mem.rssi = C.double(m.Rssi)
}

func (t _DataframeTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*Dataframe)
	mem := (*C.ros_gz_interfaces__msg__Dataframe)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	primitives.StringAsGoStruct(&m.SrcAddress, unsafe.Pointer(&mem.src_address))
	primitives.StringAsGoStruct(&m.DstAddress, unsafe.Pointer(&mem.dst_address))
	primitives.Uint8__Sequence_to_Go(&m.Data, *(*primitives.CUint8__Sequence)(unsafe.Pointer(&mem.data)))
	m.Rssi = float64(mem.rssi)
}

func (t _DataframeTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__ros_gz_interfaces__msg__Dataframe())
}

type CDataframe = C.ros_gz_interfaces__msg__Dataframe
type CDataframe__Sequence = C.ros_gz_interfaces__msg__Dataframe__Sequence

func Dataframe__Sequence_to_Go(goSlice *[]Dataframe, cSlice CDataframe__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Dataframe, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		DataframeTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func Dataframe__Sequence_to_C(cSlice *CDataframe__Sequence, goSlice []Dataframe) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.ros_gz_interfaces__msg__Dataframe)(C.malloc(C.sizeof_struct_ros_gz_interfaces__msg__Dataframe * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		DataframeTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func Dataframe__Array_to_Go(goSlice []Dataframe, cSlice []CDataframe) {
	for i := 0; i < len(cSlice); i++ {
		DataframeTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func Dataframe__Array_to_C(cSlice []CDataframe, goSlice []Dataframe) {
	for i := 0; i < len(goSlice); i++ {
		DataframeTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
