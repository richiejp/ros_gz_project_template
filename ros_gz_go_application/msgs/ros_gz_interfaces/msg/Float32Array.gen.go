// Code generated by rclgo-gen. DO NOT EDIT.

package ros_gz_interfaces_msg
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	primitives "github.com/ATIinc/rclgo/pkg/rclgo/primitives"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <ros_gz_interfaces/msg/float32_array.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("ros_gz_interfaces/Float32Array", Float32ArrayTypeSupport)
	typemap.RegisterMessage("ros_gz_interfaces/msg/Float32Array", Float32ArrayTypeSupport)
}

type Float32Array struct {
	Data []float32 `yaml:"data" json:"data" mapstructure:"data"`
}

// NewFloat32Array creates a new Float32Array with default values.
func NewFloat32Array() *Float32Array {
	self := Float32Array{}
	self.SetDefaults()
	return &self
}

func (t *Float32Array) Clone() *Float32Array {
	c := &Float32Array{}
	if t.Data != nil {
		c.Data = make([]float32, len(t.Data))
		copy(c.Data, t.Data)
	}
	return c
}

func (t *Float32Array) CloneMsg() types.Message {
	return t.Clone()
}

func (t *Float32Array) SetDefaults() {
	t.Data = nil
}

func (t *Float32Array) GetTypeSupport() types.MessageTypeSupport {
	return Float32ArrayTypeSupport
}

// Float32ArrayPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type Float32ArrayPublisher struct {
	*rclgo.Publisher
}

// NewFloat32ArrayPublisher creates and returns a new publisher for the
// Float32Array
func NewFloat32ArrayPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*Float32ArrayPublisher, error) {
	pub, err := node.NewPublisher(topic_name, Float32ArrayTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &Float32ArrayPublisher{pub}, nil
}

func (p *Float32ArrayPublisher) Publish(msg *Float32Array) error {
	return p.Publisher.Publish(msg)
}

// Float32ArraySubscription wraps rclgo.Subscription to provide type safe helper
// functions
type Float32ArraySubscription struct {
	*rclgo.Subscription
}

// Float32ArraySubscriptionCallback type is used to provide a subscription
// handler function for a Float32ArraySubscription.
type Float32ArraySubscriptionCallback func(msg *Float32Array, info *rclgo.MessageInfo, err error)

// NewFloat32ArraySubscription creates and returns a new subscription for the
// Float32Array
func NewFloat32ArraySubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback Float32ArraySubscriptionCallback) (*Float32ArraySubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg Float32Array
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, Float32ArrayTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &Float32ArraySubscription{sub}, nil
}

func (s *Float32ArraySubscription) TakeMessage(out *Float32Array) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneFloat32ArraySlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneFloat32ArraySlice(dst, src []Float32Array) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var Float32ArrayTypeSupport types.MessageTypeSupport = _Float32ArrayTypeSupport{}

type _Float32ArrayTypeSupport struct{}

func (t _Float32ArrayTypeSupport) New() types.Message {
	return NewFloat32Array()
}

func (t _Float32ArrayTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.ros_gz_interfaces__msg__Float32Array
	return (unsafe.Pointer)(C.ros_gz_interfaces__msg__Float32Array__create())
}

func (t _Float32ArrayTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.ros_gz_interfaces__msg__Float32Array__destroy((*C.ros_gz_interfaces__msg__Float32Array)(pointer_to_free))
}

func (t _Float32ArrayTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*Float32Array)
	mem := (*C.ros_gz_interfaces__msg__Float32Array)(dst)
	primitives.Float32__Sequence_to_C((*primitives.CFloat32__Sequence)(unsafe.Pointer(&mem.data)), m.Data)
}

func (t _Float32ArrayTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*Float32Array)
	mem := (*C.ros_gz_interfaces__msg__Float32Array)(ros2_message_buffer)
	primitives.Float32__Sequence_to_Go(&m.Data, *(*primitives.CFloat32__Sequence)(unsafe.Pointer(&mem.data)))
}

func (t _Float32ArrayTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__ros_gz_interfaces__msg__Float32Array())
}

type CFloat32Array = C.ros_gz_interfaces__msg__Float32Array
type CFloat32Array__Sequence = C.ros_gz_interfaces__msg__Float32Array__Sequence

func Float32Array__Sequence_to_Go(goSlice *[]Float32Array, cSlice CFloat32Array__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Float32Array, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		Float32ArrayTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func Float32Array__Sequence_to_C(cSlice *CFloat32Array__Sequence, goSlice []Float32Array) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.ros_gz_interfaces__msg__Float32Array)(C.malloc(C.sizeof_struct_ros_gz_interfaces__msg__Float32Array * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		Float32ArrayTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func Float32Array__Array_to_Go(goSlice []Float32Array, cSlice []CFloat32Array) {
	for i := 0; i < len(cSlice); i++ {
		Float32ArrayTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func Float32Array__Array_to_C(cSlice []CFloat32Array, goSlice []Float32Array) {
	for i := 0; i < len(goSlice); i++ {
		Float32ArrayTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
