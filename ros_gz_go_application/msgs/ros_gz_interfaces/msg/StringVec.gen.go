// Code generated by rclgo-gen. DO NOT EDIT.

package ros_gz_interfaces_msg
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	primitives "github.com/ATIinc/rclgo/pkg/rclgo/primitives"
	std_msgs_msg "github.com/iema-group/goros2/msgs/std_msgs/msg"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <ros_gz_interfaces/msg/string_vec.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("ros_gz_interfaces/StringVec", StringVecTypeSupport)
	typemap.RegisterMessage("ros_gz_interfaces/msg/StringVec", StringVecTypeSupport)
}

type StringVec struct {
	Header std_msgs_msg.Header `yaml:"header" json:"header" mapstructure:"header"`// Optional header data.
	Data []string `yaml:"data" json:"data" mapstructure:"data"`// The vector of strings.
}

// NewStringVec creates a new StringVec with default values.
func NewStringVec() *StringVec {
	self := StringVec{}
	self.SetDefaults()
	return &self
}

func (t *StringVec) Clone() *StringVec {
	c := &StringVec{}
	c.Header = *t.Header.Clone()
	if t.Data != nil {
		c.Data = make([]string, len(t.Data))
		copy(c.Data, t.Data)
	}
	return c
}

func (t *StringVec) CloneMsg() types.Message {
	return t.Clone()
}

func (t *StringVec) SetDefaults() {
	t.Header.SetDefaults()
	t.Data = nil
}

func (t *StringVec) GetTypeSupport() types.MessageTypeSupport {
	return StringVecTypeSupport
}

// StringVecPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type StringVecPublisher struct {
	*rclgo.Publisher
}

// NewStringVecPublisher creates and returns a new publisher for the
// StringVec
func NewStringVecPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*StringVecPublisher, error) {
	pub, err := node.NewPublisher(topic_name, StringVecTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &StringVecPublisher{pub}, nil
}

func (p *StringVecPublisher) Publish(msg *StringVec) error {
	return p.Publisher.Publish(msg)
}

// StringVecSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type StringVecSubscription struct {
	*rclgo.Subscription
}

// StringVecSubscriptionCallback type is used to provide a subscription
// handler function for a StringVecSubscription.
type StringVecSubscriptionCallback func(msg *StringVec, info *rclgo.MessageInfo, err error)

// NewStringVecSubscription creates and returns a new subscription for the
// StringVec
func NewStringVecSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback StringVecSubscriptionCallback) (*StringVecSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg StringVec
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, StringVecTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &StringVecSubscription{sub}, nil
}

func (s *StringVecSubscription) TakeMessage(out *StringVec) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneStringVecSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneStringVecSlice(dst, src []StringVec) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var StringVecTypeSupport types.MessageTypeSupport = _StringVecTypeSupport{}

type _StringVecTypeSupport struct{}

func (t _StringVecTypeSupport) New() types.Message {
	return NewStringVec()
}

func (t _StringVecTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.ros_gz_interfaces__msg__StringVec
	return (unsafe.Pointer)(C.ros_gz_interfaces__msg__StringVec__create())
}

func (t _StringVecTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.ros_gz_interfaces__msg__StringVec__destroy((*C.ros_gz_interfaces__msg__StringVec)(pointer_to_free))
}

func (t _StringVecTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*StringVec)
	mem := (*C.ros_gz_interfaces__msg__StringVec)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	primitives.String__Sequence_to_C((*primitives.CString__Sequence)(unsafe.Pointer(&mem.data)), m.Data)
}

func (t _StringVecTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*StringVec)
	mem := (*C.ros_gz_interfaces__msg__StringVec)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	primitives.String__Sequence_to_Go(&m.Data, *(*primitives.CString__Sequence)(unsafe.Pointer(&mem.data)))
}

func (t _StringVecTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__ros_gz_interfaces__msg__StringVec())
}

type CStringVec = C.ros_gz_interfaces__msg__StringVec
type CStringVec__Sequence = C.ros_gz_interfaces__msg__StringVec__Sequence

func StringVec__Sequence_to_Go(goSlice *[]StringVec, cSlice CStringVec__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]StringVec, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		StringVecTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func StringVec__Sequence_to_C(cSlice *CStringVec__Sequence, goSlice []StringVec) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.ros_gz_interfaces__msg__StringVec)(C.malloc(C.sizeof_struct_ros_gz_interfaces__msg__StringVec * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		StringVecTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func StringVec__Array_to_Go(goSlice []StringVec, cSlice []CStringVec) {
	for i := 0; i < len(cSlice); i++ {
		StringVecTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func StringVec__Array_to_C(cSlice []CStringVec, goSlice []StringVec) {
	for i := 0; i < len(goSlice); i++ {
		StringVecTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
