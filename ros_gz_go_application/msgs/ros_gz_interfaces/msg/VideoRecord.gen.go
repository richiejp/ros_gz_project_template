// Code generated by rclgo-gen. DO NOT EDIT.

package ros_gz_interfaces_msg
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	primitives "github.com/ATIinc/rclgo/pkg/rclgo/primitives"
	std_msgs_msg "github.com/iema-group/goros2/msgs/std_msgs/msg"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <ros_gz_interfaces/msg/video_record.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("ros_gz_interfaces/VideoRecord", VideoRecordTypeSupport)
	typemap.RegisterMessage("ros_gz_interfaces/msg/VideoRecord", VideoRecordTypeSupport)
}

type VideoRecord struct {
	Header std_msgs_msg.Header `yaml:"header" json:"header" mapstructure:"header"`// Optional header data.
	Start bool `yaml:"start" json:"start" mapstructure:"start"`// True to start video recording.
	Stop bool `yaml:"stop" json:"stop" mapstructure:"stop"`// True to stop video recording.
	Format string `yaml:"format" json:"format" mapstructure:"format"`// Video encoding format, e.g. "mp4", "ogv".
	SaveFilename string `yaml:"save_filename" json:"save_filename" mapstructure:"save_filename"`// filename of the recorded video.
}

// NewVideoRecord creates a new VideoRecord with default values.
func NewVideoRecord() *VideoRecord {
	self := VideoRecord{}
	self.SetDefaults()
	return &self
}

func (t *VideoRecord) Clone() *VideoRecord {
	c := &VideoRecord{}
	c.Header = *t.Header.Clone()
	c.Start = t.Start
	c.Stop = t.Stop
	c.Format = t.Format
	c.SaveFilename = t.SaveFilename
	return c
}

func (t *VideoRecord) CloneMsg() types.Message {
	return t.Clone()
}

func (t *VideoRecord) SetDefaults() {
	t.Header.SetDefaults()
	t.Start = false
	t.Stop = false
	t.Format = ""
	t.SaveFilename = ""
}

func (t *VideoRecord) GetTypeSupport() types.MessageTypeSupport {
	return VideoRecordTypeSupport
}

// VideoRecordPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type VideoRecordPublisher struct {
	*rclgo.Publisher
}

// NewVideoRecordPublisher creates and returns a new publisher for the
// VideoRecord
func NewVideoRecordPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*VideoRecordPublisher, error) {
	pub, err := node.NewPublisher(topic_name, VideoRecordTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &VideoRecordPublisher{pub}, nil
}

func (p *VideoRecordPublisher) Publish(msg *VideoRecord) error {
	return p.Publisher.Publish(msg)
}

// VideoRecordSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type VideoRecordSubscription struct {
	*rclgo.Subscription
}

// VideoRecordSubscriptionCallback type is used to provide a subscription
// handler function for a VideoRecordSubscription.
type VideoRecordSubscriptionCallback func(msg *VideoRecord, info *rclgo.MessageInfo, err error)

// NewVideoRecordSubscription creates and returns a new subscription for the
// VideoRecord
func NewVideoRecordSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback VideoRecordSubscriptionCallback) (*VideoRecordSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg VideoRecord
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, VideoRecordTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &VideoRecordSubscription{sub}, nil
}

func (s *VideoRecordSubscription) TakeMessage(out *VideoRecord) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneVideoRecordSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneVideoRecordSlice(dst, src []VideoRecord) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var VideoRecordTypeSupport types.MessageTypeSupport = _VideoRecordTypeSupport{}

type _VideoRecordTypeSupport struct{}

func (t _VideoRecordTypeSupport) New() types.Message {
	return NewVideoRecord()
}

func (t _VideoRecordTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.ros_gz_interfaces__msg__VideoRecord
	return (unsafe.Pointer)(C.ros_gz_interfaces__msg__VideoRecord__create())
}

func (t _VideoRecordTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.ros_gz_interfaces__msg__VideoRecord__destroy((*C.ros_gz_interfaces__msg__VideoRecord)(pointer_to_free))
}

func (t _VideoRecordTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*VideoRecord)
	mem := (*C.ros_gz_interfaces__msg__VideoRecord)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	mem.start = C.bool(m.Start)
	mem.stop = C.bool(m.Stop)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.format), m.Format)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.save_filename), m.SaveFilename)
}

func (t _VideoRecordTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*VideoRecord)
	mem := (*C.ros_gz_interfaces__msg__VideoRecord)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	m.Start = bool(mem.start)
	m.Stop = bool(mem.stop)
	primitives.StringAsGoStruct(&m.Format, unsafe.Pointer(&mem.format))
	primitives.StringAsGoStruct(&m.SaveFilename, unsafe.Pointer(&mem.save_filename))
}

func (t _VideoRecordTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__ros_gz_interfaces__msg__VideoRecord())
}

type CVideoRecord = C.ros_gz_interfaces__msg__VideoRecord
type CVideoRecord__Sequence = C.ros_gz_interfaces__msg__VideoRecord__Sequence

func VideoRecord__Sequence_to_Go(goSlice *[]VideoRecord, cSlice CVideoRecord__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]VideoRecord, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		VideoRecordTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func VideoRecord__Sequence_to_C(cSlice *CVideoRecord__Sequence, goSlice []VideoRecord) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.ros_gz_interfaces__msg__VideoRecord)(C.malloc(C.sizeof_struct_ros_gz_interfaces__msg__VideoRecord * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		VideoRecordTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func VideoRecord__Array_to_Go(goSlice []VideoRecord, cSlice []CVideoRecord) {
	for i := 0; i < len(cSlice); i++ {
		VideoRecordTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func VideoRecord__Array_to_C(cSlice []CVideoRecord, goSlice []VideoRecord) {
	for i := 0; i < len(goSlice); i++ {
		VideoRecordTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
