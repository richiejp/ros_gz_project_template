// Code generated by rclgo-gen. DO NOT EDIT.

package ros_gz_interfaces_msg
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	std_msgs_msg "github.com/iema-group/goros2/msgs/std_msgs/msg"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <ros_gz_interfaces/msg/sensor_noise.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("ros_gz_interfaces/SensorNoise", SensorNoiseTypeSupport)
	typemap.RegisterMessage("ros_gz_interfaces/msg/SensorNoise", SensorNoiseTypeSupport)
}
const (
	SensorNoise_NONE uint8 = 0// Noise type
	SensorNoise_GAUSSIAN uint8 = 2
	SensorNoise_GAUSSIAN_QUANTIZED uint8 = 3
)

type SensorNoise struct {
	Header std_msgs_msg.Header `yaml:"header" json:"header" mapstructure:"header"`// Optional header data.
	Type uint8 `yaml:"type" json:"type" mapstructure:"type"`// The type of noise
	Mean float64 `yaml:"mean" json:"mean" mapstructure:"mean"`// Noise meanUsed by GAUSSIAN and GAUSSIAN_QUANTIZED
	Stddev float64 `yaml:"stddev" json:"stddev" mapstructure:"stddev"`// Noise standard deviationUsed by GAUSSIAN and GAUSSIAN_QUANTIZED
	BiasMean float64 `yaml:"bias_mean" json:"bias_mean" mapstructure:"bias_mean"`// Noise mean biasUsed by GAUSSIAN and GAUSSIAN_QUANTIZED
	BiasStddev float64 `yaml:"bias_stddev" json:"bias_stddev" mapstructure:"bias_stddev"`// Noise standard deviation bias
	Precision float64 `yaml:"precision" json:"precision" mapstructure:"precision"`// Noise precisionUsed by GAUSSIAN_QUANTIZED
	DynamicBiasStddev float64 `yaml:"dynamic_bias_stddev" json:"dynamic_bias_stddev" mapstructure:"dynamic_bias_stddev"`// For type "gaussian*", the standard deviation of the noise used todrive a process to model slow variations in a sensor bias.
	DynamicBiasCorrelationTime float64 `yaml:"dynamic_bias_correlation_time" json:"dynamic_bias_correlation_time" mapstructure:"dynamic_bias_correlation_time"`// For type "gaussian*", the correlation time in seconds of thenoise used to drive a process to model slow variations in a sensor bias.A typical value, when used, would be on the order of3600 seconds (1 hour).
}

// NewSensorNoise creates a new SensorNoise with default values.
func NewSensorNoise() *SensorNoise {
	self := SensorNoise{}
	self.SetDefaults()
	return &self
}

func (t *SensorNoise) Clone() *SensorNoise {
	c := &SensorNoise{}
	c.Header = *t.Header.Clone()
	c.Type = t.Type
	c.Mean = t.Mean
	c.Stddev = t.Stddev
	c.BiasMean = t.BiasMean
	c.BiasStddev = t.BiasStddev
	c.Precision = t.Precision
	c.DynamicBiasStddev = t.DynamicBiasStddev
	c.DynamicBiasCorrelationTime = t.DynamicBiasCorrelationTime
	return c
}

func (t *SensorNoise) CloneMsg() types.Message {
	return t.Clone()
}

func (t *SensorNoise) SetDefaults() {
	t.Header.SetDefaults()
	t.Type = 0
	t.Mean = 0
	t.Stddev = 0
	t.BiasMean = 0
	t.BiasStddev = 0
	t.Precision = 0
	t.DynamicBiasStddev = 0
	t.DynamicBiasCorrelationTime = 0
}

func (t *SensorNoise) GetTypeSupport() types.MessageTypeSupport {
	return SensorNoiseTypeSupport
}

// SensorNoisePublisher wraps rclgo.Publisher to provide type safe helper
// functions
type SensorNoisePublisher struct {
	*rclgo.Publisher
}

// NewSensorNoisePublisher creates and returns a new publisher for the
// SensorNoise
func NewSensorNoisePublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*SensorNoisePublisher, error) {
	pub, err := node.NewPublisher(topic_name, SensorNoiseTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &SensorNoisePublisher{pub}, nil
}

func (p *SensorNoisePublisher) Publish(msg *SensorNoise) error {
	return p.Publisher.Publish(msg)
}

// SensorNoiseSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type SensorNoiseSubscription struct {
	*rclgo.Subscription
}

// SensorNoiseSubscriptionCallback type is used to provide a subscription
// handler function for a SensorNoiseSubscription.
type SensorNoiseSubscriptionCallback func(msg *SensorNoise, info *rclgo.MessageInfo, err error)

// NewSensorNoiseSubscription creates and returns a new subscription for the
// SensorNoise
func NewSensorNoiseSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback SensorNoiseSubscriptionCallback) (*SensorNoiseSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg SensorNoise
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, SensorNoiseTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &SensorNoiseSubscription{sub}, nil
}

func (s *SensorNoiseSubscription) TakeMessage(out *SensorNoise) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneSensorNoiseSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneSensorNoiseSlice(dst, src []SensorNoise) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var SensorNoiseTypeSupport types.MessageTypeSupport = _SensorNoiseTypeSupport{}

type _SensorNoiseTypeSupport struct{}

func (t _SensorNoiseTypeSupport) New() types.Message {
	return NewSensorNoise()
}

func (t _SensorNoiseTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.ros_gz_interfaces__msg__SensorNoise
	return (unsafe.Pointer)(C.ros_gz_interfaces__msg__SensorNoise__create())
}

func (t _SensorNoiseTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.ros_gz_interfaces__msg__SensorNoise__destroy((*C.ros_gz_interfaces__msg__SensorNoise)(pointer_to_free))
}

func (t _SensorNoiseTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*SensorNoise)
	mem := (*C.ros_gz_interfaces__msg__SensorNoise)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	mem._type = C.uint8_t(m.Type)
	mem.mean = C.double(m.Mean)
	mem.stddev = C.double(m.Stddev)
	mem.bias_mean = C.double(m.BiasMean)
	mem.bias_stddev = C.double(m.BiasStddev)
	mem.precision = C.double(m.Precision)
	mem.dynamic_bias_stddev = C.double(m.DynamicBiasStddev)
	mem.dynamic_bias_correlation_time = C.double(m.DynamicBiasCorrelationTime)
}

func (t _SensorNoiseTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*SensorNoise)
	mem := (*C.ros_gz_interfaces__msg__SensorNoise)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	m.Type = uint8(mem._type)
	m.Mean = float64(mem.mean)
	m.Stddev = float64(mem.stddev)
	m.BiasMean = float64(mem.bias_mean)
	m.BiasStddev = float64(mem.bias_stddev)
	m.Precision = float64(mem.precision)
	m.DynamicBiasStddev = float64(mem.dynamic_bias_stddev)
	m.DynamicBiasCorrelationTime = float64(mem.dynamic_bias_correlation_time)
}

func (t _SensorNoiseTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__ros_gz_interfaces__msg__SensorNoise())
}

type CSensorNoise = C.ros_gz_interfaces__msg__SensorNoise
type CSensorNoise__Sequence = C.ros_gz_interfaces__msg__SensorNoise__Sequence

func SensorNoise__Sequence_to_Go(goSlice *[]SensorNoise, cSlice CSensorNoise__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]SensorNoise, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		SensorNoiseTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func SensorNoise__Sequence_to_C(cSlice *CSensorNoise__Sequence, goSlice []SensorNoise) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.ros_gz_interfaces__msg__SensorNoise)(C.malloc(C.sizeof_struct_ros_gz_interfaces__msg__SensorNoise * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		SensorNoiseTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func SensorNoise__Array_to_Go(goSlice []SensorNoise, cSlice []CSensorNoise) {
	for i := 0; i < len(cSlice); i++ {
		SensorNoiseTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func SensorNoise__Array_to_C(cSlice []CSensorNoise, goSlice []SensorNoise) {
	for i := 0; i < len(goSlice); i++ {
		SensorNoiseTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
