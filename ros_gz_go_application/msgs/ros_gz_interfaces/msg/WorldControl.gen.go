// Code generated by rclgo-gen. DO NOT EDIT.

package ros_gz_interfaces_msg
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	builtin_interfaces_msg "github.com/iema-group/goros2/msgs/builtin_interfaces/msg"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <ros_gz_interfaces/msg/world_control.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("ros_gz_interfaces/WorldControl", WorldControlTypeSupport)
	typemap.RegisterMessage("ros_gz_interfaces/msg/WorldControl", WorldControlTypeSupport)
}

type WorldControl struct {
	Pause bool `yaml:"pause" json:"pause" mapstructure:"pause"`// Paused state.
	Step bool `yaml:"step" json:"step" mapstructure:"step"`
	MultiStep uint32 `yaml:"multi_step" json:"multi_step" mapstructure:"multi_step"`// Paused after stepping multi_step.
	Reset WorldReset `yaml:"reset" json:"reset" mapstructure:"reset"`
	Seed uint32 `yaml:"seed" json:"seed" mapstructure:"seed"`
	RunToSimTime builtin_interfaces_msg.Time `yaml:"run_to_sim_time" json:"run_to_sim_time" mapstructure:"run_to_sim_time"`// A simulation time in the future to run to and
}

// NewWorldControl creates a new WorldControl with default values.
func NewWorldControl() *WorldControl {
	self := WorldControl{}
	self.SetDefaults()
	return &self
}

func (t *WorldControl) Clone() *WorldControl {
	c := &WorldControl{}
	c.Pause = t.Pause
	c.Step = t.Step
	c.MultiStep = t.MultiStep
	c.Reset = *t.Reset.Clone()
	c.Seed = t.Seed
	c.RunToSimTime = *t.RunToSimTime.Clone()
	return c
}

func (t *WorldControl) CloneMsg() types.Message {
	return t.Clone()
}

func (t *WorldControl) SetDefaults() {
	t.Pause = false
	t.Step = false
	t.MultiStep = 0                        
	t.Reset.SetDefaults()
	t.Seed = 0
	t.RunToSimTime.SetDefaults()
}

func (t *WorldControl) GetTypeSupport() types.MessageTypeSupport {
	return WorldControlTypeSupport
}

// WorldControlPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type WorldControlPublisher struct {
	*rclgo.Publisher
}

// NewWorldControlPublisher creates and returns a new publisher for the
// WorldControl
func NewWorldControlPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*WorldControlPublisher, error) {
	pub, err := node.NewPublisher(topic_name, WorldControlTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &WorldControlPublisher{pub}, nil
}

func (p *WorldControlPublisher) Publish(msg *WorldControl) error {
	return p.Publisher.Publish(msg)
}

// WorldControlSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type WorldControlSubscription struct {
	*rclgo.Subscription
}

// WorldControlSubscriptionCallback type is used to provide a subscription
// handler function for a WorldControlSubscription.
type WorldControlSubscriptionCallback func(msg *WorldControl, info *rclgo.MessageInfo, err error)

// NewWorldControlSubscription creates and returns a new subscription for the
// WorldControl
func NewWorldControlSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback WorldControlSubscriptionCallback) (*WorldControlSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg WorldControl
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, WorldControlTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &WorldControlSubscription{sub}, nil
}

func (s *WorldControlSubscription) TakeMessage(out *WorldControl) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneWorldControlSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneWorldControlSlice(dst, src []WorldControl) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var WorldControlTypeSupport types.MessageTypeSupport = _WorldControlTypeSupport{}

type _WorldControlTypeSupport struct{}

func (t _WorldControlTypeSupport) New() types.Message {
	return NewWorldControl()
}

func (t _WorldControlTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.ros_gz_interfaces__msg__WorldControl
	return (unsafe.Pointer)(C.ros_gz_interfaces__msg__WorldControl__create())
}

func (t _WorldControlTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.ros_gz_interfaces__msg__WorldControl__destroy((*C.ros_gz_interfaces__msg__WorldControl)(pointer_to_free))
}

func (t _WorldControlTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*WorldControl)
	mem := (*C.ros_gz_interfaces__msg__WorldControl)(dst)
	mem.pause = C.bool(m.Pause)
	mem.step = C.bool(m.Step)
	mem.multi_step = C.uint32_t(m.MultiStep)
	WorldResetTypeSupport.AsCStruct(unsafe.Pointer(&mem.reset), &m.Reset)
	mem.seed = C.uint32_t(m.Seed)
	builtin_interfaces_msg.TimeTypeSupport.AsCStruct(unsafe.Pointer(&mem.run_to_sim_time), &m.RunToSimTime)
}

func (t _WorldControlTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*WorldControl)
	mem := (*C.ros_gz_interfaces__msg__WorldControl)(ros2_message_buffer)
	m.Pause = bool(mem.pause)
	m.Step = bool(mem.step)
	m.MultiStep = uint32(mem.multi_step)
	WorldResetTypeSupport.AsGoStruct(&m.Reset, unsafe.Pointer(&mem.reset))
	m.Seed = uint32(mem.seed)
	builtin_interfaces_msg.TimeTypeSupport.AsGoStruct(&m.RunToSimTime, unsafe.Pointer(&mem.run_to_sim_time))
}

func (t _WorldControlTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__ros_gz_interfaces__msg__WorldControl())
}

type CWorldControl = C.ros_gz_interfaces__msg__WorldControl
type CWorldControl__Sequence = C.ros_gz_interfaces__msg__WorldControl__Sequence

func WorldControl__Sequence_to_Go(goSlice *[]WorldControl, cSlice CWorldControl__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]WorldControl, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		WorldControlTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func WorldControl__Sequence_to_C(cSlice *CWorldControl__Sequence, goSlice []WorldControl) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.ros_gz_interfaces__msg__WorldControl)(C.malloc(C.sizeof_struct_ros_gz_interfaces__msg__WorldControl * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		WorldControlTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func WorldControl__Array_to_Go(goSlice []WorldControl, cSlice []CWorldControl) {
	for i := 0; i < len(cSlice); i++ {
		WorldControlTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func WorldControl__Array_to_C(cSlice []CWorldControl, goSlice []WorldControl) {
	for i := 0; i < len(goSlice); i++ {
		WorldControlTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
