// Code generated by rclgo-gen. DO NOT EDIT.

package ros_gz_interfaces_msg
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <ros_gz_interfaces/msg/world_reset.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("ros_gz_interfaces/WorldReset", WorldResetTypeSupport)
	typemap.RegisterMessage("ros_gz_interfaces/msg/WorldReset", WorldResetTypeSupport)
}

type WorldReset struct {
	All bool `yaml:"all" json:"all" mapstructure:"all"`// Reset time and model
	TimeOnly bool `yaml:"time_only" json:"time_only" mapstructure:"time_only"`// Reset time only
	ModelOnly bool `yaml:"model_only" json:"model_only" mapstructure:"model_only"`// Reset model only
}

// NewWorldReset creates a new WorldReset with default values.
func NewWorldReset() *WorldReset {
	self := WorldReset{}
	self.SetDefaults()
	return &self
}

func (t *WorldReset) Clone() *WorldReset {
	c := &WorldReset{}
	c.All = t.All
	c.TimeOnly = t.TimeOnly
	c.ModelOnly = t.ModelOnly
	return c
}

func (t *WorldReset) CloneMsg() types.Message {
	return t.Clone()
}

func (t *WorldReset) SetDefaults() {
	t.All = false           
	t.TimeOnly = false     
	t.ModelOnly = false    
}

func (t *WorldReset) GetTypeSupport() types.MessageTypeSupport {
	return WorldResetTypeSupport
}

// WorldResetPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type WorldResetPublisher struct {
	*rclgo.Publisher
}

// NewWorldResetPublisher creates and returns a new publisher for the
// WorldReset
func NewWorldResetPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*WorldResetPublisher, error) {
	pub, err := node.NewPublisher(topic_name, WorldResetTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &WorldResetPublisher{pub}, nil
}

func (p *WorldResetPublisher) Publish(msg *WorldReset) error {
	return p.Publisher.Publish(msg)
}

// WorldResetSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type WorldResetSubscription struct {
	*rclgo.Subscription
}

// WorldResetSubscriptionCallback type is used to provide a subscription
// handler function for a WorldResetSubscription.
type WorldResetSubscriptionCallback func(msg *WorldReset, info *rclgo.MessageInfo, err error)

// NewWorldResetSubscription creates and returns a new subscription for the
// WorldReset
func NewWorldResetSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback WorldResetSubscriptionCallback) (*WorldResetSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg WorldReset
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, WorldResetTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &WorldResetSubscription{sub}, nil
}

func (s *WorldResetSubscription) TakeMessage(out *WorldReset) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneWorldResetSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneWorldResetSlice(dst, src []WorldReset) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var WorldResetTypeSupport types.MessageTypeSupport = _WorldResetTypeSupport{}

type _WorldResetTypeSupport struct{}

func (t _WorldResetTypeSupport) New() types.Message {
	return NewWorldReset()
}

func (t _WorldResetTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.ros_gz_interfaces__msg__WorldReset
	return (unsafe.Pointer)(C.ros_gz_interfaces__msg__WorldReset__create())
}

func (t _WorldResetTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.ros_gz_interfaces__msg__WorldReset__destroy((*C.ros_gz_interfaces__msg__WorldReset)(pointer_to_free))
}

func (t _WorldResetTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*WorldReset)
	mem := (*C.ros_gz_interfaces__msg__WorldReset)(dst)
	mem.all = C.bool(m.All)
	mem.time_only = C.bool(m.TimeOnly)
	mem.model_only = C.bool(m.ModelOnly)
}

func (t _WorldResetTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*WorldReset)
	mem := (*C.ros_gz_interfaces__msg__WorldReset)(ros2_message_buffer)
	m.All = bool(mem.all)
	m.TimeOnly = bool(mem.time_only)
	m.ModelOnly = bool(mem.model_only)
}

func (t _WorldResetTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__ros_gz_interfaces__msg__WorldReset())
}

type CWorldReset = C.ros_gz_interfaces__msg__WorldReset
type CWorldReset__Sequence = C.ros_gz_interfaces__msg__WorldReset__Sequence

func WorldReset__Sequence_to_Go(goSlice *[]WorldReset, cSlice CWorldReset__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]WorldReset, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		WorldResetTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func WorldReset__Sequence_to_C(cSlice *CWorldReset__Sequence, goSlice []WorldReset) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.ros_gz_interfaces__msg__WorldReset)(C.malloc(C.sizeof_struct_ros_gz_interfaces__msg__WorldReset * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		WorldResetTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func WorldReset__Array_to_Go(goSlice []WorldReset, cSlice []CWorldReset) {
	for i := 0; i < len(cSlice); i++ {
		WorldResetTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func WorldReset__Array_to_C(cSlice []CWorldReset, goSlice []WorldReset) {
	for i := 0; i < len(goSlice); i++ {
		WorldResetTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
