// Code generated by rclgo-gen. DO NOT EDIT.

package ros_gz_interfaces_srv
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	ros_gz_interfaces_msg "github.com/iema-group/goros2/msgs/ros_gz_interfaces/msg"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <ros_gz_interfaces/srv/control_world.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("ros_gz_interfaces/ControlWorld_Request", ControlWorld_RequestTypeSupport)
	typemap.RegisterMessage("ros_gz_interfaces/srv/ControlWorld_Request", ControlWorld_RequestTypeSupport)
}

type ControlWorld_Request struct {
	WorldControl ros_gz_interfaces_msg.WorldControl `yaml:"world_control" json:"world_control" mapstructure:"world_control"`// Message to Control world in Gazebo Sim
}

// NewControlWorld_Request creates a new ControlWorld_Request with default values.
func NewControlWorld_Request() *ControlWorld_Request {
	self := ControlWorld_Request{}
	self.SetDefaults()
	return &self
}

func (t *ControlWorld_Request) Clone() *ControlWorld_Request {
	c := &ControlWorld_Request{}
	c.WorldControl = *t.WorldControl.Clone()
	return c
}

func (t *ControlWorld_Request) CloneMsg() types.Message {
	return t.Clone()
}

func (t *ControlWorld_Request) SetDefaults() {
	t.WorldControl.SetDefaults()
}

func (t *ControlWorld_Request) GetTypeSupport() types.MessageTypeSupport {
	return ControlWorld_RequestTypeSupport
}

// ControlWorld_RequestPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type ControlWorld_RequestPublisher struct {
	*rclgo.Publisher
}

// NewControlWorld_RequestPublisher creates and returns a new publisher for the
// ControlWorld_Request
func NewControlWorld_RequestPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*ControlWorld_RequestPublisher, error) {
	pub, err := node.NewPublisher(topic_name, ControlWorld_RequestTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ControlWorld_RequestPublisher{pub}, nil
}

func (p *ControlWorld_RequestPublisher) Publish(msg *ControlWorld_Request) error {
	return p.Publisher.Publish(msg)
}

// ControlWorld_RequestSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type ControlWorld_RequestSubscription struct {
	*rclgo.Subscription
}

// ControlWorld_RequestSubscriptionCallback type is used to provide a subscription
// handler function for a ControlWorld_RequestSubscription.
type ControlWorld_RequestSubscriptionCallback func(msg *ControlWorld_Request, info *rclgo.MessageInfo, err error)

// NewControlWorld_RequestSubscription creates and returns a new subscription for the
// ControlWorld_Request
func NewControlWorld_RequestSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback ControlWorld_RequestSubscriptionCallback) (*ControlWorld_RequestSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg ControlWorld_Request
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, ControlWorld_RequestTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &ControlWorld_RequestSubscription{sub}, nil
}

func (s *ControlWorld_RequestSubscription) TakeMessage(out *ControlWorld_Request) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneControlWorld_RequestSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneControlWorld_RequestSlice(dst, src []ControlWorld_Request) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ControlWorld_RequestTypeSupport types.MessageTypeSupport = _ControlWorld_RequestTypeSupport{}

type _ControlWorld_RequestTypeSupport struct{}

func (t _ControlWorld_RequestTypeSupport) New() types.Message {
	return NewControlWorld_Request()
}

func (t _ControlWorld_RequestTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.ros_gz_interfaces__srv__ControlWorld_Request
	return (unsafe.Pointer)(C.ros_gz_interfaces__srv__ControlWorld_Request__create())
}

func (t _ControlWorld_RequestTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.ros_gz_interfaces__srv__ControlWorld_Request__destroy((*C.ros_gz_interfaces__srv__ControlWorld_Request)(pointer_to_free))
}

func (t _ControlWorld_RequestTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*ControlWorld_Request)
	mem := (*C.ros_gz_interfaces__srv__ControlWorld_Request)(dst)
	ros_gz_interfaces_msg.WorldControlTypeSupport.AsCStruct(unsafe.Pointer(&mem.world_control), &m.WorldControl)
}

func (t _ControlWorld_RequestTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*ControlWorld_Request)
	mem := (*C.ros_gz_interfaces__srv__ControlWorld_Request)(ros2_message_buffer)
	ros_gz_interfaces_msg.WorldControlTypeSupport.AsGoStruct(&m.WorldControl, unsafe.Pointer(&mem.world_control))
}

func (t _ControlWorld_RequestTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__ros_gz_interfaces__srv__ControlWorld_Request())
}

type CControlWorld_Request = C.ros_gz_interfaces__srv__ControlWorld_Request
type CControlWorld_Request__Sequence = C.ros_gz_interfaces__srv__ControlWorld_Request__Sequence

func ControlWorld_Request__Sequence_to_Go(goSlice *[]ControlWorld_Request, cSlice CControlWorld_Request__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]ControlWorld_Request, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		ControlWorld_RequestTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func ControlWorld_Request__Sequence_to_C(cSlice *CControlWorld_Request__Sequence, goSlice []ControlWorld_Request) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.ros_gz_interfaces__srv__ControlWorld_Request)(C.malloc(C.sizeof_struct_ros_gz_interfaces__srv__ControlWorld_Request * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		ControlWorld_RequestTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func ControlWorld_Request__Array_to_Go(goSlice []ControlWorld_Request, cSlice []CControlWorld_Request) {
	for i := 0; i < len(cSlice); i++ {
		ControlWorld_RequestTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func ControlWorld_Request__Array_to_C(cSlice []CControlWorld_Request, goSlice []ControlWorld_Request) {
	for i := 0; i < len(goSlice); i++ {
		ControlWorld_RequestTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
