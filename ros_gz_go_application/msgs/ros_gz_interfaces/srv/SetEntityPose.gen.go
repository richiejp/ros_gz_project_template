// Code generated by rclgo-gen. DO NOT EDIT.

package ros_gz_interfaces_srv

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <ros_gz_interfaces/srv/set_entity_pose.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
)

func init() {
	typemap.RegisterService("ros_gz_interfaces/SetEntityPose", SetEntityPoseTypeSupport)
	typemap.RegisterService("ros_gz_interfaces/srv/SetEntityPose", SetEntityPoseTypeSupport)
}

type _SetEntityPoseTypeSupport struct {}

func (s _SetEntityPoseTypeSupport) Request() types.MessageTypeSupport {
	return SetEntityPose_RequestTypeSupport
}

func (s _SetEntityPoseTypeSupport) Response() types.MessageTypeSupport {
	return SetEntityPose_ResponseTypeSupport
}

func (s _SetEntityPoseTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__ros_gz_interfaces__srv__SetEntityPose())
}

// Modifying this variable is undefined behavior.
var SetEntityPoseTypeSupport types.ServiceTypeSupport = _SetEntityPoseTypeSupport{}

// SetEntityPoseClient wraps rclgo.Client to provide type safe helper
// functions
type SetEntityPoseClient struct {
	*rclgo.Client
}

// NewSetEntityPoseClient creates and returns a new client for the
// SetEntityPose
func NewSetEntityPoseClient(node *rclgo.Node, serviceName string, options *rclgo.ClientOptions) (*SetEntityPoseClient, error) {
	client, err := node.NewClient(serviceName, SetEntityPoseTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &SetEntityPoseClient{client}, nil
}

func (s *SetEntityPoseClient) Send(ctx context.Context, req *SetEntityPose_Request) (*SetEntityPose_Response, *rclgo.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*SetEntityPose_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type SetEntityPoseServiceResponseSender struct {
	sender rclgo.ServiceResponseSender
}

func (s SetEntityPoseServiceResponseSender) SendResponse(resp *SetEntityPose_Response) error {
	return s.sender.SendResponse(resp)
}

type SetEntityPoseServiceRequestHandler func(*rclgo.ServiceInfo, *SetEntityPose_Request, SetEntityPoseServiceResponseSender)

// SetEntityPoseService wraps rclgo.Service to provide type safe helper
// functions
type SetEntityPoseService struct {
	*rclgo.Service
}

// NewSetEntityPoseService creates and returns a new service for the
// SetEntityPose
func NewSetEntityPoseService(node *rclgo.Node, name string, options *rclgo.ServiceOptions, handler SetEntityPoseServiceRequestHandler) (*SetEntityPoseService, error) {
	h := func(rmw *rclgo.ServiceInfo, msg types.Message, rs rclgo.ServiceResponseSender) {
		m := msg.(*SetEntityPose_Request)
		responseSender := SetEntityPoseServiceResponseSender{sender: rs}
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, SetEntityPoseTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &SetEntityPoseService{service}, nil
}
