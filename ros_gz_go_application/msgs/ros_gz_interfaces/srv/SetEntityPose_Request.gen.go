// Code generated by rclgo-gen. DO NOT EDIT.

package ros_gz_interfaces_srv
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	geometry_msgs_msg "github.com/iema-group/goros2/msgs/geometry_msgs/msg"
	ros_gz_interfaces_msg "github.com/iema-group/goros2/msgs/ros_gz_interfaces/msg"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <ros_gz_interfaces/srv/set_entity_pose.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("ros_gz_interfaces/SetEntityPose_Request", SetEntityPose_RequestTypeSupport)
	typemap.RegisterMessage("ros_gz_interfaces/srv/SetEntityPose_Request", SetEntityPose_RequestTypeSupport)
}

type SetEntityPose_Request struct {
	Entity ros_gz_interfaces_msg.Entity `yaml:"entity" json:"entity" mapstructure:"entity"`// Gazebo Sim entity.
	Pose geometry_msgs_msg.Pose `yaml:"pose" json:"pose" mapstructure:"pose"`// Pose of entity.
}

// NewSetEntityPose_Request creates a new SetEntityPose_Request with default values.
func NewSetEntityPose_Request() *SetEntityPose_Request {
	self := SetEntityPose_Request{}
	self.SetDefaults()
	return &self
}

func (t *SetEntityPose_Request) Clone() *SetEntityPose_Request {
	c := &SetEntityPose_Request{}
	c.Entity = *t.Entity.Clone()
	c.Pose = *t.Pose.Clone()
	return c
}

func (t *SetEntityPose_Request) CloneMsg() types.Message {
	return t.Clone()
}

func (t *SetEntityPose_Request) SetDefaults() {
	t.Entity.SetDefaults()
	t.Pose.SetDefaults()
}

func (t *SetEntityPose_Request) GetTypeSupport() types.MessageTypeSupport {
	return SetEntityPose_RequestTypeSupport
}

// SetEntityPose_RequestPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type SetEntityPose_RequestPublisher struct {
	*rclgo.Publisher
}

// NewSetEntityPose_RequestPublisher creates and returns a new publisher for the
// SetEntityPose_Request
func NewSetEntityPose_RequestPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*SetEntityPose_RequestPublisher, error) {
	pub, err := node.NewPublisher(topic_name, SetEntityPose_RequestTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &SetEntityPose_RequestPublisher{pub}, nil
}

func (p *SetEntityPose_RequestPublisher) Publish(msg *SetEntityPose_Request) error {
	return p.Publisher.Publish(msg)
}

// SetEntityPose_RequestSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type SetEntityPose_RequestSubscription struct {
	*rclgo.Subscription
}

// SetEntityPose_RequestSubscriptionCallback type is used to provide a subscription
// handler function for a SetEntityPose_RequestSubscription.
type SetEntityPose_RequestSubscriptionCallback func(msg *SetEntityPose_Request, info *rclgo.MessageInfo, err error)

// NewSetEntityPose_RequestSubscription creates and returns a new subscription for the
// SetEntityPose_Request
func NewSetEntityPose_RequestSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback SetEntityPose_RequestSubscriptionCallback) (*SetEntityPose_RequestSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg SetEntityPose_Request
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, SetEntityPose_RequestTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &SetEntityPose_RequestSubscription{sub}, nil
}

func (s *SetEntityPose_RequestSubscription) TakeMessage(out *SetEntityPose_Request) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneSetEntityPose_RequestSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneSetEntityPose_RequestSlice(dst, src []SetEntityPose_Request) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var SetEntityPose_RequestTypeSupport types.MessageTypeSupport = _SetEntityPose_RequestTypeSupport{}

type _SetEntityPose_RequestTypeSupport struct{}

func (t _SetEntityPose_RequestTypeSupport) New() types.Message {
	return NewSetEntityPose_Request()
}

func (t _SetEntityPose_RequestTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.ros_gz_interfaces__srv__SetEntityPose_Request
	return (unsafe.Pointer)(C.ros_gz_interfaces__srv__SetEntityPose_Request__create())
}

func (t _SetEntityPose_RequestTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.ros_gz_interfaces__srv__SetEntityPose_Request__destroy((*C.ros_gz_interfaces__srv__SetEntityPose_Request)(pointer_to_free))
}

func (t _SetEntityPose_RequestTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*SetEntityPose_Request)
	mem := (*C.ros_gz_interfaces__srv__SetEntityPose_Request)(dst)
	ros_gz_interfaces_msg.EntityTypeSupport.AsCStruct(unsafe.Pointer(&mem.entity), &m.Entity)
	geometry_msgs_msg.PoseTypeSupport.AsCStruct(unsafe.Pointer(&mem.pose), &m.Pose)
}

func (t _SetEntityPose_RequestTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*SetEntityPose_Request)
	mem := (*C.ros_gz_interfaces__srv__SetEntityPose_Request)(ros2_message_buffer)
	ros_gz_interfaces_msg.EntityTypeSupport.AsGoStruct(&m.Entity, unsafe.Pointer(&mem.entity))
	geometry_msgs_msg.PoseTypeSupport.AsGoStruct(&m.Pose, unsafe.Pointer(&mem.pose))
}

func (t _SetEntityPose_RequestTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__ros_gz_interfaces__srv__SetEntityPose_Request())
}

type CSetEntityPose_Request = C.ros_gz_interfaces__srv__SetEntityPose_Request
type CSetEntityPose_Request__Sequence = C.ros_gz_interfaces__srv__SetEntityPose_Request__Sequence

func SetEntityPose_Request__Sequence_to_Go(goSlice *[]SetEntityPose_Request, cSlice CSetEntityPose_Request__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]SetEntityPose_Request, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		SetEntityPose_RequestTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func SetEntityPose_Request__Sequence_to_C(cSlice *CSetEntityPose_Request__Sequence, goSlice []SetEntityPose_Request) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.ros_gz_interfaces__srv__SetEntityPose_Request)(C.malloc(C.sizeof_struct_ros_gz_interfaces__srv__SetEntityPose_Request * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		SetEntityPose_RequestTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func SetEntityPose_Request__Array_to_Go(goSlice []SetEntityPose_Request, cSlice []CSetEntityPose_Request) {
	for i := 0; i < len(cSlice); i++ {
		SetEntityPose_RequestTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func SetEntityPose_Request__Array_to_C(cSlice []CSetEntityPose_Request, goSlice []SetEntityPose_Request) {
	for i := 0; i < len(goSlice); i++ {
		SetEntityPose_RequestTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
