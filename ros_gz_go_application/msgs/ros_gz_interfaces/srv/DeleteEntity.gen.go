// Code generated by rclgo-gen. DO NOT EDIT.

package ros_gz_interfaces_srv

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <ros_gz_interfaces/srv/delete_entity.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
)

func init() {
	typemap.RegisterService("ros_gz_interfaces/DeleteEntity", DeleteEntityTypeSupport)
	typemap.RegisterService("ros_gz_interfaces/srv/DeleteEntity", DeleteEntityTypeSupport)
}

type _DeleteEntityTypeSupport struct {}

func (s _DeleteEntityTypeSupport) Request() types.MessageTypeSupport {
	return DeleteEntity_RequestTypeSupport
}

func (s _DeleteEntityTypeSupport) Response() types.MessageTypeSupport {
	return DeleteEntity_ResponseTypeSupport
}

func (s _DeleteEntityTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__ros_gz_interfaces__srv__DeleteEntity())
}

// Modifying this variable is undefined behavior.
var DeleteEntityTypeSupport types.ServiceTypeSupport = _DeleteEntityTypeSupport{}

// DeleteEntityClient wraps rclgo.Client to provide type safe helper
// functions
type DeleteEntityClient struct {
	*rclgo.Client
}

// NewDeleteEntityClient creates and returns a new client for the
// DeleteEntity
func NewDeleteEntityClient(node *rclgo.Node, serviceName string, options *rclgo.ClientOptions) (*DeleteEntityClient, error) {
	client, err := node.NewClient(serviceName, DeleteEntityTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &DeleteEntityClient{client}, nil
}

func (s *DeleteEntityClient) Send(ctx context.Context, req *DeleteEntity_Request) (*DeleteEntity_Response, *rclgo.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*DeleteEntity_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type DeleteEntityServiceResponseSender struct {
	sender rclgo.ServiceResponseSender
}

func (s DeleteEntityServiceResponseSender) SendResponse(resp *DeleteEntity_Response) error {
	return s.sender.SendResponse(resp)
}

type DeleteEntityServiceRequestHandler func(*rclgo.ServiceInfo, *DeleteEntity_Request, DeleteEntityServiceResponseSender)

// DeleteEntityService wraps rclgo.Service to provide type safe helper
// functions
type DeleteEntityService struct {
	*rclgo.Service
}

// NewDeleteEntityService creates and returns a new service for the
// DeleteEntity
func NewDeleteEntityService(node *rclgo.Node, name string, options *rclgo.ServiceOptions, handler DeleteEntityServiceRequestHandler) (*DeleteEntityService, error) {
	h := func(rmw *rclgo.ServiceInfo, msg types.Message, rs rclgo.ServiceResponseSender) {
		m := msg.(*DeleteEntity_Request)
		responseSender := DeleteEntityServiceResponseSender{sender: rs}
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, DeleteEntityTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &DeleteEntityService{service}, nil
}
