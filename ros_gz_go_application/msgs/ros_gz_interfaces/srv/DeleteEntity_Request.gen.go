// Code generated by rclgo-gen. DO NOT EDIT.

package ros_gz_interfaces_srv
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	ros_gz_interfaces_msg "github.com/iema-group/goros2/msgs/ros_gz_interfaces/msg"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <ros_gz_interfaces/srv/delete_entity.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("ros_gz_interfaces/DeleteEntity_Request", DeleteEntity_RequestTypeSupport)
	typemap.RegisterMessage("ros_gz_interfaces/srv/DeleteEntity_Request", DeleteEntity_RequestTypeSupport)
}

type DeleteEntity_Request struct {
	Entity ros_gz_interfaces_msg.Entity `yaml:"entity" json:"entity" mapstructure:"entity"`// Gazebo Sim entity to be deleted.
}

// NewDeleteEntity_Request creates a new DeleteEntity_Request with default values.
func NewDeleteEntity_Request() *DeleteEntity_Request {
	self := DeleteEntity_Request{}
	self.SetDefaults()
	return &self
}

func (t *DeleteEntity_Request) Clone() *DeleteEntity_Request {
	c := &DeleteEntity_Request{}
	c.Entity = *t.Entity.Clone()
	return c
}

func (t *DeleteEntity_Request) CloneMsg() types.Message {
	return t.Clone()
}

func (t *DeleteEntity_Request) SetDefaults() {
	t.Entity.SetDefaults()
}

func (t *DeleteEntity_Request) GetTypeSupport() types.MessageTypeSupport {
	return DeleteEntity_RequestTypeSupport
}

// DeleteEntity_RequestPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type DeleteEntity_RequestPublisher struct {
	*rclgo.Publisher
}

// NewDeleteEntity_RequestPublisher creates and returns a new publisher for the
// DeleteEntity_Request
func NewDeleteEntity_RequestPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*DeleteEntity_RequestPublisher, error) {
	pub, err := node.NewPublisher(topic_name, DeleteEntity_RequestTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &DeleteEntity_RequestPublisher{pub}, nil
}

func (p *DeleteEntity_RequestPublisher) Publish(msg *DeleteEntity_Request) error {
	return p.Publisher.Publish(msg)
}

// DeleteEntity_RequestSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type DeleteEntity_RequestSubscription struct {
	*rclgo.Subscription
}

// DeleteEntity_RequestSubscriptionCallback type is used to provide a subscription
// handler function for a DeleteEntity_RequestSubscription.
type DeleteEntity_RequestSubscriptionCallback func(msg *DeleteEntity_Request, info *rclgo.MessageInfo, err error)

// NewDeleteEntity_RequestSubscription creates and returns a new subscription for the
// DeleteEntity_Request
func NewDeleteEntity_RequestSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback DeleteEntity_RequestSubscriptionCallback) (*DeleteEntity_RequestSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg DeleteEntity_Request
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, DeleteEntity_RequestTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &DeleteEntity_RequestSubscription{sub}, nil
}

func (s *DeleteEntity_RequestSubscription) TakeMessage(out *DeleteEntity_Request) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneDeleteEntity_RequestSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneDeleteEntity_RequestSlice(dst, src []DeleteEntity_Request) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var DeleteEntity_RequestTypeSupport types.MessageTypeSupport = _DeleteEntity_RequestTypeSupport{}

type _DeleteEntity_RequestTypeSupport struct{}

func (t _DeleteEntity_RequestTypeSupport) New() types.Message {
	return NewDeleteEntity_Request()
}

func (t _DeleteEntity_RequestTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.ros_gz_interfaces__srv__DeleteEntity_Request
	return (unsafe.Pointer)(C.ros_gz_interfaces__srv__DeleteEntity_Request__create())
}

func (t _DeleteEntity_RequestTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.ros_gz_interfaces__srv__DeleteEntity_Request__destroy((*C.ros_gz_interfaces__srv__DeleteEntity_Request)(pointer_to_free))
}

func (t _DeleteEntity_RequestTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*DeleteEntity_Request)
	mem := (*C.ros_gz_interfaces__srv__DeleteEntity_Request)(dst)
	ros_gz_interfaces_msg.EntityTypeSupport.AsCStruct(unsafe.Pointer(&mem.entity), &m.Entity)
}

func (t _DeleteEntity_RequestTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*DeleteEntity_Request)
	mem := (*C.ros_gz_interfaces__srv__DeleteEntity_Request)(ros2_message_buffer)
	ros_gz_interfaces_msg.EntityTypeSupport.AsGoStruct(&m.Entity, unsafe.Pointer(&mem.entity))
}

func (t _DeleteEntity_RequestTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__ros_gz_interfaces__srv__DeleteEntity_Request())
}

type CDeleteEntity_Request = C.ros_gz_interfaces__srv__DeleteEntity_Request
type CDeleteEntity_Request__Sequence = C.ros_gz_interfaces__srv__DeleteEntity_Request__Sequence

func DeleteEntity_Request__Sequence_to_Go(goSlice *[]DeleteEntity_Request, cSlice CDeleteEntity_Request__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]DeleteEntity_Request, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		DeleteEntity_RequestTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func DeleteEntity_Request__Sequence_to_C(cSlice *CDeleteEntity_Request__Sequence, goSlice []DeleteEntity_Request) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.ros_gz_interfaces__srv__DeleteEntity_Request)(C.malloc(C.sizeof_struct_ros_gz_interfaces__srv__DeleteEntity_Request * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		DeleteEntity_RequestTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func DeleteEntity_Request__Array_to_Go(goSlice []DeleteEntity_Request, cSlice []CDeleteEntity_Request) {
	for i := 0; i < len(cSlice); i++ {
		DeleteEntity_RequestTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func DeleteEntity_Request__Array_to_C(cSlice []CDeleteEntity_Request, goSlice []DeleteEntity_Request) {
	for i := 0; i < len(goSlice); i++ {
		DeleteEntity_RequestTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
