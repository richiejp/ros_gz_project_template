// Code generated by rclgo-gen. DO NOT EDIT.

package ros_gz_interfaces_srv
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	ros_gz_interfaces_msg "github.com/iema-group/goros2/msgs/ros_gz_interfaces/msg"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <ros_gz_interfaces/srv/spawn_entity.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("ros_gz_interfaces/SpawnEntity_Request", SpawnEntity_RequestTypeSupport)
	typemap.RegisterMessage("ros_gz_interfaces/srv/SpawnEntity_Request", SpawnEntity_RequestTypeSupport)
}

type SpawnEntity_Request struct {
	EntityFactory ros_gz_interfaces_msg.EntityFactory `yaml:"entity_factory" json:"entity_factory" mapstructure:"entity_factory"`// Message to create a new entity
}

// NewSpawnEntity_Request creates a new SpawnEntity_Request with default values.
func NewSpawnEntity_Request() *SpawnEntity_Request {
	self := SpawnEntity_Request{}
	self.SetDefaults()
	return &self
}

func (t *SpawnEntity_Request) Clone() *SpawnEntity_Request {
	c := &SpawnEntity_Request{}
	c.EntityFactory = *t.EntityFactory.Clone()
	return c
}

func (t *SpawnEntity_Request) CloneMsg() types.Message {
	return t.Clone()
}

func (t *SpawnEntity_Request) SetDefaults() {
	t.EntityFactory.SetDefaults()
}

func (t *SpawnEntity_Request) GetTypeSupport() types.MessageTypeSupport {
	return SpawnEntity_RequestTypeSupport
}

// SpawnEntity_RequestPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type SpawnEntity_RequestPublisher struct {
	*rclgo.Publisher
}

// NewSpawnEntity_RequestPublisher creates and returns a new publisher for the
// SpawnEntity_Request
func NewSpawnEntity_RequestPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*SpawnEntity_RequestPublisher, error) {
	pub, err := node.NewPublisher(topic_name, SpawnEntity_RequestTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &SpawnEntity_RequestPublisher{pub}, nil
}

func (p *SpawnEntity_RequestPublisher) Publish(msg *SpawnEntity_Request) error {
	return p.Publisher.Publish(msg)
}

// SpawnEntity_RequestSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type SpawnEntity_RequestSubscription struct {
	*rclgo.Subscription
}

// SpawnEntity_RequestSubscriptionCallback type is used to provide a subscription
// handler function for a SpawnEntity_RequestSubscription.
type SpawnEntity_RequestSubscriptionCallback func(msg *SpawnEntity_Request, info *rclgo.MessageInfo, err error)

// NewSpawnEntity_RequestSubscription creates and returns a new subscription for the
// SpawnEntity_Request
func NewSpawnEntity_RequestSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback SpawnEntity_RequestSubscriptionCallback) (*SpawnEntity_RequestSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg SpawnEntity_Request
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, SpawnEntity_RequestTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &SpawnEntity_RequestSubscription{sub}, nil
}

func (s *SpawnEntity_RequestSubscription) TakeMessage(out *SpawnEntity_Request) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneSpawnEntity_RequestSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneSpawnEntity_RequestSlice(dst, src []SpawnEntity_Request) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var SpawnEntity_RequestTypeSupport types.MessageTypeSupport = _SpawnEntity_RequestTypeSupport{}

type _SpawnEntity_RequestTypeSupport struct{}

func (t _SpawnEntity_RequestTypeSupport) New() types.Message {
	return NewSpawnEntity_Request()
}

func (t _SpawnEntity_RequestTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.ros_gz_interfaces__srv__SpawnEntity_Request
	return (unsafe.Pointer)(C.ros_gz_interfaces__srv__SpawnEntity_Request__create())
}

func (t _SpawnEntity_RequestTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.ros_gz_interfaces__srv__SpawnEntity_Request__destroy((*C.ros_gz_interfaces__srv__SpawnEntity_Request)(pointer_to_free))
}

func (t _SpawnEntity_RequestTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*SpawnEntity_Request)
	mem := (*C.ros_gz_interfaces__srv__SpawnEntity_Request)(dst)
	ros_gz_interfaces_msg.EntityFactoryTypeSupport.AsCStruct(unsafe.Pointer(&mem.entity_factory), &m.EntityFactory)
}

func (t _SpawnEntity_RequestTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*SpawnEntity_Request)
	mem := (*C.ros_gz_interfaces__srv__SpawnEntity_Request)(ros2_message_buffer)
	ros_gz_interfaces_msg.EntityFactoryTypeSupport.AsGoStruct(&m.EntityFactory, unsafe.Pointer(&mem.entity_factory))
}

func (t _SpawnEntity_RequestTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__ros_gz_interfaces__srv__SpawnEntity_Request())
}

type CSpawnEntity_Request = C.ros_gz_interfaces__srv__SpawnEntity_Request
type CSpawnEntity_Request__Sequence = C.ros_gz_interfaces__srv__SpawnEntity_Request__Sequence

func SpawnEntity_Request__Sequence_to_Go(goSlice *[]SpawnEntity_Request, cSlice CSpawnEntity_Request__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]SpawnEntity_Request, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		SpawnEntity_RequestTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func SpawnEntity_Request__Sequence_to_C(cSlice *CSpawnEntity_Request__Sequence, goSlice []SpawnEntity_Request) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.ros_gz_interfaces__srv__SpawnEntity_Request)(C.malloc(C.sizeof_struct_ros_gz_interfaces__srv__SpawnEntity_Request * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		SpawnEntity_RequestTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func SpawnEntity_Request__Array_to_Go(goSlice []SpawnEntity_Request, cSlice []CSpawnEntity_Request) {
	for i := 0; i < len(cSlice); i++ {
		SpawnEntity_RequestTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func SpawnEntity_Request__Array_to_C(cSlice []CSpawnEntity_Request, goSlice []SpawnEntity_Request) {
	for i := 0; i < len(goSlice); i++ {
		SpawnEntity_RequestTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
