// Code generated by rclgo-gen. DO NOT EDIT.

package ros_gz_interfaces_srv

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <ros_gz_interfaces/srv/control_world.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
)

func init() {
	typemap.RegisterService("ros_gz_interfaces/ControlWorld", ControlWorldTypeSupport)
	typemap.RegisterService("ros_gz_interfaces/srv/ControlWorld", ControlWorldTypeSupport)
}

type _ControlWorldTypeSupport struct {}

func (s _ControlWorldTypeSupport) Request() types.MessageTypeSupport {
	return ControlWorld_RequestTypeSupport
}

func (s _ControlWorldTypeSupport) Response() types.MessageTypeSupport {
	return ControlWorld_ResponseTypeSupport
}

func (s _ControlWorldTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__ros_gz_interfaces__srv__ControlWorld())
}

// Modifying this variable is undefined behavior.
var ControlWorldTypeSupport types.ServiceTypeSupport = _ControlWorldTypeSupport{}

// ControlWorldClient wraps rclgo.Client to provide type safe helper
// functions
type ControlWorldClient struct {
	*rclgo.Client
}

// NewControlWorldClient creates and returns a new client for the
// ControlWorld
func NewControlWorldClient(node *rclgo.Node, serviceName string, options *rclgo.ClientOptions) (*ControlWorldClient, error) {
	client, err := node.NewClient(serviceName, ControlWorldTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ControlWorldClient{client}, nil
}

func (s *ControlWorldClient) Send(ctx context.Context, req *ControlWorld_Request) (*ControlWorld_Response, *rclgo.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*ControlWorld_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type ControlWorldServiceResponseSender struct {
	sender rclgo.ServiceResponseSender
}

func (s ControlWorldServiceResponseSender) SendResponse(resp *ControlWorld_Response) error {
	return s.sender.SendResponse(resp)
}

type ControlWorldServiceRequestHandler func(*rclgo.ServiceInfo, *ControlWorld_Request, ControlWorldServiceResponseSender)

// ControlWorldService wraps rclgo.Service to provide type safe helper
// functions
type ControlWorldService struct {
	*rclgo.Service
}

// NewControlWorldService creates and returns a new service for the
// ControlWorld
func NewControlWorldService(node *rclgo.Node, name string, options *rclgo.ServiceOptions, handler ControlWorldServiceRequestHandler) (*ControlWorldService, error) {
	h := func(rmw *rclgo.ServiceInfo, msg types.Message, rs rclgo.ServiceResponseSender) {
		m := msg.(*ControlWorld_Request)
		responseSender := ControlWorldServiceResponseSender{sender: rs}
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, ControlWorldTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &ControlWorldService{service}, nil
}
