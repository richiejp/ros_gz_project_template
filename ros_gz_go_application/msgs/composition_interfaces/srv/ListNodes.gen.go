// Code generated by rclgo-gen. DO NOT EDIT.

package composition_interfaces_srv

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <composition_interfaces/srv/list_nodes.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
)

func init() {
	typemap.RegisterService("composition_interfaces/ListNodes", ListNodesTypeSupport)
	typemap.RegisterService("composition_interfaces/srv/ListNodes", ListNodesTypeSupport)
}

type _ListNodesTypeSupport struct {}

func (s _ListNodesTypeSupport) Request() types.MessageTypeSupport {
	return ListNodes_RequestTypeSupport
}

func (s _ListNodesTypeSupport) Response() types.MessageTypeSupport {
	return ListNodes_ResponseTypeSupport
}

func (s _ListNodesTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__composition_interfaces__srv__ListNodes())
}

// Modifying this variable is undefined behavior.
var ListNodesTypeSupport types.ServiceTypeSupport = _ListNodesTypeSupport{}

// ListNodesClient wraps rclgo.Client to provide type safe helper
// functions
type ListNodesClient struct {
	*rclgo.Client
}

// NewListNodesClient creates and returns a new client for the
// ListNodes
func NewListNodesClient(node *rclgo.Node, serviceName string, options *rclgo.ClientOptions) (*ListNodesClient, error) {
	client, err := node.NewClient(serviceName, ListNodesTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ListNodesClient{client}, nil
}

func (s *ListNodesClient) Send(ctx context.Context, req *ListNodes_Request) (*ListNodes_Response, *rclgo.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*ListNodes_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type ListNodesServiceResponseSender struct {
	sender rclgo.ServiceResponseSender
}

func (s ListNodesServiceResponseSender) SendResponse(resp *ListNodes_Response) error {
	return s.sender.SendResponse(resp)
}

type ListNodesServiceRequestHandler func(*rclgo.ServiceInfo, *ListNodes_Request, ListNodesServiceResponseSender)

// ListNodesService wraps rclgo.Service to provide type safe helper
// functions
type ListNodesService struct {
	*rclgo.Service
}

// NewListNodesService creates and returns a new service for the
// ListNodes
func NewListNodesService(node *rclgo.Node, name string, options *rclgo.ServiceOptions, handler ListNodesServiceRequestHandler) (*ListNodesService, error) {
	h := func(rmw *rclgo.ServiceInfo, msg types.Message, rs rclgo.ServiceResponseSender) {
		m := msg.(*ListNodes_Request)
		responseSender := ListNodesServiceResponseSender{sender: rs}
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, ListNodesTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &ListNodesService{service}, nil
}
