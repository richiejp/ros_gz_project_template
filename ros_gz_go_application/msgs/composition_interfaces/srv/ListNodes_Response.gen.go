// Code generated by rclgo-gen. DO NOT EDIT.

package composition_interfaces_srv
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	primitives "github.com/ATIinc/rclgo/pkg/rclgo/primitives"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <composition_interfaces/srv/list_nodes.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("composition_interfaces/ListNodes_Response", ListNodes_ResponseTypeSupport)
	typemap.RegisterMessage("composition_interfaces/srv/ListNodes_Response", ListNodes_ResponseTypeSupport)
}

type ListNodes_Response struct {
	FullNodeNames []string `yaml:"full_node_names" json:"full_node_names" mapstructure:"full_node_names"`// List of full node names including namespace.
	UniqueIds []uint64 `yaml:"unique_ids" json:"unique_ids" mapstructure:"unique_ids"`// corresponding unique ids (must have same length as full_node_names).
}

// NewListNodes_Response creates a new ListNodes_Response with default values.
func NewListNodes_Response() *ListNodes_Response {
	self := ListNodes_Response{}
	self.SetDefaults()
	return &self
}

func (t *ListNodes_Response) Clone() *ListNodes_Response {
	c := &ListNodes_Response{}
	if t.FullNodeNames != nil {
		c.FullNodeNames = make([]string, len(t.FullNodeNames))
		copy(c.FullNodeNames, t.FullNodeNames)
	}
	if t.UniqueIds != nil {
		c.UniqueIds = make([]uint64, len(t.UniqueIds))
		copy(c.UniqueIds, t.UniqueIds)
	}
	return c
}

func (t *ListNodes_Response) CloneMsg() types.Message {
	return t.Clone()
}

func (t *ListNodes_Response) SetDefaults() {
	t.FullNodeNames = nil
	t.UniqueIds = nil
}

func (t *ListNodes_Response) GetTypeSupport() types.MessageTypeSupport {
	return ListNodes_ResponseTypeSupport
}

// ListNodes_ResponsePublisher wraps rclgo.Publisher to provide type safe helper
// functions
type ListNodes_ResponsePublisher struct {
	*rclgo.Publisher
}

// NewListNodes_ResponsePublisher creates and returns a new publisher for the
// ListNodes_Response
func NewListNodes_ResponsePublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*ListNodes_ResponsePublisher, error) {
	pub, err := node.NewPublisher(topic_name, ListNodes_ResponseTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ListNodes_ResponsePublisher{pub}, nil
}

func (p *ListNodes_ResponsePublisher) Publish(msg *ListNodes_Response) error {
	return p.Publisher.Publish(msg)
}

// ListNodes_ResponseSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type ListNodes_ResponseSubscription struct {
	*rclgo.Subscription
}

// ListNodes_ResponseSubscriptionCallback type is used to provide a subscription
// handler function for a ListNodes_ResponseSubscription.
type ListNodes_ResponseSubscriptionCallback func(msg *ListNodes_Response, info *rclgo.MessageInfo, err error)

// NewListNodes_ResponseSubscription creates and returns a new subscription for the
// ListNodes_Response
func NewListNodes_ResponseSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback ListNodes_ResponseSubscriptionCallback) (*ListNodes_ResponseSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg ListNodes_Response
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, ListNodes_ResponseTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &ListNodes_ResponseSubscription{sub}, nil
}

func (s *ListNodes_ResponseSubscription) TakeMessage(out *ListNodes_Response) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneListNodes_ResponseSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneListNodes_ResponseSlice(dst, src []ListNodes_Response) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ListNodes_ResponseTypeSupport types.MessageTypeSupport = _ListNodes_ResponseTypeSupport{}

type _ListNodes_ResponseTypeSupport struct{}

func (t _ListNodes_ResponseTypeSupport) New() types.Message {
	return NewListNodes_Response()
}

func (t _ListNodes_ResponseTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.composition_interfaces__srv__ListNodes_Response
	return (unsafe.Pointer)(C.composition_interfaces__srv__ListNodes_Response__create())
}

func (t _ListNodes_ResponseTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.composition_interfaces__srv__ListNodes_Response__destroy((*C.composition_interfaces__srv__ListNodes_Response)(pointer_to_free))
}

func (t _ListNodes_ResponseTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*ListNodes_Response)
	mem := (*C.composition_interfaces__srv__ListNodes_Response)(dst)
	primitives.String__Sequence_to_C((*primitives.CString__Sequence)(unsafe.Pointer(&mem.full_node_names)), m.FullNodeNames)
	primitives.Uint64__Sequence_to_C((*primitives.CUint64__Sequence)(unsafe.Pointer(&mem.unique_ids)), m.UniqueIds)
}

func (t _ListNodes_ResponseTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*ListNodes_Response)
	mem := (*C.composition_interfaces__srv__ListNodes_Response)(ros2_message_buffer)
	primitives.String__Sequence_to_Go(&m.FullNodeNames, *(*primitives.CString__Sequence)(unsafe.Pointer(&mem.full_node_names)))
	primitives.Uint64__Sequence_to_Go(&m.UniqueIds, *(*primitives.CUint64__Sequence)(unsafe.Pointer(&mem.unique_ids)))
}

func (t _ListNodes_ResponseTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__composition_interfaces__srv__ListNodes_Response())
}

type CListNodes_Response = C.composition_interfaces__srv__ListNodes_Response
type CListNodes_Response__Sequence = C.composition_interfaces__srv__ListNodes_Response__Sequence

func ListNodes_Response__Sequence_to_Go(goSlice *[]ListNodes_Response, cSlice CListNodes_Response__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]ListNodes_Response, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		ListNodes_ResponseTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func ListNodes_Response__Sequence_to_C(cSlice *CListNodes_Response__Sequence, goSlice []ListNodes_Response) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.composition_interfaces__srv__ListNodes_Response)(C.malloc(C.sizeof_struct_composition_interfaces__srv__ListNodes_Response * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		ListNodes_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func ListNodes_Response__Array_to_Go(goSlice []ListNodes_Response, cSlice []CListNodes_Response) {
	for i := 0; i < len(cSlice); i++ {
		ListNodes_ResponseTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func ListNodes_Response__Array_to_C(cSlice []CListNodes_Response, goSlice []ListNodes_Response) {
	for i := 0; i < len(goSlice); i++ {
		ListNodes_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
