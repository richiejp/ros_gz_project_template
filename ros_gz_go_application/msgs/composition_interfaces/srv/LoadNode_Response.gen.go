// Code generated by rclgo-gen. DO NOT EDIT.

package composition_interfaces_srv
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	primitives "github.com/ATIinc/rclgo/pkg/rclgo/primitives"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <composition_interfaces/srv/load_node.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("composition_interfaces/LoadNode_Response", LoadNode_ResponseTypeSupport)
	typemap.RegisterMessage("composition_interfaces/srv/LoadNode_Response", LoadNode_ResponseTypeSupport)
}

type LoadNode_Response struct {
	Success bool `yaml:"success" json:"success" mapstructure:"success"`// True if the node was successfully loaded.
	ErrorMessage string `yaml:"error_message" json:"error_message" mapstructure:"error_message"`// Human readable error message if success is false, else empty string.
	FullNodeName string `yaml:"full_node_name" json:"full_node_name" mapstructure:"full_node_name"`// Name of the loaded composable node (including namespace).
	UniqueId uint64 `yaml:"unique_id" json:"unique_id" mapstructure:"unique_id"`// A unique identifier for the loaded node.
}

// NewLoadNode_Response creates a new LoadNode_Response with default values.
func NewLoadNode_Response() *LoadNode_Response {
	self := LoadNode_Response{}
	self.SetDefaults()
	return &self
}

func (t *LoadNode_Response) Clone() *LoadNode_Response {
	c := &LoadNode_Response{}
	c.Success = t.Success
	c.ErrorMessage = t.ErrorMessage
	c.FullNodeName = t.FullNodeName
	c.UniqueId = t.UniqueId
	return c
}

func (t *LoadNode_Response) CloneMsg() types.Message {
	return t.Clone()
}

func (t *LoadNode_Response) SetDefaults() {
	t.Success = false
	t.ErrorMessage = ""
	t.FullNodeName = ""
	t.UniqueId = 0
}

func (t *LoadNode_Response) GetTypeSupport() types.MessageTypeSupport {
	return LoadNode_ResponseTypeSupport
}

// LoadNode_ResponsePublisher wraps rclgo.Publisher to provide type safe helper
// functions
type LoadNode_ResponsePublisher struct {
	*rclgo.Publisher
}

// NewLoadNode_ResponsePublisher creates and returns a new publisher for the
// LoadNode_Response
func NewLoadNode_ResponsePublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*LoadNode_ResponsePublisher, error) {
	pub, err := node.NewPublisher(topic_name, LoadNode_ResponseTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &LoadNode_ResponsePublisher{pub}, nil
}

func (p *LoadNode_ResponsePublisher) Publish(msg *LoadNode_Response) error {
	return p.Publisher.Publish(msg)
}

// LoadNode_ResponseSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type LoadNode_ResponseSubscription struct {
	*rclgo.Subscription
}

// LoadNode_ResponseSubscriptionCallback type is used to provide a subscription
// handler function for a LoadNode_ResponseSubscription.
type LoadNode_ResponseSubscriptionCallback func(msg *LoadNode_Response, info *rclgo.MessageInfo, err error)

// NewLoadNode_ResponseSubscription creates and returns a new subscription for the
// LoadNode_Response
func NewLoadNode_ResponseSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback LoadNode_ResponseSubscriptionCallback) (*LoadNode_ResponseSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg LoadNode_Response
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, LoadNode_ResponseTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &LoadNode_ResponseSubscription{sub}, nil
}

func (s *LoadNode_ResponseSubscription) TakeMessage(out *LoadNode_Response) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneLoadNode_ResponseSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneLoadNode_ResponseSlice(dst, src []LoadNode_Response) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var LoadNode_ResponseTypeSupport types.MessageTypeSupport = _LoadNode_ResponseTypeSupport{}

type _LoadNode_ResponseTypeSupport struct{}

func (t _LoadNode_ResponseTypeSupport) New() types.Message {
	return NewLoadNode_Response()
}

func (t _LoadNode_ResponseTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.composition_interfaces__srv__LoadNode_Response
	return (unsafe.Pointer)(C.composition_interfaces__srv__LoadNode_Response__create())
}

func (t _LoadNode_ResponseTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.composition_interfaces__srv__LoadNode_Response__destroy((*C.composition_interfaces__srv__LoadNode_Response)(pointer_to_free))
}

func (t _LoadNode_ResponseTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*LoadNode_Response)
	mem := (*C.composition_interfaces__srv__LoadNode_Response)(dst)
	mem.success = C.bool(m.Success)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.error_message), m.ErrorMessage)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.full_node_name), m.FullNodeName)
	mem.unique_id = C.uint64_t(m.UniqueId)
}

func (t _LoadNode_ResponseTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*LoadNode_Response)
	mem := (*C.composition_interfaces__srv__LoadNode_Response)(ros2_message_buffer)
	m.Success = bool(mem.success)
	primitives.StringAsGoStruct(&m.ErrorMessage, unsafe.Pointer(&mem.error_message))
	primitives.StringAsGoStruct(&m.FullNodeName, unsafe.Pointer(&mem.full_node_name))
	m.UniqueId = uint64(mem.unique_id)
}

func (t _LoadNode_ResponseTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__composition_interfaces__srv__LoadNode_Response())
}

type CLoadNode_Response = C.composition_interfaces__srv__LoadNode_Response
type CLoadNode_Response__Sequence = C.composition_interfaces__srv__LoadNode_Response__Sequence

func LoadNode_Response__Sequence_to_Go(goSlice *[]LoadNode_Response, cSlice CLoadNode_Response__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]LoadNode_Response, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		LoadNode_ResponseTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func LoadNode_Response__Sequence_to_C(cSlice *CLoadNode_Response__Sequence, goSlice []LoadNode_Response) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.composition_interfaces__srv__LoadNode_Response)(C.malloc(C.sizeof_struct_composition_interfaces__srv__LoadNode_Response * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		LoadNode_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func LoadNode_Response__Array_to_Go(goSlice []LoadNode_Response, cSlice []CLoadNode_Response) {
	for i := 0; i < len(cSlice); i++ {
		LoadNode_ResponseTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func LoadNode_Response__Array_to_C(cSlice []CLoadNode_Response, goSlice []LoadNode_Response) {
	for i := 0; i < len(goSlice); i++ {
		LoadNode_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
