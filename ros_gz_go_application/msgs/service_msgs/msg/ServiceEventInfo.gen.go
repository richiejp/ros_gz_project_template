// Code generated by rclgo-gen. DO NOT EDIT.

package service_msgs_msg
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	primitives "github.com/ATIinc/rclgo/pkg/rclgo/primitives"
	builtin_interfaces_msg "github.com/iema-group/goros2/msgs/builtin_interfaces/msg"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <service_msgs/msg/service_event_info.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("service_msgs/ServiceEventInfo", ServiceEventInfoTypeSupport)
	typemap.RegisterMessage("service_msgs/msg/ServiceEventInfo", ServiceEventInfoTypeSupport)
}
const (
	ServiceEventInfo_REQUEST_SENT uint8 = 0
	ServiceEventInfo_REQUEST_RECEIVED uint8 = 1
	ServiceEventInfo_RESPONSE_SENT uint8 = 2
	ServiceEventInfo_RESPONSE_RECEIVED uint8 = 3
)

type ServiceEventInfo struct {
	EventType uint8 `yaml:"event_type" json:"event_type" mapstructure:"event_type"`// The type of event this message represents
	Stamp builtin_interfaces_msg.Time `yaml:"stamp" json:"stamp" mapstructure:"stamp"`// Timestamp for when the event occurred (sent or received time)
	ClientGid [16]byte `yaml:"client_gid" json:"client_gid" mapstructure:"client_gid"`// Unique identifier for the client that sent the service requestNote, this is only unique for the current session.The size here has to match the size of rmw_dds_common/msg/Gid,but unfortunately we cannot use that message directly due to acircular dependency.
	SequenceNumber int64 `yaml:"sequence_number" json:"sequence_number" mapstructure:"sequence_number"`// Sequence number for the requestCombined with the client ID, this creates a unique ID for the service transaction
}

// NewServiceEventInfo creates a new ServiceEventInfo with default values.
func NewServiceEventInfo() *ServiceEventInfo {
	self := ServiceEventInfo{}
	self.SetDefaults()
	return &self
}

func (t *ServiceEventInfo) Clone() *ServiceEventInfo {
	c := &ServiceEventInfo{}
	c.EventType = t.EventType
	c.Stamp = *t.Stamp.Clone()
	c.ClientGid = t.ClientGid
	c.SequenceNumber = t.SequenceNumber
	return c
}

func (t *ServiceEventInfo) CloneMsg() types.Message {
	return t.Clone()
}

func (t *ServiceEventInfo) SetDefaults() {
	t.EventType = 0
	t.Stamp.SetDefaults()
	t.ClientGid = [16]byte{}
	t.SequenceNumber = 0
}

func (t *ServiceEventInfo) GetTypeSupport() types.MessageTypeSupport {
	return ServiceEventInfoTypeSupport
}

// ServiceEventInfoPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type ServiceEventInfoPublisher struct {
	*rclgo.Publisher
}

// NewServiceEventInfoPublisher creates and returns a new publisher for the
// ServiceEventInfo
func NewServiceEventInfoPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*ServiceEventInfoPublisher, error) {
	pub, err := node.NewPublisher(topic_name, ServiceEventInfoTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ServiceEventInfoPublisher{pub}, nil
}

func (p *ServiceEventInfoPublisher) Publish(msg *ServiceEventInfo) error {
	return p.Publisher.Publish(msg)
}

// ServiceEventInfoSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type ServiceEventInfoSubscription struct {
	*rclgo.Subscription
}

// ServiceEventInfoSubscriptionCallback type is used to provide a subscription
// handler function for a ServiceEventInfoSubscription.
type ServiceEventInfoSubscriptionCallback func(msg *ServiceEventInfo, info *rclgo.MessageInfo, err error)

// NewServiceEventInfoSubscription creates and returns a new subscription for the
// ServiceEventInfo
func NewServiceEventInfoSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback ServiceEventInfoSubscriptionCallback) (*ServiceEventInfoSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg ServiceEventInfo
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, ServiceEventInfoTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &ServiceEventInfoSubscription{sub}, nil
}

func (s *ServiceEventInfoSubscription) TakeMessage(out *ServiceEventInfo) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneServiceEventInfoSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneServiceEventInfoSlice(dst, src []ServiceEventInfo) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ServiceEventInfoTypeSupport types.MessageTypeSupport = _ServiceEventInfoTypeSupport{}

type _ServiceEventInfoTypeSupport struct{}

func (t _ServiceEventInfoTypeSupport) New() types.Message {
	return NewServiceEventInfo()
}

func (t _ServiceEventInfoTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.service_msgs__msg__ServiceEventInfo
	return (unsafe.Pointer)(C.service_msgs__msg__ServiceEventInfo__create())
}

func (t _ServiceEventInfoTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.service_msgs__msg__ServiceEventInfo__destroy((*C.service_msgs__msg__ServiceEventInfo)(pointer_to_free))
}

func (t _ServiceEventInfoTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*ServiceEventInfo)
	mem := (*C.service_msgs__msg__ServiceEventInfo)(dst)
	mem.event_type = C.uint8_t(m.EventType)
	builtin_interfaces_msg.TimeTypeSupport.AsCStruct(unsafe.Pointer(&mem.stamp), &m.Stamp)
	cSlice_client_gid := mem.client_gid[:]
	primitives.Char__Array_to_C(*(*[]primitives.CChar)(unsafe.Pointer(&cSlice_client_gid)), m.ClientGid[:])
	mem.sequence_number = C.int64_t(m.SequenceNumber)
}

func (t _ServiceEventInfoTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*ServiceEventInfo)
	mem := (*C.service_msgs__msg__ServiceEventInfo)(ros2_message_buffer)
	m.EventType = uint8(mem.event_type)
	builtin_interfaces_msg.TimeTypeSupport.AsGoStruct(&m.Stamp, unsafe.Pointer(&mem.stamp))
	cSlice_client_gid := mem.client_gid[:]
	primitives.Char__Array_to_Go(m.ClientGid[:], *(*[]primitives.CChar)(unsafe.Pointer(&cSlice_client_gid)))
	m.SequenceNumber = int64(mem.sequence_number)
}

func (t _ServiceEventInfoTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo())
}

type CServiceEventInfo = C.service_msgs__msg__ServiceEventInfo
type CServiceEventInfo__Sequence = C.service_msgs__msg__ServiceEventInfo__Sequence

func ServiceEventInfo__Sequence_to_Go(goSlice *[]ServiceEventInfo, cSlice CServiceEventInfo__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]ServiceEventInfo, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		ServiceEventInfoTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func ServiceEventInfo__Sequence_to_C(cSlice *CServiceEventInfo__Sequence, goSlice []ServiceEventInfo) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.service_msgs__msg__ServiceEventInfo)(C.malloc(C.sizeof_struct_service_msgs__msg__ServiceEventInfo * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		ServiceEventInfoTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func ServiceEventInfo__Array_to_Go(goSlice []ServiceEventInfo, cSlice []CServiceEventInfo) {
	for i := 0; i < len(cSlice); i++ {
		ServiceEventInfoTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func ServiceEventInfo__Array_to_C(cSlice []CServiceEventInfo, goSlice []ServiceEventInfo) {
	for i := 0; i < len(goSlice); i++ {
		ServiceEventInfoTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
