// Code generated by rclgo-gen. DO NOT EDIT.

package rcl_interfaces_srv
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	rcl_interfaces_msg "github.com/iema-group/goros2/msgs/rcl_interfaces/msg"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <rcl_interfaces/srv/get_logger_levels.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("rcl_interfaces/GetLoggerLevels_Response", GetLoggerLevels_ResponseTypeSupport)
	typemap.RegisterMessage("rcl_interfaces/srv/GetLoggerLevels_Response", GetLoggerLevels_ResponseTypeSupport)
}

type GetLoggerLevels_Response struct {
	Levels []rcl_interfaces_msg.LoggerLevel `yaml:"levels" json:"levels" mapstructure:"levels"`// List of logger levels which is the same order as the provided names. If alogger was not yet set, the value will have 'unknown' as the value.
}

// NewGetLoggerLevels_Response creates a new GetLoggerLevels_Response with default values.
func NewGetLoggerLevels_Response() *GetLoggerLevels_Response {
	self := GetLoggerLevels_Response{}
	self.SetDefaults()
	return &self
}

func (t *GetLoggerLevels_Response) Clone() *GetLoggerLevels_Response {
	c := &GetLoggerLevels_Response{}
	if t.Levels != nil {
		c.Levels = make([]rcl_interfaces_msg.LoggerLevel, len(t.Levels))
		rcl_interfaces_msg.CloneLoggerLevelSlice(c.Levels, t.Levels)
	}
	return c
}

func (t *GetLoggerLevels_Response) CloneMsg() types.Message {
	return t.Clone()
}

func (t *GetLoggerLevels_Response) SetDefaults() {
	t.Levels = nil
}

func (t *GetLoggerLevels_Response) GetTypeSupport() types.MessageTypeSupport {
	return GetLoggerLevels_ResponseTypeSupport
}

// GetLoggerLevels_ResponsePublisher wraps rclgo.Publisher to provide type safe helper
// functions
type GetLoggerLevels_ResponsePublisher struct {
	*rclgo.Publisher
}

// NewGetLoggerLevels_ResponsePublisher creates and returns a new publisher for the
// GetLoggerLevels_Response
func NewGetLoggerLevels_ResponsePublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*GetLoggerLevels_ResponsePublisher, error) {
	pub, err := node.NewPublisher(topic_name, GetLoggerLevels_ResponseTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &GetLoggerLevels_ResponsePublisher{pub}, nil
}

func (p *GetLoggerLevels_ResponsePublisher) Publish(msg *GetLoggerLevels_Response) error {
	return p.Publisher.Publish(msg)
}

// GetLoggerLevels_ResponseSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type GetLoggerLevels_ResponseSubscription struct {
	*rclgo.Subscription
}

// GetLoggerLevels_ResponseSubscriptionCallback type is used to provide a subscription
// handler function for a GetLoggerLevels_ResponseSubscription.
type GetLoggerLevels_ResponseSubscriptionCallback func(msg *GetLoggerLevels_Response, info *rclgo.MessageInfo, err error)

// NewGetLoggerLevels_ResponseSubscription creates and returns a new subscription for the
// GetLoggerLevels_Response
func NewGetLoggerLevels_ResponseSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback GetLoggerLevels_ResponseSubscriptionCallback) (*GetLoggerLevels_ResponseSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg GetLoggerLevels_Response
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, GetLoggerLevels_ResponseTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &GetLoggerLevels_ResponseSubscription{sub}, nil
}

func (s *GetLoggerLevels_ResponseSubscription) TakeMessage(out *GetLoggerLevels_Response) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneGetLoggerLevels_ResponseSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneGetLoggerLevels_ResponseSlice(dst, src []GetLoggerLevels_Response) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var GetLoggerLevels_ResponseTypeSupport types.MessageTypeSupport = _GetLoggerLevels_ResponseTypeSupport{}

type _GetLoggerLevels_ResponseTypeSupport struct{}

func (t _GetLoggerLevels_ResponseTypeSupport) New() types.Message {
	return NewGetLoggerLevels_Response()
}

func (t _GetLoggerLevels_ResponseTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.rcl_interfaces__srv__GetLoggerLevels_Response
	return (unsafe.Pointer)(C.rcl_interfaces__srv__GetLoggerLevels_Response__create())
}

func (t _GetLoggerLevels_ResponseTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.rcl_interfaces__srv__GetLoggerLevels_Response__destroy((*C.rcl_interfaces__srv__GetLoggerLevels_Response)(pointer_to_free))
}

func (t _GetLoggerLevels_ResponseTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*GetLoggerLevels_Response)
	mem := (*C.rcl_interfaces__srv__GetLoggerLevels_Response)(dst)
	rcl_interfaces_msg.LoggerLevel__Sequence_to_C((*rcl_interfaces_msg.CLoggerLevel__Sequence)(unsafe.Pointer(&mem.levels)), m.Levels)
}

func (t _GetLoggerLevels_ResponseTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*GetLoggerLevels_Response)
	mem := (*C.rcl_interfaces__srv__GetLoggerLevels_Response)(ros2_message_buffer)
	rcl_interfaces_msg.LoggerLevel__Sequence_to_Go(&m.Levels, *(*rcl_interfaces_msg.CLoggerLevel__Sequence)(unsafe.Pointer(&mem.levels)))
}

func (t _GetLoggerLevels_ResponseTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__GetLoggerLevels_Response())
}

type CGetLoggerLevels_Response = C.rcl_interfaces__srv__GetLoggerLevels_Response
type CGetLoggerLevels_Response__Sequence = C.rcl_interfaces__srv__GetLoggerLevels_Response__Sequence

func GetLoggerLevels_Response__Sequence_to_Go(goSlice *[]GetLoggerLevels_Response, cSlice CGetLoggerLevels_Response__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]GetLoggerLevels_Response, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		GetLoggerLevels_ResponseTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func GetLoggerLevels_Response__Sequence_to_C(cSlice *CGetLoggerLevels_Response__Sequence, goSlice []GetLoggerLevels_Response) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.rcl_interfaces__srv__GetLoggerLevels_Response)(C.malloc(C.sizeof_struct_rcl_interfaces__srv__GetLoggerLevels_Response * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		GetLoggerLevels_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func GetLoggerLevels_Response__Array_to_Go(goSlice []GetLoggerLevels_Response, cSlice []CGetLoggerLevels_Response) {
	for i := 0; i < len(cSlice); i++ {
		GetLoggerLevels_ResponseTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func GetLoggerLevels_Response__Array_to_C(cSlice []CGetLoggerLevels_Response, goSlice []GetLoggerLevels_Response) {
	for i := 0; i < len(goSlice); i++ {
		GetLoggerLevels_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
