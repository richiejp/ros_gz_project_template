// Code generated by rclgo-gen. DO NOT EDIT.

package rcl_interfaces_srv

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <rcl_interfaces/srv/set_logger_levels.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
)

func init() {
	typemap.RegisterService("rcl_interfaces/SetLoggerLevels", SetLoggerLevelsTypeSupport)
	typemap.RegisterService("rcl_interfaces/srv/SetLoggerLevels", SetLoggerLevelsTypeSupport)
}

type _SetLoggerLevelsTypeSupport struct {}

func (s _SetLoggerLevelsTypeSupport) Request() types.MessageTypeSupport {
	return SetLoggerLevels_RequestTypeSupport
}

func (s _SetLoggerLevelsTypeSupport) Response() types.MessageTypeSupport {
	return SetLoggerLevels_ResponseTypeSupport
}

func (s _SetLoggerLevelsTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__SetLoggerLevels())
}

// Modifying this variable is undefined behavior.
var SetLoggerLevelsTypeSupport types.ServiceTypeSupport = _SetLoggerLevelsTypeSupport{}

// SetLoggerLevelsClient wraps rclgo.Client to provide type safe helper
// functions
type SetLoggerLevelsClient struct {
	*rclgo.Client
}

// NewSetLoggerLevelsClient creates and returns a new client for the
// SetLoggerLevels
func NewSetLoggerLevelsClient(node *rclgo.Node, serviceName string, options *rclgo.ClientOptions) (*SetLoggerLevelsClient, error) {
	client, err := node.NewClient(serviceName, SetLoggerLevelsTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &SetLoggerLevelsClient{client}, nil
}

func (s *SetLoggerLevelsClient) Send(ctx context.Context, req *SetLoggerLevels_Request) (*SetLoggerLevels_Response, *rclgo.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*SetLoggerLevels_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type SetLoggerLevelsServiceResponseSender struct {
	sender rclgo.ServiceResponseSender
}

func (s SetLoggerLevelsServiceResponseSender) SendResponse(resp *SetLoggerLevels_Response) error {
	return s.sender.SendResponse(resp)
}

type SetLoggerLevelsServiceRequestHandler func(*rclgo.ServiceInfo, *SetLoggerLevels_Request, SetLoggerLevelsServiceResponseSender)

// SetLoggerLevelsService wraps rclgo.Service to provide type safe helper
// functions
type SetLoggerLevelsService struct {
	*rclgo.Service
}

// NewSetLoggerLevelsService creates and returns a new service for the
// SetLoggerLevels
func NewSetLoggerLevelsService(node *rclgo.Node, name string, options *rclgo.ServiceOptions, handler SetLoggerLevelsServiceRequestHandler) (*SetLoggerLevelsService, error) {
	h := func(rmw *rclgo.ServiceInfo, msg types.Message, rs rclgo.ServiceResponseSender) {
		m := msg.(*SetLoggerLevels_Request)
		responseSender := SetLoggerLevelsServiceResponseSender{sender: rs}
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, SetLoggerLevelsTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &SetLoggerLevelsService{service}, nil
}
