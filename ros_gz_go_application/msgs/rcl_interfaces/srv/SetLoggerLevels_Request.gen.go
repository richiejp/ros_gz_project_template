// Code generated by rclgo-gen. DO NOT EDIT.

package rcl_interfaces_srv
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	rcl_interfaces_msg "github.com/iema-group/goros2/msgs/rcl_interfaces/msg"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <rcl_interfaces/srv/set_logger_levels.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("rcl_interfaces/SetLoggerLevels_Request", SetLoggerLevels_RequestTypeSupport)
	typemap.RegisterMessage("rcl_interfaces/srv/SetLoggerLevels_Request", SetLoggerLevels_RequestTypeSupport)
}

type SetLoggerLevels_Request struct {
	Levels []rcl_interfaces_msg.LoggerLevel `yaml:"levels" json:"levels" mapstructure:"levels"`// A list of loggers to set.
}

// NewSetLoggerLevels_Request creates a new SetLoggerLevels_Request with default values.
func NewSetLoggerLevels_Request() *SetLoggerLevels_Request {
	self := SetLoggerLevels_Request{}
	self.SetDefaults()
	return &self
}

func (t *SetLoggerLevels_Request) Clone() *SetLoggerLevels_Request {
	c := &SetLoggerLevels_Request{}
	if t.Levels != nil {
		c.Levels = make([]rcl_interfaces_msg.LoggerLevel, len(t.Levels))
		rcl_interfaces_msg.CloneLoggerLevelSlice(c.Levels, t.Levels)
	}
	return c
}

func (t *SetLoggerLevels_Request) CloneMsg() types.Message {
	return t.Clone()
}

func (t *SetLoggerLevels_Request) SetDefaults() {
	t.Levels = nil
}

func (t *SetLoggerLevels_Request) GetTypeSupport() types.MessageTypeSupport {
	return SetLoggerLevels_RequestTypeSupport
}

// SetLoggerLevels_RequestPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type SetLoggerLevels_RequestPublisher struct {
	*rclgo.Publisher
}

// NewSetLoggerLevels_RequestPublisher creates and returns a new publisher for the
// SetLoggerLevels_Request
func NewSetLoggerLevels_RequestPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*SetLoggerLevels_RequestPublisher, error) {
	pub, err := node.NewPublisher(topic_name, SetLoggerLevels_RequestTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &SetLoggerLevels_RequestPublisher{pub}, nil
}

func (p *SetLoggerLevels_RequestPublisher) Publish(msg *SetLoggerLevels_Request) error {
	return p.Publisher.Publish(msg)
}

// SetLoggerLevels_RequestSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type SetLoggerLevels_RequestSubscription struct {
	*rclgo.Subscription
}

// SetLoggerLevels_RequestSubscriptionCallback type is used to provide a subscription
// handler function for a SetLoggerLevels_RequestSubscription.
type SetLoggerLevels_RequestSubscriptionCallback func(msg *SetLoggerLevels_Request, info *rclgo.MessageInfo, err error)

// NewSetLoggerLevels_RequestSubscription creates and returns a new subscription for the
// SetLoggerLevels_Request
func NewSetLoggerLevels_RequestSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback SetLoggerLevels_RequestSubscriptionCallback) (*SetLoggerLevels_RequestSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg SetLoggerLevels_Request
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, SetLoggerLevels_RequestTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &SetLoggerLevels_RequestSubscription{sub}, nil
}

func (s *SetLoggerLevels_RequestSubscription) TakeMessage(out *SetLoggerLevels_Request) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneSetLoggerLevels_RequestSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneSetLoggerLevels_RequestSlice(dst, src []SetLoggerLevels_Request) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var SetLoggerLevels_RequestTypeSupport types.MessageTypeSupport = _SetLoggerLevels_RequestTypeSupport{}

type _SetLoggerLevels_RequestTypeSupport struct{}

func (t _SetLoggerLevels_RequestTypeSupport) New() types.Message {
	return NewSetLoggerLevels_Request()
}

func (t _SetLoggerLevels_RequestTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.rcl_interfaces__srv__SetLoggerLevels_Request
	return (unsafe.Pointer)(C.rcl_interfaces__srv__SetLoggerLevels_Request__create())
}

func (t _SetLoggerLevels_RequestTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.rcl_interfaces__srv__SetLoggerLevels_Request__destroy((*C.rcl_interfaces__srv__SetLoggerLevels_Request)(pointer_to_free))
}

func (t _SetLoggerLevels_RequestTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*SetLoggerLevels_Request)
	mem := (*C.rcl_interfaces__srv__SetLoggerLevels_Request)(dst)
	rcl_interfaces_msg.LoggerLevel__Sequence_to_C((*rcl_interfaces_msg.CLoggerLevel__Sequence)(unsafe.Pointer(&mem.levels)), m.Levels)
}

func (t _SetLoggerLevels_RequestTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*SetLoggerLevels_Request)
	mem := (*C.rcl_interfaces__srv__SetLoggerLevels_Request)(ros2_message_buffer)
	rcl_interfaces_msg.LoggerLevel__Sequence_to_Go(&m.Levels, *(*rcl_interfaces_msg.CLoggerLevel__Sequence)(unsafe.Pointer(&mem.levels)))
}

func (t _SetLoggerLevels_RequestTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__SetLoggerLevels_Request())
}

type CSetLoggerLevels_Request = C.rcl_interfaces__srv__SetLoggerLevels_Request
type CSetLoggerLevels_Request__Sequence = C.rcl_interfaces__srv__SetLoggerLevels_Request__Sequence

func SetLoggerLevels_Request__Sequence_to_Go(goSlice *[]SetLoggerLevels_Request, cSlice CSetLoggerLevels_Request__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]SetLoggerLevels_Request, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		SetLoggerLevels_RequestTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func SetLoggerLevels_Request__Sequence_to_C(cSlice *CSetLoggerLevels_Request__Sequence, goSlice []SetLoggerLevels_Request) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.rcl_interfaces__srv__SetLoggerLevels_Request)(C.malloc(C.sizeof_struct_rcl_interfaces__srv__SetLoggerLevels_Request * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		SetLoggerLevels_RequestTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func SetLoggerLevels_Request__Array_to_Go(goSlice []SetLoggerLevels_Request, cSlice []CSetLoggerLevels_Request) {
	for i := 0; i < len(cSlice); i++ {
		SetLoggerLevels_RequestTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func SetLoggerLevels_Request__Array_to_C(cSlice []CSetLoggerLevels_Request, goSlice []SetLoggerLevels_Request) {
	for i := 0; i < len(goSlice); i++ {
		SetLoggerLevels_RequestTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
