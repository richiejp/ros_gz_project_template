// Code generated by rclgo-gen. DO NOT EDIT.

package rcl_interfaces_srv
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	rcl_interfaces_msg "github.com/iema-group/goros2/msgs/rcl_interfaces/msg"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <rcl_interfaces/srv/set_logger_levels.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("rcl_interfaces/SetLoggerLevels_Response", SetLoggerLevels_ResponseTypeSupport)
	typemap.RegisterMessage("rcl_interfaces/srv/SetLoggerLevels_Response", SetLoggerLevels_ResponseTypeSupport)
}

type SetLoggerLevels_Response struct {
	Results []rcl_interfaces_msg.SetLoggerLevelsResult `yaml:"results" json:"results" mapstructure:"results"`// Indicates whether setting each logger succeeded or not and why.
}

// NewSetLoggerLevels_Response creates a new SetLoggerLevels_Response with default values.
func NewSetLoggerLevels_Response() *SetLoggerLevels_Response {
	self := SetLoggerLevels_Response{}
	self.SetDefaults()
	return &self
}

func (t *SetLoggerLevels_Response) Clone() *SetLoggerLevels_Response {
	c := &SetLoggerLevels_Response{}
	if t.Results != nil {
		c.Results = make([]rcl_interfaces_msg.SetLoggerLevelsResult, len(t.Results))
		rcl_interfaces_msg.CloneSetLoggerLevelsResultSlice(c.Results, t.Results)
	}
	return c
}

func (t *SetLoggerLevels_Response) CloneMsg() types.Message {
	return t.Clone()
}

func (t *SetLoggerLevels_Response) SetDefaults() {
	t.Results = nil
}

func (t *SetLoggerLevels_Response) GetTypeSupport() types.MessageTypeSupport {
	return SetLoggerLevels_ResponseTypeSupport
}

// SetLoggerLevels_ResponsePublisher wraps rclgo.Publisher to provide type safe helper
// functions
type SetLoggerLevels_ResponsePublisher struct {
	*rclgo.Publisher
}

// NewSetLoggerLevels_ResponsePublisher creates and returns a new publisher for the
// SetLoggerLevels_Response
func NewSetLoggerLevels_ResponsePublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*SetLoggerLevels_ResponsePublisher, error) {
	pub, err := node.NewPublisher(topic_name, SetLoggerLevels_ResponseTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &SetLoggerLevels_ResponsePublisher{pub}, nil
}

func (p *SetLoggerLevels_ResponsePublisher) Publish(msg *SetLoggerLevels_Response) error {
	return p.Publisher.Publish(msg)
}

// SetLoggerLevels_ResponseSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type SetLoggerLevels_ResponseSubscription struct {
	*rclgo.Subscription
}

// SetLoggerLevels_ResponseSubscriptionCallback type is used to provide a subscription
// handler function for a SetLoggerLevels_ResponseSubscription.
type SetLoggerLevels_ResponseSubscriptionCallback func(msg *SetLoggerLevels_Response, info *rclgo.MessageInfo, err error)

// NewSetLoggerLevels_ResponseSubscription creates and returns a new subscription for the
// SetLoggerLevels_Response
func NewSetLoggerLevels_ResponseSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback SetLoggerLevels_ResponseSubscriptionCallback) (*SetLoggerLevels_ResponseSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg SetLoggerLevels_Response
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, SetLoggerLevels_ResponseTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &SetLoggerLevels_ResponseSubscription{sub}, nil
}

func (s *SetLoggerLevels_ResponseSubscription) TakeMessage(out *SetLoggerLevels_Response) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneSetLoggerLevels_ResponseSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneSetLoggerLevels_ResponseSlice(dst, src []SetLoggerLevels_Response) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var SetLoggerLevels_ResponseTypeSupport types.MessageTypeSupport = _SetLoggerLevels_ResponseTypeSupport{}

type _SetLoggerLevels_ResponseTypeSupport struct{}

func (t _SetLoggerLevels_ResponseTypeSupport) New() types.Message {
	return NewSetLoggerLevels_Response()
}

func (t _SetLoggerLevels_ResponseTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.rcl_interfaces__srv__SetLoggerLevels_Response
	return (unsafe.Pointer)(C.rcl_interfaces__srv__SetLoggerLevels_Response__create())
}

func (t _SetLoggerLevels_ResponseTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.rcl_interfaces__srv__SetLoggerLevels_Response__destroy((*C.rcl_interfaces__srv__SetLoggerLevels_Response)(pointer_to_free))
}

func (t _SetLoggerLevels_ResponseTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*SetLoggerLevels_Response)
	mem := (*C.rcl_interfaces__srv__SetLoggerLevels_Response)(dst)
	rcl_interfaces_msg.SetLoggerLevelsResult__Sequence_to_C((*rcl_interfaces_msg.CSetLoggerLevelsResult__Sequence)(unsafe.Pointer(&mem.results)), m.Results)
}

func (t _SetLoggerLevels_ResponseTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*SetLoggerLevels_Response)
	mem := (*C.rcl_interfaces__srv__SetLoggerLevels_Response)(ros2_message_buffer)
	rcl_interfaces_msg.SetLoggerLevelsResult__Sequence_to_Go(&m.Results, *(*rcl_interfaces_msg.CSetLoggerLevelsResult__Sequence)(unsafe.Pointer(&mem.results)))
}

func (t _SetLoggerLevels_ResponseTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__SetLoggerLevels_Response())
}

type CSetLoggerLevels_Response = C.rcl_interfaces__srv__SetLoggerLevels_Response
type CSetLoggerLevels_Response__Sequence = C.rcl_interfaces__srv__SetLoggerLevels_Response__Sequence

func SetLoggerLevels_Response__Sequence_to_Go(goSlice *[]SetLoggerLevels_Response, cSlice CSetLoggerLevels_Response__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]SetLoggerLevels_Response, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		SetLoggerLevels_ResponseTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func SetLoggerLevels_Response__Sequence_to_C(cSlice *CSetLoggerLevels_Response__Sequence, goSlice []SetLoggerLevels_Response) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.rcl_interfaces__srv__SetLoggerLevels_Response)(C.malloc(C.sizeof_struct_rcl_interfaces__srv__SetLoggerLevels_Response * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		SetLoggerLevels_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func SetLoggerLevels_Response__Array_to_Go(goSlice []SetLoggerLevels_Response, cSlice []CSetLoggerLevels_Response) {
	for i := 0; i < len(cSlice); i++ {
		SetLoggerLevels_ResponseTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func SetLoggerLevels_Response__Array_to_C(cSlice []CSetLoggerLevels_Response, goSlice []SetLoggerLevels_Response) {
	for i := 0; i < len(goSlice); i++ {
		SetLoggerLevels_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
