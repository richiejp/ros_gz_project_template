// Code generated by rclgo-gen. DO NOT EDIT.

package rcl_interfaces_srv

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <rcl_interfaces/srv/get_logger_levels.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
)

func init() {
	typemap.RegisterService("rcl_interfaces/GetLoggerLevels", GetLoggerLevelsTypeSupport)
	typemap.RegisterService("rcl_interfaces/srv/GetLoggerLevels", GetLoggerLevelsTypeSupport)
}

type _GetLoggerLevelsTypeSupport struct {}

func (s _GetLoggerLevelsTypeSupport) Request() types.MessageTypeSupport {
	return GetLoggerLevels_RequestTypeSupport
}

func (s _GetLoggerLevelsTypeSupport) Response() types.MessageTypeSupport {
	return GetLoggerLevels_ResponseTypeSupport
}

func (s _GetLoggerLevelsTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__GetLoggerLevels())
}

// Modifying this variable is undefined behavior.
var GetLoggerLevelsTypeSupport types.ServiceTypeSupport = _GetLoggerLevelsTypeSupport{}

// GetLoggerLevelsClient wraps rclgo.Client to provide type safe helper
// functions
type GetLoggerLevelsClient struct {
	*rclgo.Client
}

// NewGetLoggerLevelsClient creates and returns a new client for the
// GetLoggerLevels
func NewGetLoggerLevelsClient(node *rclgo.Node, serviceName string, options *rclgo.ClientOptions) (*GetLoggerLevelsClient, error) {
	client, err := node.NewClient(serviceName, GetLoggerLevelsTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &GetLoggerLevelsClient{client}, nil
}

func (s *GetLoggerLevelsClient) Send(ctx context.Context, req *GetLoggerLevels_Request) (*GetLoggerLevels_Response, *rclgo.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*GetLoggerLevels_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type GetLoggerLevelsServiceResponseSender struct {
	sender rclgo.ServiceResponseSender
}

func (s GetLoggerLevelsServiceResponseSender) SendResponse(resp *GetLoggerLevels_Response) error {
	return s.sender.SendResponse(resp)
}

type GetLoggerLevelsServiceRequestHandler func(*rclgo.ServiceInfo, *GetLoggerLevels_Request, GetLoggerLevelsServiceResponseSender)

// GetLoggerLevelsService wraps rclgo.Service to provide type safe helper
// functions
type GetLoggerLevelsService struct {
	*rclgo.Service
}

// NewGetLoggerLevelsService creates and returns a new service for the
// GetLoggerLevels
func NewGetLoggerLevelsService(node *rclgo.Node, name string, options *rclgo.ServiceOptions, handler GetLoggerLevelsServiceRequestHandler) (*GetLoggerLevelsService, error) {
	h := func(rmw *rclgo.ServiceInfo, msg types.Message, rs rclgo.ServiceResponseSender) {
		m := msg.(*GetLoggerLevels_Request)
		responseSender := GetLoggerLevelsServiceResponseSender{sender: rs}
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, GetLoggerLevelsTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &GetLoggerLevelsService{service}, nil
}
