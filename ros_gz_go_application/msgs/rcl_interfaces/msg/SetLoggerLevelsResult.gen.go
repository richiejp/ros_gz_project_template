// Code generated by rclgo-gen. DO NOT EDIT.

package rcl_interfaces_msg
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	primitives "github.com/ATIinc/rclgo/pkg/rclgo/primitives"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <rcl_interfaces/msg/set_logger_levels_result.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("rcl_interfaces/SetLoggerLevelsResult", SetLoggerLevelsResultTypeSupport)
	typemap.RegisterMessage("rcl_interfaces/msg/SetLoggerLevelsResult", SetLoggerLevelsResultTypeSupport)
}

type SetLoggerLevelsResult struct {
	Successful bool `yaml:"successful" json:"successful" mapstructure:"successful"`// True when succeed, false when failed.
	Reason string `yaml:"reason" json:"reason" mapstructure:"reason"`// Reason why the setting was either successful or a failure.
}

// NewSetLoggerLevelsResult creates a new SetLoggerLevelsResult with default values.
func NewSetLoggerLevelsResult() *SetLoggerLevelsResult {
	self := SetLoggerLevelsResult{}
	self.SetDefaults()
	return &self
}

func (t *SetLoggerLevelsResult) Clone() *SetLoggerLevelsResult {
	c := &SetLoggerLevelsResult{}
	c.Successful = t.Successful
	c.Reason = t.Reason
	return c
}

func (t *SetLoggerLevelsResult) CloneMsg() types.Message {
	return t.Clone()
}

func (t *SetLoggerLevelsResult) SetDefaults() {
	t.Successful = false
	t.Reason = ""
}

func (t *SetLoggerLevelsResult) GetTypeSupport() types.MessageTypeSupport {
	return SetLoggerLevelsResultTypeSupport
}

// SetLoggerLevelsResultPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type SetLoggerLevelsResultPublisher struct {
	*rclgo.Publisher
}

// NewSetLoggerLevelsResultPublisher creates and returns a new publisher for the
// SetLoggerLevelsResult
func NewSetLoggerLevelsResultPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*SetLoggerLevelsResultPublisher, error) {
	pub, err := node.NewPublisher(topic_name, SetLoggerLevelsResultTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &SetLoggerLevelsResultPublisher{pub}, nil
}

func (p *SetLoggerLevelsResultPublisher) Publish(msg *SetLoggerLevelsResult) error {
	return p.Publisher.Publish(msg)
}

// SetLoggerLevelsResultSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type SetLoggerLevelsResultSubscription struct {
	*rclgo.Subscription
}

// SetLoggerLevelsResultSubscriptionCallback type is used to provide a subscription
// handler function for a SetLoggerLevelsResultSubscription.
type SetLoggerLevelsResultSubscriptionCallback func(msg *SetLoggerLevelsResult, info *rclgo.MessageInfo, err error)

// NewSetLoggerLevelsResultSubscription creates and returns a new subscription for the
// SetLoggerLevelsResult
func NewSetLoggerLevelsResultSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback SetLoggerLevelsResultSubscriptionCallback) (*SetLoggerLevelsResultSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg SetLoggerLevelsResult
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, SetLoggerLevelsResultTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &SetLoggerLevelsResultSubscription{sub}, nil
}

func (s *SetLoggerLevelsResultSubscription) TakeMessage(out *SetLoggerLevelsResult) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneSetLoggerLevelsResultSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneSetLoggerLevelsResultSlice(dst, src []SetLoggerLevelsResult) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var SetLoggerLevelsResultTypeSupport types.MessageTypeSupport = _SetLoggerLevelsResultTypeSupport{}

type _SetLoggerLevelsResultTypeSupport struct{}

func (t _SetLoggerLevelsResultTypeSupport) New() types.Message {
	return NewSetLoggerLevelsResult()
}

func (t _SetLoggerLevelsResultTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.rcl_interfaces__msg__SetLoggerLevelsResult
	return (unsafe.Pointer)(C.rcl_interfaces__msg__SetLoggerLevelsResult__create())
}

func (t _SetLoggerLevelsResultTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.rcl_interfaces__msg__SetLoggerLevelsResult__destroy((*C.rcl_interfaces__msg__SetLoggerLevelsResult)(pointer_to_free))
}

func (t _SetLoggerLevelsResultTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*SetLoggerLevelsResult)
	mem := (*C.rcl_interfaces__msg__SetLoggerLevelsResult)(dst)
	mem.successful = C.bool(m.Successful)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.reason), m.Reason)
}

func (t _SetLoggerLevelsResultTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*SetLoggerLevelsResult)
	mem := (*C.rcl_interfaces__msg__SetLoggerLevelsResult)(ros2_message_buffer)
	m.Successful = bool(mem.successful)
	primitives.StringAsGoStruct(&m.Reason, unsafe.Pointer(&mem.reason))
}

func (t _SetLoggerLevelsResultTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__msg__SetLoggerLevelsResult())
}

type CSetLoggerLevelsResult = C.rcl_interfaces__msg__SetLoggerLevelsResult
type CSetLoggerLevelsResult__Sequence = C.rcl_interfaces__msg__SetLoggerLevelsResult__Sequence

func SetLoggerLevelsResult__Sequence_to_Go(goSlice *[]SetLoggerLevelsResult, cSlice CSetLoggerLevelsResult__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]SetLoggerLevelsResult, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		SetLoggerLevelsResultTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func SetLoggerLevelsResult__Sequence_to_C(cSlice *CSetLoggerLevelsResult__Sequence, goSlice []SetLoggerLevelsResult) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.rcl_interfaces__msg__SetLoggerLevelsResult)(C.malloc(C.sizeof_struct_rcl_interfaces__msg__SetLoggerLevelsResult * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		SetLoggerLevelsResultTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func SetLoggerLevelsResult__Array_to_Go(goSlice []SetLoggerLevelsResult, cSlice []CSetLoggerLevelsResult) {
	for i := 0; i < len(cSlice); i++ {
		SetLoggerLevelsResultTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func SetLoggerLevelsResult__Array_to_C(cSlice []CSetLoggerLevelsResult, goSlice []SetLoggerLevelsResult) {
	for i := 0; i < len(goSlice); i++ {
		SetLoggerLevelsResultTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
