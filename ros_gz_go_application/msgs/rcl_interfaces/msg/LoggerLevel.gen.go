// Code generated by rclgo-gen. DO NOT EDIT.

package rcl_interfaces_msg
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	primitives "github.com/ATIinc/rclgo/pkg/rclgo/primitives"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <rcl_interfaces/msg/logger_level.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("rcl_interfaces/LoggerLevel", LoggerLevelTypeSupport)
	typemap.RegisterMessage("rcl_interfaces/msg/LoggerLevel", LoggerLevelTypeSupport)
}
const (
	LoggerLevel_LOG_LEVEL_UNKNOWN uint8 = 0
	LoggerLevel_LOG_LEVEL_DEBUG uint8 = 10
	LoggerLevel_LOG_LEVEL_INFO uint8 = 20
	LoggerLevel_LOG_LEVEL_WARN uint8 = 30
	LoggerLevel_LOG_LEVEL_ERROR uint8 = 40
	LoggerLevel_LOG_LEVEL_FATAL uint8 = 50
)

type LoggerLevel struct {
	Name string `yaml:"name" json:"name" mapstructure:"name"`// The logger name.
	Level uint32 `yaml:"level" json:"level" mapstructure:"level"`// The logger level
}

// NewLoggerLevel creates a new LoggerLevel with default values.
func NewLoggerLevel() *LoggerLevel {
	self := LoggerLevel{}
	self.SetDefaults()
	return &self
}

func (t *LoggerLevel) Clone() *LoggerLevel {
	c := &LoggerLevel{}
	c.Name = t.Name
	c.Level = t.Level
	return c
}

func (t *LoggerLevel) CloneMsg() types.Message {
	return t.Clone()
}

func (t *LoggerLevel) SetDefaults() {
	t.Name = ""
	t.Level = 0
}

func (t *LoggerLevel) GetTypeSupport() types.MessageTypeSupport {
	return LoggerLevelTypeSupport
}

// LoggerLevelPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type LoggerLevelPublisher struct {
	*rclgo.Publisher
}

// NewLoggerLevelPublisher creates and returns a new publisher for the
// LoggerLevel
func NewLoggerLevelPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*LoggerLevelPublisher, error) {
	pub, err := node.NewPublisher(topic_name, LoggerLevelTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &LoggerLevelPublisher{pub}, nil
}

func (p *LoggerLevelPublisher) Publish(msg *LoggerLevel) error {
	return p.Publisher.Publish(msg)
}

// LoggerLevelSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type LoggerLevelSubscription struct {
	*rclgo.Subscription
}

// LoggerLevelSubscriptionCallback type is used to provide a subscription
// handler function for a LoggerLevelSubscription.
type LoggerLevelSubscriptionCallback func(msg *LoggerLevel, info *rclgo.MessageInfo, err error)

// NewLoggerLevelSubscription creates and returns a new subscription for the
// LoggerLevel
func NewLoggerLevelSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback LoggerLevelSubscriptionCallback) (*LoggerLevelSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg LoggerLevel
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, LoggerLevelTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &LoggerLevelSubscription{sub}, nil
}

func (s *LoggerLevelSubscription) TakeMessage(out *LoggerLevel) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneLoggerLevelSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneLoggerLevelSlice(dst, src []LoggerLevel) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var LoggerLevelTypeSupport types.MessageTypeSupport = _LoggerLevelTypeSupport{}

type _LoggerLevelTypeSupport struct{}

func (t _LoggerLevelTypeSupport) New() types.Message {
	return NewLoggerLevel()
}

func (t _LoggerLevelTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.rcl_interfaces__msg__LoggerLevel
	return (unsafe.Pointer)(C.rcl_interfaces__msg__LoggerLevel__create())
}

func (t _LoggerLevelTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.rcl_interfaces__msg__LoggerLevel__destroy((*C.rcl_interfaces__msg__LoggerLevel)(pointer_to_free))
}

func (t _LoggerLevelTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*LoggerLevel)
	mem := (*C.rcl_interfaces__msg__LoggerLevel)(dst)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.name), m.Name)
	mem.level = C.uint32_t(m.Level)
}

func (t _LoggerLevelTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*LoggerLevel)
	mem := (*C.rcl_interfaces__msg__LoggerLevel)(ros2_message_buffer)
	primitives.StringAsGoStruct(&m.Name, unsafe.Pointer(&mem.name))
	m.Level = uint32(mem.level)
}

func (t _LoggerLevelTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__msg__LoggerLevel())
}

type CLoggerLevel = C.rcl_interfaces__msg__LoggerLevel
type CLoggerLevel__Sequence = C.rcl_interfaces__msg__LoggerLevel__Sequence

func LoggerLevel__Sequence_to_Go(goSlice *[]LoggerLevel, cSlice CLoggerLevel__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]LoggerLevel, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		LoggerLevelTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func LoggerLevel__Sequence_to_C(cSlice *CLoggerLevel__Sequence, goSlice []LoggerLevel) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.rcl_interfaces__msg__LoggerLevel)(C.malloc(C.sizeof_struct_rcl_interfaces__msg__LoggerLevel * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		LoggerLevelTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func LoggerLevel__Array_to_Go(goSlice []LoggerLevel, cSlice []CLoggerLevel) {
	for i := 0; i < len(cSlice); i++ {
		LoggerLevelTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func LoggerLevel__Array_to_C(cSlice []CLoggerLevel, goSlice []LoggerLevel) {
	for i := 0; i < len(goSlice); i++ {
		LoggerLevelTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
