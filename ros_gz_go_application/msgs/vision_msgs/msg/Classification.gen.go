// Code generated by rclgo-gen. DO NOT EDIT.

package vision_msgs_msg
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	std_msgs_msg "github.com/iema-group/goros2/msgs/std_msgs/msg"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <vision_msgs/msg/classification.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("vision_msgs/Classification", ClassificationTypeSupport)
	typemap.RegisterMessage("vision_msgs/msg/Classification", ClassificationTypeSupport)
}

type Classification struct {
	Header std_msgs_msg.Header `yaml:"header" json:"header" mapstructure:"header"`
	Results []ObjectHypothesis `yaml:"results" json:"results" mapstructure:"results"`// A list of class probabilities. This list need not provide a probability forevery possible class, just ones that are nonzero, or above someuser-defined threshold.
}

// NewClassification creates a new Classification with default values.
func NewClassification() *Classification {
	self := Classification{}
	self.SetDefaults()
	return &self
}

func (t *Classification) Clone() *Classification {
	c := &Classification{}
	c.Header = *t.Header.Clone()
	if t.Results != nil {
		c.Results = make([]ObjectHypothesis, len(t.Results))
		CloneObjectHypothesisSlice(c.Results, t.Results)
	}
	return c
}

func (t *Classification) CloneMsg() types.Message {
	return t.Clone()
}

func (t *Classification) SetDefaults() {
	t.Header.SetDefaults()
	t.Results = nil
}

func (t *Classification) GetTypeSupport() types.MessageTypeSupport {
	return ClassificationTypeSupport
}

// ClassificationPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type ClassificationPublisher struct {
	*rclgo.Publisher
}

// NewClassificationPublisher creates and returns a new publisher for the
// Classification
func NewClassificationPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*ClassificationPublisher, error) {
	pub, err := node.NewPublisher(topic_name, ClassificationTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ClassificationPublisher{pub}, nil
}

func (p *ClassificationPublisher) Publish(msg *Classification) error {
	return p.Publisher.Publish(msg)
}

// ClassificationSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type ClassificationSubscription struct {
	*rclgo.Subscription
}

// ClassificationSubscriptionCallback type is used to provide a subscription
// handler function for a ClassificationSubscription.
type ClassificationSubscriptionCallback func(msg *Classification, info *rclgo.MessageInfo, err error)

// NewClassificationSubscription creates and returns a new subscription for the
// Classification
func NewClassificationSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback ClassificationSubscriptionCallback) (*ClassificationSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg Classification
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, ClassificationTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &ClassificationSubscription{sub}, nil
}

func (s *ClassificationSubscription) TakeMessage(out *Classification) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneClassificationSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneClassificationSlice(dst, src []Classification) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ClassificationTypeSupport types.MessageTypeSupport = _ClassificationTypeSupport{}

type _ClassificationTypeSupport struct{}

func (t _ClassificationTypeSupport) New() types.Message {
	return NewClassification()
}

func (t _ClassificationTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.vision_msgs__msg__Classification
	return (unsafe.Pointer)(C.vision_msgs__msg__Classification__create())
}

func (t _ClassificationTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.vision_msgs__msg__Classification__destroy((*C.vision_msgs__msg__Classification)(pointer_to_free))
}

func (t _ClassificationTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*Classification)
	mem := (*C.vision_msgs__msg__Classification)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	ObjectHypothesis__Sequence_to_C(&mem.results, m.Results)
}

func (t _ClassificationTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*Classification)
	mem := (*C.vision_msgs__msg__Classification)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	ObjectHypothesis__Sequence_to_Go(&m.Results, mem.results)
}

func (t _ClassificationTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__vision_msgs__msg__Classification())
}

type CClassification = C.vision_msgs__msg__Classification
type CClassification__Sequence = C.vision_msgs__msg__Classification__Sequence

func Classification__Sequence_to_Go(goSlice *[]Classification, cSlice CClassification__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Classification, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		ClassificationTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func Classification__Sequence_to_C(cSlice *CClassification__Sequence, goSlice []Classification) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.vision_msgs__msg__Classification)(C.malloc(C.sizeof_struct_vision_msgs__msg__Classification * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		ClassificationTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func Classification__Array_to_Go(goSlice []Classification, cSlice []CClassification) {
	for i := 0; i < len(cSlice); i++ {
		ClassificationTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func Classification__Array_to_C(cSlice []CClassification, goSlice []Classification) {
	for i := 0; i < len(goSlice); i++ {
		ClassificationTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
