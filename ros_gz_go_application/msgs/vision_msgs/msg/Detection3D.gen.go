// Code generated by rclgo-gen. DO NOT EDIT.

package vision_msgs_msg
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	primitives "github.com/ATIinc/rclgo/pkg/rclgo/primitives"
	std_msgs_msg "github.com/iema-group/goros2/msgs/std_msgs/msg"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <vision_msgs/msg/detection3_d.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("vision_msgs/Detection3D", Detection3DTypeSupport)
	typemap.RegisterMessage("vision_msgs/msg/Detection3D", Detection3DTypeSupport)
}

type Detection3D struct {
	Header std_msgs_msg.Header `yaml:"header" json:"header" mapstructure:"header"`
	Results []ObjectHypothesisWithPose `yaml:"results" json:"results" mapstructure:"results"`// Class probabilities. Does not have to include hypotheses for all possibleobject ids, the scores for any ids not listed are assumed to be 0.
	Bbox BoundingBox3D `yaml:"bbox" json:"bbox" mapstructure:"bbox"`// 3D bounding box surrounding the object.
	Id string `yaml:"id" json:"id" mapstructure:"id"`// ID used for consistency across multiple detection messages. Detectionsof the same object in different detection messages should have the same id.This field may be empty.
}

// NewDetection3D creates a new Detection3D with default values.
func NewDetection3D() *Detection3D {
	self := Detection3D{}
	self.SetDefaults()
	return &self
}

func (t *Detection3D) Clone() *Detection3D {
	c := &Detection3D{}
	c.Header = *t.Header.Clone()
	if t.Results != nil {
		c.Results = make([]ObjectHypothesisWithPose, len(t.Results))
		CloneObjectHypothesisWithPoseSlice(c.Results, t.Results)
	}
	c.Bbox = *t.Bbox.Clone()
	c.Id = t.Id
	return c
}

func (t *Detection3D) CloneMsg() types.Message {
	return t.Clone()
}

func (t *Detection3D) SetDefaults() {
	t.Header.SetDefaults()
	t.Results = nil
	t.Bbox.SetDefaults()
	t.Id = ""
}

func (t *Detection3D) GetTypeSupport() types.MessageTypeSupport {
	return Detection3DTypeSupport
}

// Detection3DPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type Detection3DPublisher struct {
	*rclgo.Publisher
}

// NewDetection3DPublisher creates and returns a new publisher for the
// Detection3D
func NewDetection3DPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*Detection3DPublisher, error) {
	pub, err := node.NewPublisher(topic_name, Detection3DTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &Detection3DPublisher{pub}, nil
}

func (p *Detection3DPublisher) Publish(msg *Detection3D) error {
	return p.Publisher.Publish(msg)
}

// Detection3DSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type Detection3DSubscription struct {
	*rclgo.Subscription
}

// Detection3DSubscriptionCallback type is used to provide a subscription
// handler function for a Detection3DSubscription.
type Detection3DSubscriptionCallback func(msg *Detection3D, info *rclgo.MessageInfo, err error)

// NewDetection3DSubscription creates and returns a new subscription for the
// Detection3D
func NewDetection3DSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback Detection3DSubscriptionCallback) (*Detection3DSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg Detection3D
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, Detection3DTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &Detection3DSubscription{sub}, nil
}

func (s *Detection3DSubscription) TakeMessage(out *Detection3D) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneDetection3DSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneDetection3DSlice(dst, src []Detection3D) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var Detection3DTypeSupport types.MessageTypeSupport = _Detection3DTypeSupport{}

type _Detection3DTypeSupport struct{}

func (t _Detection3DTypeSupport) New() types.Message {
	return NewDetection3D()
}

func (t _Detection3DTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.vision_msgs__msg__Detection3D
	return (unsafe.Pointer)(C.vision_msgs__msg__Detection3D__create())
}

func (t _Detection3DTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.vision_msgs__msg__Detection3D__destroy((*C.vision_msgs__msg__Detection3D)(pointer_to_free))
}

func (t _Detection3DTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*Detection3D)
	mem := (*C.vision_msgs__msg__Detection3D)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	ObjectHypothesisWithPose__Sequence_to_C(&mem.results, m.Results)
	BoundingBox3DTypeSupport.AsCStruct(unsafe.Pointer(&mem.bbox), &m.Bbox)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.id), m.Id)
}

func (t _Detection3DTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*Detection3D)
	mem := (*C.vision_msgs__msg__Detection3D)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	ObjectHypothesisWithPose__Sequence_to_Go(&m.Results, mem.results)
	BoundingBox3DTypeSupport.AsGoStruct(&m.Bbox, unsafe.Pointer(&mem.bbox))
	primitives.StringAsGoStruct(&m.Id, unsafe.Pointer(&mem.id))
}

func (t _Detection3DTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__vision_msgs__msg__Detection3D())
}

type CDetection3D = C.vision_msgs__msg__Detection3D
type CDetection3D__Sequence = C.vision_msgs__msg__Detection3D__Sequence

func Detection3D__Sequence_to_Go(goSlice *[]Detection3D, cSlice CDetection3D__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Detection3D, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		Detection3DTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func Detection3D__Sequence_to_C(cSlice *CDetection3D__Sequence, goSlice []Detection3D) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.vision_msgs__msg__Detection3D)(C.malloc(C.sizeof_struct_vision_msgs__msg__Detection3D * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		Detection3DTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func Detection3D__Array_to_Go(goSlice []Detection3D, cSlice []CDetection3D) {
	for i := 0; i < len(cSlice); i++ {
		Detection3DTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func Detection3D__Array_to_C(cSlice []CDetection3D, goSlice []Detection3D) {
	for i := 0; i < len(goSlice); i++ {
		Detection3DTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
