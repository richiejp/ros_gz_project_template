// Code generated by rclgo-gen. DO NOT EDIT.

package vision_msgs_msg
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	primitives "github.com/ATIinc/rclgo/pkg/rclgo/primitives"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <vision_msgs/msg/object_hypothesis.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("vision_msgs/ObjectHypothesis", ObjectHypothesisTypeSupport)
	typemap.RegisterMessage("vision_msgs/msg/ObjectHypothesis", ObjectHypothesisTypeSupport)
}

type ObjectHypothesis struct {
	ClassId string `yaml:"class_id" json:"class_id" mapstructure:"class_id"`// The unique ID of the object class. To get additional information aboutthis ID, such as its human-readable class name, listeners should perform alookup in a metadata database. See vision_msgs/VisionInfo.msg for more detail.
	Score float64 `yaml:"score" json:"score" mapstructure:"score"`// The probability or confidence value of the detected object. By convention,this value should lie in the range [0-1].
}

// NewObjectHypothesis creates a new ObjectHypothesis with default values.
func NewObjectHypothesis() *ObjectHypothesis {
	self := ObjectHypothesis{}
	self.SetDefaults()
	return &self
}

func (t *ObjectHypothesis) Clone() *ObjectHypothesis {
	c := &ObjectHypothesis{}
	c.ClassId = t.ClassId
	c.Score = t.Score
	return c
}

func (t *ObjectHypothesis) CloneMsg() types.Message {
	return t.Clone()
}

func (t *ObjectHypothesis) SetDefaults() {
	t.ClassId = ""
	t.Score = 0
}

func (t *ObjectHypothesis) GetTypeSupport() types.MessageTypeSupport {
	return ObjectHypothesisTypeSupport
}

// ObjectHypothesisPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type ObjectHypothesisPublisher struct {
	*rclgo.Publisher
}

// NewObjectHypothesisPublisher creates and returns a new publisher for the
// ObjectHypothesis
func NewObjectHypothesisPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*ObjectHypothesisPublisher, error) {
	pub, err := node.NewPublisher(topic_name, ObjectHypothesisTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ObjectHypothesisPublisher{pub}, nil
}

func (p *ObjectHypothesisPublisher) Publish(msg *ObjectHypothesis) error {
	return p.Publisher.Publish(msg)
}

// ObjectHypothesisSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type ObjectHypothesisSubscription struct {
	*rclgo.Subscription
}

// ObjectHypothesisSubscriptionCallback type is used to provide a subscription
// handler function for a ObjectHypothesisSubscription.
type ObjectHypothesisSubscriptionCallback func(msg *ObjectHypothesis, info *rclgo.MessageInfo, err error)

// NewObjectHypothesisSubscription creates and returns a new subscription for the
// ObjectHypothesis
func NewObjectHypothesisSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback ObjectHypothesisSubscriptionCallback) (*ObjectHypothesisSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg ObjectHypothesis
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, ObjectHypothesisTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &ObjectHypothesisSubscription{sub}, nil
}

func (s *ObjectHypothesisSubscription) TakeMessage(out *ObjectHypothesis) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneObjectHypothesisSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneObjectHypothesisSlice(dst, src []ObjectHypothesis) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ObjectHypothesisTypeSupport types.MessageTypeSupport = _ObjectHypothesisTypeSupport{}

type _ObjectHypothesisTypeSupport struct{}

func (t _ObjectHypothesisTypeSupport) New() types.Message {
	return NewObjectHypothesis()
}

func (t _ObjectHypothesisTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.vision_msgs__msg__ObjectHypothesis
	return (unsafe.Pointer)(C.vision_msgs__msg__ObjectHypothesis__create())
}

func (t _ObjectHypothesisTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.vision_msgs__msg__ObjectHypothesis__destroy((*C.vision_msgs__msg__ObjectHypothesis)(pointer_to_free))
}

func (t _ObjectHypothesisTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*ObjectHypothesis)
	mem := (*C.vision_msgs__msg__ObjectHypothesis)(dst)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.class_id), m.ClassId)
	mem.score = C.double(m.Score)
}

func (t _ObjectHypothesisTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*ObjectHypothesis)
	mem := (*C.vision_msgs__msg__ObjectHypothesis)(ros2_message_buffer)
	primitives.StringAsGoStruct(&m.ClassId, unsafe.Pointer(&mem.class_id))
	m.Score = float64(mem.score)
}

func (t _ObjectHypothesisTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__vision_msgs__msg__ObjectHypothesis())
}

type CObjectHypothesis = C.vision_msgs__msg__ObjectHypothesis
type CObjectHypothesis__Sequence = C.vision_msgs__msg__ObjectHypothesis__Sequence

func ObjectHypothesis__Sequence_to_Go(goSlice *[]ObjectHypothesis, cSlice CObjectHypothesis__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]ObjectHypothesis, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		ObjectHypothesisTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func ObjectHypothesis__Sequence_to_C(cSlice *CObjectHypothesis__Sequence, goSlice []ObjectHypothesis) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.vision_msgs__msg__ObjectHypothesis)(C.malloc(C.sizeof_struct_vision_msgs__msg__ObjectHypothesis * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		ObjectHypothesisTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func ObjectHypothesis__Array_to_Go(goSlice []ObjectHypothesis, cSlice []CObjectHypothesis) {
	for i := 0; i < len(cSlice); i++ {
		ObjectHypothesisTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func ObjectHypothesis__Array_to_C(cSlice []CObjectHypothesis, goSlice []ObjectHypothesis) {
	for i := 0; i < len(goSlice); i++ {
		ObjectHypothesisTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
