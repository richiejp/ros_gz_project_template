// Code generated by rclgo-gen. DO NOT EDIT.

package vision_msgs_msg
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	geometry_msgs_msg "github.com/iema-group/goros2/msgs/geometry_msgs/msg"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <vision_msgs/msg/bounding_box3_d.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("vision_msgs/BoundingBox3D", BoundingBox3DTypeSupport)
	typemap.RegisterMessage("vision_msgs/msg/BoundingBox3D", BoundingBox3DTypeSupport)
}

type BoundingBox3D struct {
	Center geometry_msgs_msg.Pose `yaml:"center" json:"center" mapstructure:"center"`// The 3D position and orientation of the bounding box center
	Size geometry_msgs_msg.Vector3 `yaml:"size" json:"size" mapstructure:"size"`// The total size of the bounding box, in meters, surrounding the object's centerpose.
}

// NewBoundingBox3D creates a new BoundingBox3D with default values.
func NewBoundingBox3D() *BoundingBox3D {
	self := BoundingBox3D{}
	self.SetDefaults()
	return &self
}

func (t *BoundingBox3D) Clone() *BoundingBox3D {
	c := &BoundingBox3D{}
	c.Center = *t.Center.Clone()
	c.Size = *t.Size.Clone()
	return c
}

func (t *BoundingBox3D) CloneMsg() types.Message {
	return t.Clone()
}

func (t *BoundingBox3D) SetDefaults() {
	t.Center.SetDefaults()
	t.Size.SetDefaults()
}

func (t *BoundingBox3D) GetTypeSupport() types.MessageTypeSupport {
	return BoundingBox3DTypeSupport
}

// BoundingBox3DPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type BoundingBox3DPublisher struct {
	*rclgo.Publisher
}

// NewBoundingBox3DPublisher creates and returns a new publisher for the
// BoundingBox3D
func NewBoundingBox3DPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*BoundingBox3DPublisher, error) {
	pub, err := node.NewPublisher(topic_name, BoundingBox3DTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &BoundingBox3DPublisher{pub}, nil
}

func (p *BoundingBox3DPublisher) Publish(msg *BoundingBox3D) error {
	return p.Publisher.Publish(msg)
}

// BoundingBox3DSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type BoundingBox3DSubscription struct {
	*rclgo.Subscription
}

// BoundingBox3DSubscriptionCallback type is used to provide a subscription
// handler function for a BoundingBox3DSubscription.
type BoundingBox3DSubscriptionCallback func(msg *BoundingBox3D, info *rclgo.MessageInfo, err error)

// NewBoundingBox3DSubscription creates and returns a new subscription for the
// BoundingBox3D
func NewBoundingBox3DSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback BoundingBox3DSubscriptionCallback) (*BoundingBox3DSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg BoundingBox3D
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, BoundingBox3DTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &BoundingBox3DSubscription{sub}, nil
}

func (s *BoundingBox3DSubscription) TakeMessage(out *BoundingBox3D) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneBoundingBox3DSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneBoundingBox3DSlice(dst, src []BoundingBox3D) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var BoundingBox3DTypeSupport types.MessageTypeSupport = _BoundingBox3DTypeSupport{}

type _BoundingBox3DTypeSupport struct{}

func (t _BoundingBox3DTypeSupport) New() types.Message {
	return NewBoundingBox3D()
}

func (t _BoundingBox3DTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.vision_msgs__msg__BoundingBox3D
	return (unsafe.Pointer)(C.vision_msgs__msg__BoundingBox3D__create())
}

func (t _BoundingBox3DTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.vision_msgs__msg__BoundingBox3D__destroy((*C.vision_msgs__msg__BoundingBox3D)(pointer_to_free))
}

func (t _BoundingBox3DTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*BoundingBox3D)
	mem := (*C.vision_msgs__msg__BoundingBox3D)(dst)
	geometry_msgs_msg.PoseTypeSupport.AsCStruct(unsafe.Pointer(&mem.center), &m.Center)
	geometry_msgs_msg.Vector3TypeSupport.AsCStruct(unsafe.Pointer(&mem.size), &m.Size)
}

func (t _BoundingBox3DTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*BoundingBox3D)
	mem := (*C.vision_msgs__msg__BoundingBox3D)(ros2_message_buffer)
	geometry_msgs_msg.PoseTypeSupport.AsGoStruct(&m.Center, unsafe.Pointer(&mem.center))
	geometry_msgs_msg.Vector3TypeSupport.AsGoStruct(&m.Size, unsafe.Pointer(&mem.size))
}

func (t _BoundingBox3DTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__vision_msgs__msg__BoundingBox3D())
}

type CBoundingBox3D = C.vision_msgs__msg__BoundingBox3D
type CBoundingBox3D__Sequence = C.vision_msgs__msg__BoundingBox3D__Sequence

func BoundingBox3D__Sequence_to_Go(goSlice *[]BoundingBox3D, cSlice CBoundingBox3D__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]BoundingBox3D, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		BoundingBox3DTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func BoundingBox3D__Sequence_to_C(cSlice *CBoundingBox3D__Sequence, goSlice []BoundingBox3D) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.vision_msgs__msg__BoundingBox3D)(C.malloc(C.sizeof_struct_vision_msgs__msg__BoundingBox3D * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		BoundingBox3DTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func BoundingBox3D__Array_to_Go(goSlice []BoundingBox3D, cSlice []CBoundingBox3D) {
	for i := 0; i < len(cSlice); i++ {
		BoundingBox3DTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func BoundingBox3D__Array_to_C(cSlice []CBoundingBox3D, goSlice []BoundingBox3D) {
	for i := 0; i < len(goSlice); i++ {
		BoundingBox3DTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
