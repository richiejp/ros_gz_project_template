// Code generated by rclgo-gen. DO NOT EDIT.

package vision_msgs_msg
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	std_msgs_msg "github.com/iema-group/goros2/msgs/std_msgs/msg"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <vision_msgs/msg/detection2_d_array.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("vision_msgs/Detection2DArray", Detection2DArrayTypeSupport)
	typemap.RegisterMessage("vision_msgs/msg/Detection2DArray", Detection2DArrayTypeSupport)
}

type Detection2DArray struct {
	Header std_msgs_msg.Header `yaml:"header" json:"header" mapstructure:"header"`
	Detections []Detection2D `yaml:"detections" json:"detections" mapstructure:"detections"`// A list of the detected proposals. A multi-proposal detector might generatethis list with many candidate detections generated from a single input.
}

// NewDetection2DArray creates a new Detection2DArray with default values.
func NewDetection2DArray() *Detection2DArray {
	self := Detection2DArray{}
	self.SetDefaults()
	return &self
}

func (t *Detection2DArray) Clone() *Detection2DArray {
	c := &Detection2DArray{}
	c.Header = *t.Header.Clone()
	if t.Detections != nil {
		c.Detections = make([]Detection2D, len(t.Detections))
		CloneDetection2DSlice(c.Detections, t.Detections)
	}
	return c
}

func (t *Detection2DArray) CloneMsg() types.Message {
	return t.Clone()
}

func (t *Detection2DArray) SetDefaults() {
	t.Header.SetDefaults()
	t.Detections = nil
}

func (t *Detection2DArray) GetTypeSupport() types.MessageTypeSupport {
	return Detection2DArrayTypeSupport
}

// Detection2DArrayPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type Detection2DArrayPublisher struct {
	*rclgo.Publisher
}

// NewDetection2DArrayPublisher creates and returns a new publisher for the
// Detection2DArray
func NewDetection2DArrayPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*Detection2DArrayPublisher, error) {
	pub, err := node.NewPublisher(topic_name, Detection2DArrayTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &Detection2DArrayPublisher{pub}, nil
}

func (p *Detection2DArrayPublisher) Publish(msg *Detection2DArray) error {
	return p.Publisher.Publish(msg)
}

// Detection2DArraySubscription wraps rclgo.Subscription to provide type safe helper
// functions
type Detection2DArraySubscription struct {
	*rclgo.Subscription
}

// Detection2DArraySubscriptionCallback type is used to provide a subscription
// handler function for a Detection2DArraySubscription.
type Detection2DArraySubscriptionCallback func(msg *Detection2DArray, info *rclgo.MessageInfo, err error)

// NewDetection2DArraySubscription creates and returns a new subscription for the
// Detection2DArray
func NewDetection2DArraySubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback Detection2DArraySubscriptionCallback) (*Detection2DArraySubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg Detection2DArray
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, Detection2DArrayTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &Detection2DArraySubscription{sub}, nil
}

func (s *Detection2DArraySubscription) TakeMessage(out *Detection2DArray) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneDetection2DArraySlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneDetection2DArraySlice(dst, src []Detection2DArray) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var Detection2DArrayTypeSupport types.MessageTypeSupport = _Detection2DArrayTypeSupport{}

type _Detection2DArrayTypeSupport struct{}

func (t _Detection2DArrayTypeSupport) New() types.Message {
	return NewDetection2DArray()
}

func (t _Detection2DArrayTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.vision_msgs__msg__Detection2DArray
	return (unsafe.Pointer)(C.vision_msgs__msg__Detection2DArray__create())
}

func (t _Detection2DArrayTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.vision_msgs__msg__Detection2DArray__destroy((*C.vision_msgs__msg__Detection2DArray)(pointer_to_free))
}

func (t _Detection2DArrayTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*Detection2DArray)
	mem := (*C.vision_msgs__msg__Detection2DArray)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	Detection2D__Sequence_to_C(&mem.detections, m.Detections)
}

func (t _Detection2DArrayTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*Detection2DArray)
	mem := (*C.vision_msgs__msg__Detection2DArray)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	Detection2D__Sequence_to_Go(&m.Detections, mem.detections)
}

func (t _Detection2DArrayTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__vision_msgs__msg__Detection2DArray())
}

type CDetection2DArray = C.vision_msgs__msg__Detection2DArray
type CDetection2DArray__Sequence = C.vision_msgs__msg__Detection2DArray__Sequence

func Detection2DArray__Sequence_to_Go(goSlice *[]Detection2DArray, cSlice CDetection2DArray__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Detection2DArray, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		Detection2DArrayTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func Detection2DArray__Sequence_to_C(cSlice *CDetection2DArray__Sequence, goSlice []Detection2DArray) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.vision_msgs__msg__Detection2DArray)(C.malloc(C.sizeof_struct_vision_msgs__msg__Detection2DArray * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		Detection2DArrayTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func Detection2DArray__Array_to_Go(goSlice []Detection2DArray, cSlice []CDetection2DArray) {
	for i := 0; i < len(cSlice); i++ {
		Detection2DArrayTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func Detection2DArray__Array_to_C(cSlice []CDetection2DArray, goSlice []Detection2DArray) {
	for i := 0; i < len(goSlice); i++ {
		Detection2DArrayTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
