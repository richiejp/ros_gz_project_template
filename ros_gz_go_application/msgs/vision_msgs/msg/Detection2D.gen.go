// Code generated by rclgo-gen. DO NOT EDIT.

package vision_msgs_msg
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	primitives "github.com/ATIinc/rclgo/pkg/rclgo/primitives"
	std_msgs_msg "github.com/iema-group/goros2/msgs/std_msgs/msg"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <vision_msgs/msg/detection2_d.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("vision_msgs/Detection2D", Detection2DTypeSupport)
	typemap.RegisterMessage("vision_msgs/msg/Detection2D", Detection2DTypeSupport)
}

type Detection2D struct {
	Header std_msgs_msg.Header `yaml:"header" json:"header" mapstructure:"header"`
	Results []ObjectHypothesisWithPose `yaml:"results" json:"results" mapstructure:"results"`// Class probabilities
	Bbox BoundingBox2D `yaml:"bbox" json:"bbox" mapstructure:"bbox"`// 2D bounding box surrounding the object.
	Id string `yaml:"id" json:"id" mapstructure:"id"`// ID used for consistency across multiple detection messages. Detectionsof the same object in different detection messages should have the same id.This field may be empty.
}

// NewDetection2D creates a new Detection2D with default values.
func NewDetection2D() *Detection2D {
	self := Detection2D{}
	self.SetDefaults()
	return &self
}

func (t *Detection2D) Clone() *Detection2D {
	c := &Detection2D{}
	c.Header = *t.Header.Clone()
	if t.Results != nil {
		c.Results = make([]ObjectHypothesisWithPose, len(t.Results))
		CloneObjectHypothesisWithPoseSlice(c.Results, t.Results)
	}
	c.Bbox = *t.Bbox.Clone()
	c.Id = t.Id
	return c
}

func (t *Detection2D) CloneMsg() types.Message {
	return t.Clone()
}

func (t *Detection2D) SetDefaults() {
	t.Header.SetDefaults()
	t.Results = nil
	t.Bbox.SetDefaults()
	t.Id = ""
}

func (t *Detection2D) GetTypeSupport() types.MessageTypeSupport {
	return Detection2DTypeSupport
}

// Detection2DPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type Detection2DPublisher struct {
	*rclgo.Publisher
}

// NewDetection2DPublisher creates and returns a new publisher for the
// Detection2D
func NewDetection2DPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*Detection2DPublisher, error) {
	pub, err := node.NewPublisher(topic_name, Detection2DTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &Detection2DPublisher{pub}, nil
}

func (p *Detection2DPublisher) Publish(msg *Detection2D) error {
	return p.Publisher.Publish(msg)
}

// Detection2DSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type Detection2DSubscription struct {
	*rclgo.Subscription
}

// Detection2DSubscriptionCallback type is used to provide a subscription
// handler function for a Detection2DSubscription.
type Detection2DSubscriptionCallback func(msg *Detection2D, info *rclgo.MessageInfo, err error)

// NewDetection2DSubscription creates and returns a new subscription for the
// Detection2D
func NewDetection2DSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback Detection2DSubscriptionCallback) (*Detection2DSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg Detection2D
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, Detection2DTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &Detection2DSubscription{sub}, nil
}

func (s *Detection2DSubscription) TakeMessage(out *Detection2D) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneDetection2DSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneDetection2DSlice(dst, src []Detection2D) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var Detection2DTypeSupport types.MessageTypeSupport = _Detection2DTypeSupport{}

type _Detection2DTypeSupport struct{}

func (t _Detection2DTypeSupport) New() types.Message {
	return NewDetection2D()
}

func (t _Detection2DTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.vision_msgs__msg__Detection2D
	return (unsafe.Pointer)(C.vision_msgs__msg__Detection2D__create())
}

func (t _Detection2DTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.vision_msgs__msg__Detection2D__destroy((*C.vision_msgs__msg__Detection2D)(pointer_to_free))
}

func (t _Detection2DTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*Detection2D)
	mem := (*C.vision_msgs__msg__Detection2D)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	ObjectHypothesisWithPose__Sequence_to_C(&mem.results, m.Results)
	BoundingBox2DTypeSupport.AsCStruct(unsafe.Pointer(&mem.bbox), &m.Bbox)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.id), m.Id)
}

func (t _Detection2DTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*Detection2D)
	mem := (*C.vision_msgs__msg__Detection2D)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	ObjectHypothesisWithPose__Sequence_to_Go(&m.Results, mem.results)
	BoundingBox2DTypeSupport.AsGoStruct(&m.Bbox, unsafe.Pointer(&mem.bbox))
	primitives.StringAsGoStruct(&m.Id, unsafe.Pointer(&mem.id))
}

func (t _Detection2DTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__vision_msgs__msg__Detection2D())
}

type CDetection2D = C.vision_msgs__msg__Detection2D
type CDetection2D__Sequence = C.vision_msgs__msg__Detection2D__Sequence

func Detection2D__Sequence_to_Go(goSlice *[]Detection2D, cSlice CDetection2D__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Detection2D, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		Detection2DTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func Detection2D__Sequence_to_C(cSlice *CDetection2D__Sequence, goSlice []Detection2D) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.vision_msgs__msg__Detection2D)(C.malloc(C.sizeof_struct_vision_msgs__msg__Detection2D * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		Detection2DTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func Detection2D__Array_to_Go(goSlice []Detection2D, cSlice []CDetection2D) {
	for i := 0; i < len(cSlice); i++ {
		Detection2DTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func Detection2D__Array_to_C(cSlice []CDetection2D, goSlice []Detection2D) {
	for i := 0; i < len(goSlice); i++ {
		Detection2DTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
