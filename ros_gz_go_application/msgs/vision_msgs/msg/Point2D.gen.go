// Code generated by rclgo-gen. DO NOT EDIT.

package vision_msgs_msg
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <vision_msgs/msg/point2_d.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("vision_msgs/Point2D", Point2DTypeSupport)
	typemap.RegisterMessage("vision_msgs/msg/Point2D", Point2DTypeSupport)
}

type Point2D struct {
	X float64 `yaml:"x" json:"x" mapstructure:"x"`
	Y float64 `yaml:"y" json:"y" mapstructure:"y"`
}

// NewPoint2D creates a new Point2D with default values.
func NewPoint2D() *Point2D {
	self := Point2D{}
	self.SetDefaults()
	return &self
}

func (t *Point2D) Clone() *Point2D {
	c := &Point2D{}
	c.X = t.X
	c.Y = t.Y
	return c
}

func (t *Point2D) CloneMsg() types.Message {
	return t.Clone()
}

func (t *Point2D) SetDefaults() {
	t.X = 0
	t.Y = 0
}

func (t *Point2D) GetTypeSupport() types.MessageTypeSupport {
	return Point2DTypeSupport
}

// Point2DPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type Point2DPublisher struct {
	*rclgo.Publisher
}

// NewPoint2DPublisher creates and returns a new publisher for the
// Point2D
func NewPoint2DPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*Point2DPublisher, error) {
	pub, err := node.NewPublisher(topic_name, Point2DTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &Point2DPublisher{pub}, nil
}

func (p *Point2DPublisher) Publish(msg *Point2D) error {
	return p.Publisher.Publish(msg)
}

// Point2DSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type Point2DSubscription struct {
	*rclgo.Subscription
}

// Point2DSubscriptionCallback type is used to provide a subscription
// handler function for a Point2DSubscription.
type Point2DSubscriptionCallback func(msg *Point2D, info *rclgo.MessageInfo, err error)

// NewPoint2DSubscription creates and returns a new subscription for the
// Point2D
func NewPoint2DSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback Point2DSubscriptionCallback) (*Point2DSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg Point2D
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, Point2DTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &Point2DSubscription{sub}, nil
}

func (s *Point2DSubscription) TakeMessage(out *Point2D) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// ClonePoint2DSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func ClonePoint2DSlice(dst, src []Point2D) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var Point2DTypeSupport types.MessageTypeSupport = _Point2DTypeSupport{}

type _Point2DTypeSupport struct{}

func (t _Point2DTypeSupport) New() types.Message {
	return NewPoint2D()
}

func (t _Point2DTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.vision_msgs__msg__Point2D
	return (unsafe.Pointer)(C.vision_msgs__msg__Point2D__create())
}

func (t _Point2DTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.vision_msgs__msg__Point2D__destroy((*C.vision_msgs__msg__Point2D)(pointer_to_free))
}

func (t _Point2DTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*Point2D)
	mem := (*C.vision_msgs__msg__Point2D)(dst)
	mem.x = C.double(m.X)
	mem.y = C.double(m.Y)
}

func (t _Point2DTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*Point2D)
	mem := (*C.vision_msgs__msg__Point2D)(ros2_message_buffer)
	m.X = float64(mem.x)
	m.Y = float64(mem.y)
}

func (t _Point2DTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__vision_msgs__msg__Point2D())
}

type CPoint2D = C.vision_msgs__msg__Point2D
type CPoint2D__Sequence = C.vision_msgs__msg__Point2D__Sequence

func Point2D__Sequence_to_Go(goSlice *[]Point2D, cSlice CPoint2D__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Point2D, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		Point2DTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func Point2D__Sequence_to_C(cSlice *CPoint2D__Sequence, goSlice []Point2D) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.vision_msgs__msg__Point2D)(C.malloc(C.sizeof_struct_vision_msgs__msg__Point2D * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		Point2DTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func Point2D__Array_to_Go(goSlice []Point2D, cSlice []CPoint2D) {
	for i := 0; i < len(cSlice); i++ {
		Point2DTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func Point2D__Array_to_C(cSlice []CPoint2D, goSlice []Point2D) {
	for i := 0; i < len(goSlice); i++ {
		Point2DTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
