// Code generated by rclgo-gen. DO NOT EDIT.

package vision_msgs_msg
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <vision_msgs/msg/bounding_box2_d.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("vision_msgs/BoundingBox2D", BoundingBox2DTypeSupport)
	typemap.RegisterMessage("vision_msgs/msg/BoundingBox2D", BoundingBox2DTypeSupport)
}

type BoundingBox2D struct {
	Center Pose2D `yaml:"center" json:"center" mapstructure:"center"`// The 2D position (in pixels) and orientation of the bounding box center.
	SizeX float64 `yaml:"size_x" json:"size_x" mapstructure:"size_x"`// The total size (in pixels) of the bounding box surrounding the object relativeto the pose of its center.
	SizeY float64 `yaml:"size_y" json:"size_y" mapstructure:"size_y"`
}

// NewBoundingBox2D creates a new BoundingBox2D with default values.
func NewBoundingBox2D() *BoundingBox2D {
	self := BoundingBox2D{}
	self.SetDefaults()
	return &self
}

func (t *BoundingBox2D) Clone() *BoundingBox2D {
	c := &BoundingBox2D{}
	c.Center = *t.Center.Clone()
	c.SizeX = t.SizeX
	c.SizeY = t.SizeY
	return c
}

func (t *BoundingBox2D) CloneMsg() types.Message {
	return t.Clone()
}

func (t *BoundingBox2D) SetDefaults() {
	t.Center.SetDefaults()
	t.SizeX = 0
	t.SizeY = 0
}

func (t *BoundingBox2D) GetTypeSupport() types.MessageTypeSupport {
	return BoundingBox2DTypeSupport
}

// BoundingBox2DPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type BoundingBox2DPublisher struct {
	*rclgo.Publisher
}

// NewBoundingBox2DPublisher creates and returns a new publisher for the
// BoundingBox2D
func NewBoundingBox2DPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*BoundingBox2DPublisher, error) {
	pub, err := node.NewPublisher(topic_name, BoundingBox2DTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &BoundingBox2DPublisher{pub}, nil
}

func (p *BoundingBox2DPublisher) Publish(msg *BoundingBox2D) error {
	return p.Publisher.Publish(msg)
}

// BoundingBox2DSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type BoundingBox2DSubscription struct {
	*rclgo.Subscription
}

// BoundingBox2DSubscriptionCallback type is used to provide a subscription
// handler function for a BoundingBox2DSubscription.
type BoundingBox2DSubscriptionCallback func(msg *BoundingBox2D, info *rclgo.MessageInfo, err error)

// NewBoundingBox2DSubscription creates and returns a new subscription for the
// BoundingBox2D
func NewBoundingBox2DSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback BoundingBox2DSubscriptionCallback) (*BoundingBox2DSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg BoundingBox2D
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, BoundingBox2DTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &BoundingBox2DSubscription{sub}, nil
}

func (s *BoundingBox2DSubscription) TakeMessage(out *BoundingBox2D) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneBoundingBox2DSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneBoundingBox2DSlice(dst, src []BoundingBox2D) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var BoundingBox2DTypeSupport types.MessageTypeSupport = _BoundingBox2DTypeSupport{}

type _BoundingBox2DTypeSupport struct{}

func (t _BoundingBox2DTypeSupport) New() types.Message {
	return NewBoundingBox2D()
}

func (t _BoundingBox2DTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.vision_msgs__msg__BoundingBox2D
	return (unsafe.Pointer)(C.vision_msgs__msg__BoundingBox2D__create())
}

func (t _BoundingBox2DTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.vision_msgs__msg__BoundingBox2D__destroy((*C.vision_msgs__msg__BoundingBox2D)(pointer_to_free))
}

func (t _BoundingBox2DTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*BoundingBox2D)
	mem := (*C.vision_msgs__msg__BoundingBox2D)(dst)
	Pose2DTypeSupport.AsCStruct(unsafe.Pointer(&mem.center), &m.Center)
	mem.size_x = C.double(m.SizeX)
	mem.size_y = C.double(m.SizeY)
}

func (t _BoundingBox2DTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*BoundingBox2D)
	mem := (*C.vision_msgs__msg__BoundingBox2D)(ros2_message_buffer)
	Pose2DTypeSupport.AsGoStruct(&m.Center, unsafe.Pointer(&mem.center))
	m.SizeX = float64(mem.size_x)
	m.SizeY = float64(mem.size_y)
}

func (t _BoundingBox2DTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__vision_msgs__msg__BoundingBox2D())
}

type CBoundingBox2D = C.vision_msgs__msg__BoundingBox2D
type CBoundingBox2D__Sequence = C.vision_msgs__msg__BoundingBox2D__Sequence

func BoundingBox2D__Sequence_to_Go(goSlice *[]BoundingBox2D, cSlice CBoundingBox2D__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]BoundingBox2D, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		BoundingBox2DTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func BoundingBox2D__Sequence_to_C(cSlice *CBoundingBox2D__Sequence, goSlice []BoundingBox2D) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.vision_msgs__msg__BoundingBox2D)(C.malloc(C.sizeof_struct_vision_msgs__msg__BoundingBox2D * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		BoundingBox2DTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func BoundingBox2D__Array_to_Go(goSlice []BoundingBox2D, cSlice []CBoundingBox2D) {
	for i := 0; i < len(cSlice); i++ {
		BoundingBox2DTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func BoundingBox2D__Array_to_C(cSlice []CBoundingBox2D, goSlice []BoundingBox2D) {
	for i := 0; i < len(goSlice); i++ {
		BoundingBox2DTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
