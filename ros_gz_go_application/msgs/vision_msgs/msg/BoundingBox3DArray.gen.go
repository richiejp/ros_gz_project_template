// Code generated by rclgo-gen. DO NOT EDIT.

package vision_msgs_msg
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	std_msgs_msg "github.com/iema-group/goros2/msgs/std_msgs/msg"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <vision_msgs/msg/bounding_box3_d_array.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("vision_msgs/BoundingBox3DArray", BoundingBox3DArrayTypeSupport)
	typemap.RegisterMessage("vision_msgs/msg/BoundingBox3DArray", BoundingBox3DArrayTypeSupport)
}

type BoundingBox3DArray struct {
	Header std_msgs_msg.Header `yaml:"header" json:"header" mapstructure:"header"`
	Boxes []BoundingBox3D `yaml:"boxes" json:"boxes" mapstructure:"boxes"`
}

// NewBoundingBox3DArray creates a new BoundingBox3DArray with default values.
func NewBoundingBox3DArray() *BoundingBox3DArray {
	self := BoundingBox3DArray{}
	self.SetDefaults()
	return &self
}

func (t *BoundingBox3DArray) Clone() *BoundingBox3DArray {
	c := &BoundingBox3DArray{}
	c.Header = *t.Header.Clone()
	if t.Boxes != nil {
		c.Boxes = make([]BoundingBox3D, len(t.Boxes))
		CloneBoundingBox3DSlice(c.Boxes, t.Boxes)
	}
	return c
}

func (t *BoundingBox3DArray) CloneMsg() types.Message {
	return t.Clone()
}

func (t *BoundingBox3DArray) SetDefaults() {
	t.Header.SetDefaults()
	t.Boxes = nil
}

func (t *BoundingBox3DArray) GetTypeSupport() types.MessageTypeSupport {
	return BoundingBox3DArrayTypeSupport
}

// BoundingBox3DArrayPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type BoundingBox3DArrayPublisher struct {
	*rclgo.Publisher
}

// NewBoundingBox3DArrayPublisher creates and returns a new publisher for the
// BoundingBox3DArray
func NewBoundingBox3DArrayPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*BoundingBox3DArrayPublisher, error) {
	pub, err := node.NewPublisher(topic_name, BoundingBox3DArrayTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &BoundingBox3DArrayPublisher{pub}, nil
}

func (p *BoundingBox3DArrayPublisher) Publish(msg *BoundingBox3DArray) error {
	return p.Publisher.Publish(msg)
}

// BoundingBox3DArraySubscription wraps rclgo.Subscription to provide type safe helper
// functions
type BoundingBox3DArraySubscription struct {
	*rclgo.Subscription
}

// BoundingBox3DArraySubscriptionCallback type is used to provide a subscription
// handler function for a BoundingBox3DArraySubscription.
type BoundingBox3DArraySubscriptionCallback func(msg *BoundingBox3DArray, info *rclgo.MessageInfo, err error)

// NewBoundingBox3DArraySubscription creates and returns a new subscription for the
// BoundingBox3DArray
func NewBoundingBox3DArraySubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback BoundingBox3DArraySubscriptionCallback) (*BoundingBox3DArraySubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg BoundingBox3DArray
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, BoundingBox3DArrayTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &BoundingBox3DArraySubscription{sub}, nil
}

func (s *BoundingBox3DArraySubscription) TakeMessage(out *BoundingBox3DArray) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneBoundingBox3DArraySlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneBoundingBox3DArraySlice(dst, src []BoundingBox3DArray) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var BoundingBox3DArrayTypeSupport types.MessageTypeSupport = _BoundingBox3DArrayTypeSupport{}

type _BoundingBox3DArrayTypeSupport struct{}

func (t _BoundingBox3DArrayTypeSupport) New() types.Message {
	return NewBoundingBox3DArray()
}

func (t _BoundingBox3DArrayTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.vision_msgs__msg__BoundingBox3DArray
	return (unsafe.Pointer)(C.vision_msgs__msg__BoundingBox3DArray__create())
}

func (t _BoundingBox3DArrayTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.vision_msgs__msg__BoundingBox3DArray__destroy((*C.vision_msgs__msg__BoundingBox3DArray)(pointer_to_free))
}

func (t _BoundingBox3DArrayTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*BoundingBox3DArray)
	mem := (*C.vision_msgs__msg__BoundingBox3DArray)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	BoundingBox3D__Sequence_to_C(&mem.boxes, m.Boxes)
}

func (t _BoundingBox3DArrayTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*BoundingBox3DArray)
	mem := (*C.vision_msgs__msg__BoundingBox3DArray)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	BoundingBox3D__Sequence_to_Go(&m.Boxes, mem.boxes)
}

func (t _BoundingBox3DArrayTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__vision_msgs__msg__BoundingBox3DArray())
}

type CBoundingBox3DArray = C.vision_msgs__msg__BoundingBox3DArray
type CBoundingBox3DArray__Sequence = C.vision_msgs__msg__BoundingBox3DArray__Sequence

func BoundingBox3DArray__Sequence_to_Go(goSlice *[]BoundingBox3DArray, cSlice CBoundingBox3DArray__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]BoundingBox3DArray, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		BoundingBox3DArrayTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func BoundingBox3DArray__Sequence_to_C(cSlice *CBoundingBox3DArray__Sequence, goSlice []BoundingBox3DArray) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.vision_msgs__msg__BoundingBox3DArray)(C.malloc(C.sizeof_struct_vision_msgs__msg__BoundingBox3DArray * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		BoundingBox3DArrayTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func BoundingBox3DArray__Array_to_Go(goSlice []BoundingBox3DArray, cSlice []CBoundingBox3DArray) {
	for i := 0; i < len(cSlice); i++ {
		BoundingBox3DArrayTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func BoundingBox3DArray__Array_to_C(cSlice []CBoundingBox3DArray, goSlice []BoundingBox3DArray) {
	for i := 0; i < len(goSlice); i++ {
		BoundingBox3DArrayTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
