// Code generated by rclgo-gen. DO NOT EDIT.

package vision_msgs_msg
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	std_msgs_msg "github.com/iema-group/goros2/msgs/std_msgs/msg"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <vision_msgs/msg/detection3_d_array.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("vision_msgs/Detection3DArray", Detection3DArrayTypeSupport)
	typemap.RegisterMessage("vision_msgs/msg/Detection3DArray", Detection3DArrayTypeSupport)
}

type Detection3DArray struct {
	Header std_msgs_msg.Header `yaml:"header" json:"header" mapstructure:"header"`
	Detections []Detection3D `yaml:"detections" json:"detections" mapstructure:"detections"`// A list of the detected proposals. A multi-proposal detector might generatethis list with many candidate detections generated from a single input.
}

// NewDetection3DArray creates a new Detection3DArray with default values.
func NewDetection3DArray() *Detection3DArray {
	self := Detection3DArray{}
	self.SetDefaults()
	return &self
}

func (t *Detection3DArray) Clone() *Detection3DArray {
	c := &Detection3DArray{}
	c.Header = *t.Header.Clone()
	if t.Detections != nil {
		c.Detections = make([]Detection3D, len(t.Detections))
		CloneDetection3DSlice(c.Detections, t.Detections)
	}
	return c
}

func (t *Detection3DArray) CloneMsg() types.Message {
	return t.Clone()
}

func (t *Detection3DArray) SetDefaults() {
	t.Header.SetDefaults()
	t.Detections = nil
}

func (t *Detection3DArray) GetTypeSupport() types.MessageTypeSupport {
	return Detection3DArrayTypeSupport
}

// Detection3DArrayPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type Detection3DArrayPublisher struct {
	*rclgo.Publisher
}

// NewDetection3DArrayPublisher creates and returns a new publisher for the
// Detection3DArray
func NewDetection3DArrayPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*Detection3DArrayPublisher, error) {
	pub, err := node.NewPublisher(topic_name, Detection3DArrayTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &Detection3DArrayPublisher{pub}, nil
}

func (p *Detection3DArrayPublisher) Publish(msg *Detection3DArray) error {
	return p.Publisher.Publish(msg)
}

// Detection3DArraySubscription wraps rclgo.Subscription to provide type safe helper
// functions
type Detection3DArraySubscription struct {
	*rclgo.Subscription
}

// Detection3DArraySubscriptionCallback type is used to provide a subscription
// handler function for a Detection3DArraySubscription.
type Detection3DArraySubscriptionCallback func(msg *Detection3DArray, info *rclgo.MessageInfo, err error)

// NewDetection3DArraySubscription creates and returns a new subscription for the
// Detection3DArray
func NewDetection3DArraySubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback Detection3DArraySubscriptionCallback) (*Detection3DArraySubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg Detection3DArray
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, Detection3DArrayTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &Detection3DArraySubscription{sub}, nil
}

func (s *Detection3DArraySubscription) TakeMessage(out *Detection3DArray) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneDetection3DArraySlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneDetection3DArraySlice(dst, src []Detection3DArray) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var Detection3DArrayTypeSupport types.MessageTypeSupport = _Detection3DArrayTypeSupport{}

type _Detection3DArrayTypeSupport struct{}

func (t _Detection3DArrayTypeSupport) New() types.Message {
	return NewDetection3DArray()
}

func (t _Detection3DArrayTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.vision_msgs__msg__Detection3DArray
	return (unsafe.Pointer)(C.vision_msgs__msg__Detection3DArray__create())
}

func (t _Detection3DArrayTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.vision_msgs__msg__Detection3DArray__destroy((*C.vision_msgs__msg__Detection3DArray)(pointer_to_free))
}

func (t _Detection3DArrayTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*Detection3DArray)
	mem := (*C.vision_msgs__msg__Detection3DArray)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	Detection3D__Sequence_to_C(&mem.detections, m.Detections)
}

func (t _Detection3DArrayTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*Detection3DArray)
	mem := (*C.vision_msgs__msg__Detection3DArray)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	Detection3D__Sequence_to_Go(&m.Detections, mem.detections)
}

func (t _Detection3DArrayTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__vision_msgs__msg__Detection3DArray())
}

type CDetection3DArray = C.vision_msgs__msg__Detection3DArray
type CDetection3DArray__Sequence = C.vision_msgs__msg__Detection3DArray__Sequence

func Detection3DArray__Sequence_to_Go(goSlice *[]Detection3DArray, cSlice CDetection3DArray__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Detection3DArray, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		Detection3DArrayTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func Detection3DArray__Sequence_to_C(cSlice *CDetection3DArray__Sequence, goSlice []Detection3DArray) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.vision_msgs__msg__Detection3DArray)(C.malloc(C.sizeof_struct_vision_msgs__msg__Detection3DArray * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		Detection3DArrayTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func Detection3DArray__Array_to_Go(goSlice []Detection3DArray, cSlice []CDetection3DArray) {
	for i := 0; i < len(cSlice); i++ {
		Detection3DArrayTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func Detection3DArray__Array_to_C(cSlice []CDetection3DArray, goSlice []Detection3DArray) {
	for i := 0; i < len(goSlice); i++ {
		Detection3DArrayTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
