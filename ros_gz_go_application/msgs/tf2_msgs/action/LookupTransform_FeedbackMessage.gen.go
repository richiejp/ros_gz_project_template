// Code generated by rclgo-gen. DO NOT EDIT.

package tf2_msgs_action
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	unique_identifier_msgs_msg "github.com/iema-group/goros2/msgs/unique_identifier_msgs/msg"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <tf2_msgs/action/lookup_transform.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("tf2_msgs/LookupTransform_FeedbackMessage", LookupTransform_FeedbackMessageTypeSupport)
	typemap.RegisterMessage("tf2_msgs/action/LookupTransform_FeedbackMessage", LookupTransform_FeedbackMessageTypeSupport)
}

type LookupTransform_FeedbackMessage struct {
	GoalID unique_identifier_msgs_msg.UUID `yaml:"goal_id" json:"goal_id" mapstructure:"goal_id"`
	Feedback LookupTransform_Feedback `yaml:"feedback" json:"feedback" mapstructure:"feedback"`
}

// NewLookupTransform_FeedbackMessage creates a new LookupTransform_FeedbackMessage with default values.
func NewLookupTransform_FeedbackMessage() *LookupTransform_FeedbackMessage {
	self := LookupTransform_FeedbackMessage{}
	self.SetDefaults()
	return &self
}

func (t *LookupTransform_FeedbackMessage) Clone() *LookupTransform_FeedbackMessage {
	c := &LookupTransform_FeedbackMessage{}
	c.GoalID = *t.GoalID.Clone()
	c.Feedback = *t.Feedback.Clone()
	return c
}

func (t *LookupTransform_FeedbackMessage) CloneMsg() types.Message {
	return t.Clone()
}

func (t *LookupTransform_FeedbackMessage) SetDefaults() {
	t.GoalID.SetDefaults()
	t.Feedback.SetDefaults()
}

func (t *LookupTransform_FeedbackMessage) GetTypeSupport() types.MessageTypeSupport {
	return LookupTransform_FeedbackMessageTypeSupport
}
func (t *LookupTransform_FeedbackMessage) GetGoalID() *types.GoalID {
	return (*types.GoalID)(&t.GoalID.Uuid)
}

func (t *LookupTransform_FeedbackMessage) SetGoalID(id *types.GoalID) {
	t.GoalID.Uuid = *id
}

// LookupTransform_FeedbackMessagePublisher wraps rclgo.Publisher to provide type safe helper
// functions
type LookupTransform_FeedbackMessagePublisher struct {
	*rclgo.Publisher
}

// NewLookupTransform_FeedbackMessagePublisher creates and returns a new publisher for the
// LookupTransform_FeedbackMessage
func NewLookupTransform_FeedbackMessagePublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*LookupTransform_FeedbackMessagePublisher, error) {
	pub, err := node.NewPublisher(topic_name, LookupTransform_FeedbackMessageTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &LookupTransform_FeedbackMessagePublisher{pub}, nil
}

func (p *LookupTransform_FeedbackMessagePublisher) Publish(msg *LookupTransform_FeedbackMessage) error {
	return p.Publisher.Publish(msg)
}

// LookupTransform_FeedbackMessageSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type LookupTransform_FeedbackMessageSubscription struct {
	*rclgo.Subscription
}

// LookupTransform_FeedbackMessageSubscriptionCallback type is used to provide a subscription
// handler function for a LookupTransform_FeedbackMessageSubscription.
type LookupTransform_FeedbackMessageSubscriptionCallback func(msg *LookupTransform_FeedbackMessage, info *rclgo.MessageInfo, err error)

// NewLookupTransform_FeedbackMessageSubscription creates and returns a new subscription for the
// LookupTransform_FeedbackMessage
func NewLookupTransform_FeedbackMessageSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback LookupTransform_FeedbackMessageSubscriptionCallback) (*LookupTransform_FeedbackMessageSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg LookupTransform_FeedbackMessage
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, LookupTransform_FeedbackMessageTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &LookupTransform_FeedbackMessageSubscription{sub}, nil
}

func (s *LookupTransform_FeedbackMessageSubscription) TakeMessage(out *LookupTransform_FeedbackMessage) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneLookupTransform_FeedbackMessageSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneLookupTransform_FeedbackMessageSlice(dst, src []LookupTransform_FeedbackMessage) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var LookupTransform_FeedbackMessageTypeSupport types.MessageTypeSupport = _LookupTransform_FeedbackMessageTypeSupport{}

type _LookupTransform_FeedbackMessageTypeSupport struct{}

func (t _LookupTransform_FeedbackMessageTypeSupport) New() types.Message {
	return NewLookupTransform_FeedbackMessage()
}

func (t _LookupTransform_FeedbackMessageTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.tf2_msgs__action__LookupTransform_FeedbackMessage
	return (unsafe.Pointer)(C.tf2_msgs__action__LookupTransform_FeedbackMessage__create())
}

func (t _LookupTransform_FeedbackMessageTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.tf2_msgs__action__LookupTransform_FeedbackMessage__destroy((*C.tf2_msgs__action__LookupTransform_FeedbackMessage)(pointer_to_free))
}

func (t _LookupTransform_FeedbackMessageTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*LookupTransform_FeedbackMessage)
	mem := (*C.tf2_msgs__action__LookupTransform_FeedbackMessage)(dst)
	unique_identifier_msgs_msg.UUIDTypeSupport.AsCStruct(unsafe.Pointer(&mem.goal_id), &m.GoalID)
	LookupTransform_FeedbackTypeSupport.AsCStruct(unsafe.Pointer(&mem.feedback), &m.Feedback)
}

func (t _LookupTransform_FeedbackMessageTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*LookupTransform_FeedbackMessage)
	mem := (*C.tf2_msgs__action__LookupTransform_FeedbackMessage)(ros2_message_buffer)
	unique_identifier_msgs_msg.UUIDTypeSupport.AsGoStruct(&m.GoalID, unsafe.Pointer(&mem.goal_id))
	LookupTransform_FeedbackTypeSupport.AsGoStruct(&m.Feedback, unsafe.Pointer(&mem.feedback))
}

func (t _LookupTransform_FeedbackMessageTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__tf2_msgs__action__LookupTransform_FeedbackMessage())
}

type CLookupTransform_FeedbackMessage = C.tf2_msgs__action__LookupTransform_FeedbackMessage
type CLookupTransform_FeedbackMessage__Sequence = C.tf2_msgs__action__LookupTransform_FeedbackMessage__Sequence

func LookupTransform_FeedbackMessage__Sequence_to_Go(goSlice *[]LookupTransform_FeedbackMessage, cSlice CLookupTransform_FeedbackMessage__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]LookupTransform_FeedbackMessage, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		LookupTransform_FeedbackMessageTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func LookupTransform_FeedbackMessage__Sequence_to_C(cSlice *CLookupTransform_FeedbackMessage__Sequence, goSlice []LookupTransform_FeedbackMessage) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.tf2_msgs__action__LookupTransform_FeedbackMessage)(C.malloc(C.sizeof_struct_tf2_msgs__action__LookupTransform_FeedbackMessage * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		LookupTransform_FeedbackMessageTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func LookupTransform_FeedbackMessage__Array_to_Go(goSlice []LookupTransform_FeedbackMessage, cSlice []CLookupTransform_FeedbackMessage) {
	for i := 0; i < len(cSlice); i++ {
		LookupTransform_FeedbackMessageTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func LookupTransform_FeedbackMessage__Array_to_C(cSlice []CLookupTransform_FeedbackMessage, goSlice []LookupTransform_FeedbackMessage) {
	for i := 0; i < len(goSlice); i++ {
		LookupTransform_FeedbackMessageTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
