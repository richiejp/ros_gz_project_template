// Code generated by rclgo-gen. DO NOT EDIT.

package tf2_msgs_msg
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	geometry_msgs_msg "github.com/iema-group/goros2/msgs/geometry_msgs/msg"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <tf2_msgs/msg/tf_message.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("tf2_msgs/TFMessage", TFMessageTypeSupport)
	typemap.RegisterMessage("tf2_msgs/msg/TFMessage", TFMessageTypeSupport)
}

type TFMessage struct {
	Transforms []geometry_msgs_msg.TransformStamped `yaml:"transforms" json:"transforms" mapstructure:"transforms"`
}

// NewTFMessage creates a new TFMessage with default values.
func NewTFMessage() *TFMessage {
	self := TFMessage{}
	self.SetDefaults()
	return &self
}

func (t *TFMessage) Clone() *TFMessage {
	c := &TFMessage{}
	if t.Transforms != nil {
		c.Transforms = make([]geometry_msgs_msg.TransformStamped, len(t.Transforms))
		geometry_msgs_msg.CloneTransformStampedSlice(c.Transforms, t.Transforms)
	}
	return c
}

func (t *TFMessage) CloneMsg() types.Message {
	return t.Clone()
}

func (t *TFMessage) SetDefaults() {
	t.Transforms = nil
}

func (t *TFMessage) GetTypeSupport() types.MessageTypeSupport {
	return TFMessageTypeSupport
}

// TFMessagePublisher wraps rclgo.Publisher to provide type safe helper
// functions
type TFMessagePublisher struct {
	*rclgo.Publisher
}

// NewTFMessagePublisher creates and returns a new publisher for the
// TFMessage
func NewTFMessagePublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*TFMessagePublisher, error) {
	pub, err := node.NewPublisher(topic_name, TFMessageTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &TFMessagePublisher{pub}, nil
}

func (p *TFMessagePublisher) Publish(msg *TFMessage) error {
	return p.Publisher.Publish(msg)
}

// TFMessageSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type TFMessageSubscription struct {
	*rclgo.Subscription
}

// TFMessageSubscriptionCallback type is used to provide a subscription
// handler function for a TFMessageSubscription.
type TFMessageSubscriptionCallback func(msg *TFMessage, info *rclgo.MessageInfo, err error)

// NewTFMessageSubscription creates and returns a new subscription for the
// TFMessage
func NewTFMessageSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback TFMessageSubscriptionCallback) (*TFMessageSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg TFMessage
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, TFMessageTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &TFMessageSubscription{sub}, nil
}

func (s *TFMessageSubscription) TakeMessage(out *TFMessage) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneTFMessageSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneTFMessageSlice(dst, src []TFMessage) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var TFMessageTypeSupport types.MessageTypeSupport = _TFMessageTypeSupport{}

type _TFMessageTypeSupport struct{}

func (t _TFMessageTypeSupport) New() types.Message {
	return NewTFMessage()
}

func (t _TFMessageTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.tf2_msgs__msg__TFMessage
	return (unsafe.Pointer)(C.tf2_msgs__msg__TFMessage__create())
}

func (t _TFMessageTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.tf2_msgs__msg__TFMessage__destroy((*C.tf2_msgs__msg__TFMessage)(pointer_to_free))
}

func (t _TFMessageTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*TFMessage)
	mem := (*C.tf2_msgs__msg__TFMessage)(dst)
	geometry_msgs_msg.TransformStamped__Sequence_to_C((*geometry_msgs_msg.CTransformStamped__Sequence)(unsafe.Pointer(&mem.transforms)), m.Transforms)
}

func (t _TFMessageTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*TFMessage)
	mem := (*C.tf2_msgs__msg__TFMessage)(ros2_message_buffer)
	geometry_msgs_msg.TransformStamped__Sequence_to_Go(&m.Transforms, *(*geometry_msgs_msg.CTransformStamped__Sequence)(unsafe.Pointer(&mem.transforms)))
}

func (t _TFMessageTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__tf2_msgs__msg__TFMessage())
}

type CTFMessage = C.tf2_msgs__msg__TFMessage
type CTFMessage__Sequence = C.tf2_msgs__msg__TFMessage__Sequence

func TFMessage__Sequence_to_Go(goSlice *[]TFMessage, cSlice CTFMessage__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]TFMessage, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		TFMessageTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func TFMessage__Sequence_to_C(cSlice *CTFMessage__Sequence, goSlice []TFMessage) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.tf2_msgs__msg__TFMessage)(C.malloc(C.sizeof_struct_tf2_msgs__msg__TFMessage * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		TFMessageTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func TFMessage__Array_to_Go(goSlice []TFMessage, cSlice []CTFMessage) {
	for i := 0; i < len(cSlice); i++ {
		TFMessageTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func TFMessage__Array_to_C(cSlice []CTFMessage, goSlice []TFMessage) {
	for i := 0; i < len(goSlice); i++ {
		TFMessageTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
