// Code generated by rclgo-gen. DO NOT EDIT.

package visualization_msgs_msg
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	primitives "github.com/ATIinc/rclgo/pkg/rclgo/primitives"
	geometry_msgs_msg "github.com/iema-group/goros2/msgs/geometry_msgs/msg"
	std_msgs_msg "github.com/iema-group/goros2/msgs/std_msgs/msg"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <visualization_msgs/msg/interactive_marker_feedback.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("visualization_msgs/InteractiveMarkerFeedback", InteractiveMarkerFeedbackTypeSupport)
	typemap.RegisterMessage("visualization_msgs/msg/InteractiveMarkerFeedback", InteractiveMarkerFeedbackTypeSupport)
}
const (
	InteractiveMarkerFeedback_KEEP_ALIVE uint8 = 0// Type of the eventKEEP_ALIVE: sent while dragging to keep up control of the markerMENU_SELECT: a menu entry has been selectedBUTTON_CLICK: a button control has been clickedPOSE_UPDATE: the pose has been changed using one of the controls
	InteractiveMarkerFeedback_POSE_UPDATE uint8 = 1
	InteractiveMarkerFeedback_MENU_SELECT uint8 = 2
	InteractiveMarkerFeedback_BUTTON_CLICK uint8 = 3
	InteractiveMarkerFeedback_MOUSE_DOWN uint8 = 4
	InteractiveMarkerFeedback_MOUSE_UP uint8 = 5
)

type InteractiveMarkerFeedback struct {
	Header std_msgs_msg.Header `yaml:"header" json:"header" mapstructure:"header"`// Time/frame info.
	ClientId string `yaml:"client_id" json:"client_id" mapstructure:"client_id"`// Identifying string. Must be unique in the topic namespace.
	MarkerName string `yaml:"marker_name" json:"marker_name" mapstructure:"marker_name"`// Specifies which interactive marker and control this message refers to
	ControlName string `yaml:"control_name" json:"control_name" mapstructure:"control_name"`
	EventType uint8 `yaml:"event_type" json:"event_type" mapstructure:"event_type"`
	Pose geometry_msgs_msg.Pose `yaml:"pose" json:"pose" mapstructure:"pose"`// Current pose of the markerNote: Has to be valid for all feedback types.
	MenuEntryId uint32 `yaml:"menu_entry_id" json:"menu_entry_id" mapstructure:"menu_entry_id"`// Contains the ID of the selected menu entryOnly valid for MENU_SELECT events.
	MousePoint geometry_msgs_msg.Point `yaml:"mouse_point" json:"mouse_point" mapstructure:"mouse_point"`// If event_type is BUTTON_CLICK, MOUSE_DOWN, or MOUSE_UP, mouse_pointmay contain the 3 dimensional position of the event on thecontrol.  If it does, mouse_point_valid will be true.  mouse_pointwill be relative to the frame listed in the header.
	MousePointValid bool `yaml:"mouse_point_valid" json:"mouse_point_valid" mapstructure:"mouse_point_valid"`
}

// NewInteractiveMarkerFeedback creates a new InteractiveMarkerFeedback with default values.
func NewInteractiveMarkerFeedback() *InteractiveMarkerFeedback {
	self := InteractiveMarkerFeedback{}
	self.SetDefaults()
	return &self
}

func (t *InteractiveMarkerFeedback) Clone() *InteractiveMarkerFeedback {
	c := &InteractiveMarkerFeedback{}
	c.Header = *t.Header.Clone()
	c.ClientId = t.ClientId
	c.MarkerName = t.MarkerName
	c.ControlName = t.ControlName
	c.EventType = t.EventType
	c.Pose = *t.Pose.Clone()
	c.MenuEntryId = t.MenuEntryId
	c.MousePoint = *t.MousePoint.Clone()
	c.MousePointValid = t.MousePointValid
	return c
}

func (t *InteractiveMarkerFeedback) CloneMsg() types.Message {
	return t.Clone()
}

func (t *InteractiveMarkerFeedback) SetDefaults() {
	t.Header.SetDefaults()
	t.ClientId = ""
	t.MarkerName = ""
	t.ControlName = ""
	t.EventType = 0
	t.Pose.SetDefaults()
	t.MenuEntryId = 0
	t.MousePoint.SetDefaults()
	t.MousePointValid = false
}

func (t *InteractiveMarkerFeedback) GetTypeSupport() types.MessageTypeSupport {
	return InteractiveMarkerFeedbackTypeSupport
}

// InteractiveMarkerFeedbackPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type InteractiveMarkerFeedbackPublisher struct {
	*rclgo.Publisher
}

// NewInteractiveMarkerFeedbackPublisher creates and returns a new publisher for the
// InteractiveMarkerFeedback
func NewInteractiveMarkerFeedbackPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*InteractiveMarkerFeedbackPublisher, error) {
	pub, err := node.NewPublisher(topic_name, InteractiveMarkerFeedbackTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &InteractiveMarkerFeedbackPublisher{pub}, nil
}

func (p *InteractiveMarkerFeedbackPublisher) Publish(msg *InteractiveMarkerFeedback) error {
	return p.Publisher.Publish(msg)
}

// InteractiveMarkerFeedbackSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type InteractiveMarkerFeedbackSubscription struct {
	*rclgo.Subscription
}

// InteractiveMarkerFeedbackSubscriptionCallback type is used to provide a subscription
// handler function for a InteractiveMarkerFeedbackSubscription.
type InteractiveMarkerFeedbackSubscriptionCallback func(msg *InteractiveMarkerFeedback, info *rclgo.MessageInfo, err error)

// NewInteractiveMarkerFeedbackSubscription creates and returns a new subscription for the
// InteractiveMarkerFeedback
func NewInteractiveMarkerFeedbackSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback InteractiveMarkerFeedbackSubscriptionCallback) (*InteractiveMarkerFeedbackSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg InteractiveMarkerFeedback
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, InteractiveMarkerFeedbackTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &InteractiveMarkerFeedbackSubscription{sub}, nil
}

func (s *InteractiveMarkerFeedbackSubscription) TakeMessage(out *InteractiveMarkerFeedback) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneInteractiveMarkerFeedbackSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneInteractiveMarkerFeedbackSlice(dst, src []InteractiveMarkerFeedback) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var InteractiveMarkerFeedbackTypeSupport types.MessageTypeSupport = _InteractiveMarkerFeedbackTypeSupport{}

type _InteractiveMarkerFeedbackTypeSupport struct{}

func (t _InteractiveMarkerFeedbackTypeSupport) New() types.Message {
	return NewInteractiveMarkerFeedback()
}

func (t _InteractiveMarkerFeedbackTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.visualization_msgs__msg__InteractiveMarkerFeedback
	return (unsafe.Pointer)(C.visualization_msgs__msg__InteractiveMarkerFeedback__create())
}

func (t _InteractiveMarkerFeedbackTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.visualization_msgs__msg__InteractiveMarkerFeedback__destroy((*C.visualization_msgs__msg__InteractiveMarkerFeedback)(pointer_to_free))
}

func (t _InteractiveMarkerFeedbackTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*InteractiveMarkerFeedback)
	mem := (*C.visualization_msgs__msg__InteractiveMarkerFeedback)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.client_id), m.ClientId)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.marker_name), m.MarkerName)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.control_name), m.ControlName)
	mem.event_type = C.uint8_t(m.EventType)
	geometry_msgs_msg.PoseTypeSupport.AsCStruct(unsafe.Pointer(&mem.pose), &m.Pose)
	mem.menu_entry_id = C.uint32_t(m.MenuEntryId)
	geometry_msgs_msg.PointTypeSupport.AsCStruct(unsafe.Pointer(&mem.mouse_point), &m.MousePoint)
	mem.mouse_point_valid = C.bool(m.MousePointValid)
}

func (t _InteractiveMarkerFeedbackTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*InteractiveMarkerFeedback)
	mem := (*C.visualization_msgs__msg__InteractiveMarkerFeedback)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	primitives.StringAsGoStruct(&m.ClientId, unsafe.Pointer(&mem.client_id))
	primitives.StringAsGoStruct(&m.MarkerName, unsafe.Pointer(&mem.marker_name))
	primitives.StringAsGoStruct(&m.ControlName, unsafe.Pointer(&mem.control_name))
	m.EventType = uint8(mem.event_type)
	geometry_msgs_msg.PoseTypeSupport.AsGoStruct(&m.Pose, unsafe.Pointer(&mem.pose))
	m.MenuEntryId = uint32(mem.menu_entry_id)
	geometry_msgs_msg.PointTypeSupport.AsGoStruct(&m.MousePoint, unsafe.Pointer(&mem.mouse_point))
	m.MousePointValid = bool(mem.mouse_point_valid)
}

func (t _InteractiveMarkerFeedbackTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__visualization_msgs__msg__InteractiveMarkerFeedback())
}

type CInteractiveMarkerFeedback = C.visualization_msgs__msg__InteractiveMarkerFeedback
type CInteractiveMarkerFeedback__Sequence = C.visualization_msgs__msg__InteractiveMarkerFeedback__Sequence

func InteractiveMarkerFeedback__Sequence_to_Go(goSlice *[]InteractiveMarkerFeedback, cSlice CInteractiveMarkerFeedback__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]InteractiveMarkerFeedback, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		InteractiveMarkerFeedbackTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func InteractiveMarkerFeedback__Sequence_to_C(cSlice *CInteractiveMarkerFeedback__Sequence, goSlice []InteractiveMarkerFeedback) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.visualization_msgs__msg__InteractiveMarkerFeedback)(C.malloc(C.sizeof_struct_visualization_msgs__msg__InteractiveMarkerFeedback * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		InteractiveMarkerFeedbackTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func InteractiveMarkerFeedback__Array_to_Go(goSlice []InteractiveMarkerFeedback, cSlice []CInteractiveMarkerFeedback) {
	for i := 0; i < len(cSlice); i++ {
		InteractiveMarkerFeedbackTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func InteractiveMarkerFeedback__Array_to_C(cSlice []CInteractiveMarkerFeedback, goSlice []InteractiveMarkerFeedback) {
	for i := 0; i < len(goSlice); i++ {
		InteractiveMarkerFeedbackTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
