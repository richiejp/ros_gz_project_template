// Code generated by rclgo-gen. DO NOT EDIT.

package visualization_msgs_msg
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <visualization_msgs/msg/uv_coordinate.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("visualization_msgs/UVCoordinate", UVCoordinateTypeSupport)
	typemap.RegisterMessage("visualization_msgs/msg/UVCoordinate", UVCoordinateTypeSupport)
}

type UVCoordinate struct {
	U float32 `yaml:"u" json:"u" mapstructure:"u"`// Location of the pixel as a ratio of the width of a 2D texture.Values should be in range: [0.0-1.0].
	V float32 `yaml:"v" json:"v" mapstructure:"v"`
}

// NewUVCoordinate creates a new UVCoordinate with default values.
func NewUVCoordinate() *UVCoordinate {
	self := UVCoordinate{}
	self.SetDefaults()
	return &self
}

func (t *UVCoordinate) Clone() *UVCoordinate {
	c := &UVCoordinate{}
	c.U = t.U
	c.V = t.V
	return c
}

func (t *UVCoordinate) CloneMsg() types.Message {
	return t.Clone()
}

func (t *UVCoordinate) SetDefaults() {
	t.U = 0
	t.V = 0
}

func (t *UVCoordinate) GetTypeSupport() types.MessageTypeSupport {
	return UVCoordinateTypeSupport
}

// UVCoordinatePublisher wraps rclgo.Publisher to provide type safe helper
// functions
type UVCoordinatePublisher struct {
	*rclgo.Publisher
}

// NewUVCoordinatePublisher creates and returns a new publisher for the
// UVCoordinate
func NewUVCoordinatePublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*UVCoordinatePublisher, error) {
	pub, err := node.NewPublisher(topic_name, UVCoordinateTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &UVCoordinatePublisher{pub}, nil
}

func (p *UVCoordinatePublisher) Publish(msg *UVCoordinate) error {
	return p.Publisher.Publish(msg)
}

// UVCoordinateSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type UVCoordinateSubscription struct {
	*rclgo.Subscription
}

// UVCoordinateSubscriptionCallback type is used to provide a subscription
// handler function for a UVCoordinateSubscription.
type UVCoordinateSubscriptionCallback func(msg *UVCoordinate, info *rclgo.MessageInfo, err error)

// NewUVCoordinateSubscription creates and returns a new subscription for the
// UVCoordinate
func NewUVCoordinateSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback UVCoordinateSubscriptionCallback) (*UVCoordinateSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg UVCoordinate
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, UVCoordinateTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &UVCoordinateSubscription{sub}, nil
}

func (s *UVCoordinateSubscription) TakeMessage(out *UVCoordinate) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneUVCoordinateSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneUVCoordinateSlice(dst, src []UVCoordinate) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var UVCoordinateTypeSupport types.MessageTypeSupport = _UVCoordinateTypeSupport{}

type _UVCoordinateTypeSupport struct{}

func (t _UVCoordinateTypeSupport) New() types.Message {
	return NewUVCoordinate()
}

func (t _UVCoordinateTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.visualization_msgs__msg__UVCoordinate
	return (unsafe.Pointer)(C.visualization_msgs__msg__UVCoordinate__create())
}

func (t _UVCoordinateTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.visualization_msgs__msg__UVCoordinate__destroy((*C.visualization_msgs__msg__UVCoordinate)(pointer_to_free))
}

func (t _UVCoordinateTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*UVCoordinate)
	mem := (*C.visualization_msgs__msg__UVCoordinate)(dst)
	mem.u = C.float(m.U)
	mem.v = C.float(m.V)
}

func (t _UVCoordinateTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*UVCoordinate)
	mem := (*C.visualization_msgs__msg__UVCoordinate)(ros2_message_buffer)
	m.U = float32(mem.u)
	m.V = float32(mem.v)
}

func (t _UVCoordinateTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__visualization_msgs__msg__UVCoordinate())
}

type CUVCoordinate = C.visualization_msgs__msg__UVCoordinate
type CUVCoordinate__Sequence = C.visualization_msgs__msg__UVCoordinate__Sequence

func UVCoordinate__Sequence_to_Go(goSlice *[]UVCoordinate, cSlice CUVCoordinate__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]UVCoordinate, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		UVCoordinateTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func UVCoordinate__Sequence_to_C(cSlice *CUVCoordinate__Sequence, goSlice []UVCoordinate) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.visualization_msgs__msg__UVCoordinate)(C.malloc(C.sizeof_struct_visualization_msgs__msg__UVCoordinate * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		UVCoordinateTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func UVCoordinate__Array_to_Go(goSlice []UVCoordinate, cSlice []CUVCoordinate) {
	for i := 0; i < len(cSlice); i++ {
		UVCoordinateTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func UVCoordinate__Array_to_C(cSlice []CUVCoordinate, goSlice []UVCoordinate) {
	for i := 0; i < len(goSlice); i++ {
		UVCoordinateTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
