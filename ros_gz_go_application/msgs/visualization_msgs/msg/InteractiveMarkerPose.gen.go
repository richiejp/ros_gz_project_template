// Code generated by rclgo-gen. DO NOT EDIT.

package visualization_msgs_msg
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	primitives "github.com/ATIinc/rclgo/pkg/rclgo/primitives"
	geometry_msgs_msg "github.com/iema-group/goros2/msgs/geometry_msgs/msg"
	std_msgs_msg "github.com/iema-group/goros2/msgs/std_msgs/msg"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <visualization_msgs/msg/interactive_marker_pose.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("visualization_msgs/InteractiveMarkerPose", InteractiveMarkerPoseTypeSupport)
	typemap.RegisterMessage("visualization_msgs/msg/InteractiveMarkerPose", InteractiveMarkerPoseTypeSupport)
}

type InteractiveMarkerPose struct {
	Header std_msgs_msg.Header `yaml:"header" json:"header" mapstructure:"header"`// Time/frame info.
	Pose geometry_msgs_msg.Pose `yaml:"pose" json:"pose" mapstructure:"pose"`// Initial pose. Also, defines the pivot point for rotations.
	Name string `yaml:"name" json:"name" mapstructure:"name"`// Identifying string. Must be globally unique inthe topic that this message is sent through.
}

// NewInteractiveMarkerPose creates a new InteractiveMarkerPose with default values.
func NewInteractiveMarkerPose() *InteractiveMarkerPose {
	self := InteractiveMarkerPose{}
	self.SetDefaults()
	return &self
}

func (t *InteractiveMarkerPose) Clone() *InteractiveMarkerPose {
	c := &InteractiveMarkerPose{}
	c.Header = *t.Header.Clone()
	c.Pose = *t.Pose.Clone()
	c.Name = t.Name
	return c
}

func (t *InteractiveMarkerPose) CloneMsg() types.Message {
	return t.Clone()
}

func (t *InteractiveMarkerPose) SetDefaults() {
	t.Header.SetDefaults()
	t.Pose.SetDefaults()
	t.Name = ""
}

func (t *InteractiveMarkerPose) GetTypeSupport() types.MessageTypeSupport {
	return InteractiveMarkerPoseTypeSupport
}

// InteractiveMarkerPosePublisher wraps rclgo.Publisher to provide type safe helper
// functions
type InteractiveMarkerPosePublisher struct {
	*rclgo.Publisher
}

// NewInteractiveMarkerPosePublisher creates and returns a new publisher for the
// InteractiveMarkerPose
func NewInteractiveMarkerPosePublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*InteractiveMarkerPosePublisher, error) {
	pub, err := node.NewPublisher(topic_name, InteractiveMarkerPoseTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &InteractiveMarkerPosePublisher{pub}, nil
}

func (p *InteractiveMarkerPosePublisher) Publish(msg *InteractiveMarkerPose) error {
	return p.Publisher.Publish(msg)
}

// InteractiveMarkerPoseSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type InteractiveMarkerPoseSubscription struct {
	*rclgo.Subscription
}

// InteractiveMarkerPoseSubscriptionCallback type is used to provide a subscription
// handler function for a InteractiveMarkerPoseSubscription.
type InteractiveMarkerPoseSubscriptionCallback func(msg *InteractiveMarkerPose, info *rclgo.MessageInfo, err error)

// NewInteractiveMarkerPoseSubscription creates and returns a new subscription for the
// InteractiveMarkerPose
func NewInteractiveMarkerPoseSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback InteractiveMarkerPoseSubscriptionCallback) (*InteractiveMarkerPoseSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg InteractiveMarkerPose
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, InteractiveMarkerPoseTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &InteractiveMarkerPoseSubscription{sub}, nil
}

func (s *InteractiveMarkerPoseSubscription) TakeMessage(out *InteractiveMarkerPose) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneInteractiveMarkerPoseSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneInteractiveMarkerPoseSlice(dst, src []InteractiveMarkerPose) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var InteractiveMarkerPoseTypeSupport types.MessageTypeSupport = _InteractiveMarkerPoseTypeSupport{}

type _InteractiveMarkerPoseTypeSupport struct{}

func (t _InteractiveMarkerPoseTypeSupport) New() types.Message {
	return NewInteractiveMarkerPose()
}

func (t _InteractiveMarkerPoseTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.visualization_msgs__msg__InteractiveMarkerPose
	return (unsafe.Pointer)(C.visualization_msgs__msg__InteractiveMarkerPose__create())
}

func (t _InteractiveMarkerPoseTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.visualization_msgs__msg__InteractiveMarkerPose__destroy((*C.visualization_msgs__msg__InteractiveMarkerPose)(pointer_to_free))
}

func (t _InteractiveMarkerPoseTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*InteractiveMarkerPose)
	mem := (*C.visualization_msgs__msg__InteractiveMarkerPose)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	geometry_msgs_msg.PoseTypeSupport.AsCStruct(unsafe.Pointer(&mem.pose), &m.Pose)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.name), m.Name)
}

func (t _InteractiveMarkerPoseTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*InteractiveMarkerPose)
	mem := (*C.visualization_msgs__msg__InteractiveMarkerPose)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	geometry_msgs_msg.PoseTypeSupport.AsGoStruct(&m.Pose, unsafe.Pointer(&mem.pose))
	primitives.StringAsGoStruct(&m.Name, unsafe.Pointer(&mem.name))
}

func (t _InteractiveMarkerPoseTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__visualization_msgs__msg__InteractiveMarkerPose())
}

type CInteractiveMarkerPose = C.visualization_msgs__msg__InteractiveMarkerPose
type CInteractiveMarkerPose__Sequence = C.visualization_msgs__msg__InteractiveMarkerPose__Sequence

func InteractiveMarkerPose__Sequence_to_Go(goSlice *[]InteractiveMarkerPose, cSlice CInteractiveMarkerPose__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]InteractiveMarkerPose, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		InteractiveMarkerPoseTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func InteractiveMarkerPose__Sequence_to_C(cSlice *CInteractiveMarkerPose__Sequence, goSlice []InteractiveMarkerPose) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.visualization_msgs__msg__InteractiveMarkerPose)(C.malloc(C.sizeof_struct_visualization_msgs__msg__InteractiveMarkerPose * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		InteractiveMarkerPoseTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func InteractiveMarkerPose__Array_to_Go(goSlice []InteractiveMarkerPose, cSlice []CInteractiveMarkerPose) {
	for i := 0; i < len(cSlice); i++ {
		InteractiveMarkerPoseTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func InteractiveMarkerPose__Array_to_C(cSlice []CInteractiveMarkerPose, goSlice []InteractiveMarkerPose) {
	for i := 0; i < len(goSlice); i++ {
		InteractiveMarkerPoseTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
