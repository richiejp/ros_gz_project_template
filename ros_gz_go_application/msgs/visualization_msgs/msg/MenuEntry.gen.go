// Code generated by rclgo-gen. DO NOT EDIT.

package visualization_msgs_msg
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	primitives "github.com/ATIinc/rclgo/pkg/rclgo/primitives"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <visualization_msgs/msg/menu_entry.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("visualization_msgs/MenuEntry", MenuEntryTypeSupport)
	typemap.RegisterMessage("visualization_msgs/msg/MenuEntry", MenuEntryTypeSupport)
}
const (
	MenuEntry_FEEDBACK uint8 = 0// Command_type stores the type of response desired when this menuentry is clicked.FEEDBACK: send an InteractiveMarkerFeedback message with menu_entry_id set to this entry's id.ROSRUN: execute "rosrun" with arguments given in the command field (above).ROSLAUNCH: execute "roslaunch" with arguments given in the command field (above).
	MenuEntry_ROSRUN uint8 = 1
	MenuEntry_ROSLAUNCH uint8 = 2
)

type MenuEntry struct {
	Id uint32 `yaml:"id" json:"id" mapstructure:"id"`// ID is a number for each menu entry.  Must be unique within thecontrol, and should never be 0.
	ParentId uint32 `yaml:"parent_id" json:"parent_id" mapstructure:"parent_id"`// ID of the parent of this menu entry, if it is a submenu.  If thismenu entry is a top-level entry, set parent_id to 0.
	Title string `yaml:"title" json:"title" mapstructure:"title"`// menu / entry title
	Command string `yaml:"command" json:"command" mapstructure:"command"`// Arguments to command indicated by command_type (below)
	CommandType uint8 `yaml:"command_type" json:"command_type" mapstructure:"command_type"`
}

// NewMenuEntry creates a new MenuEntry with default values.
func NewMenuEntry() *MenuEntry {
	self := MenuEntry{}
	self.SetDefaults()
	return &self
}

func (t *MenuEntry) Clone() *MenuEntry {
	c := &MenuEntry{}
	c.Id = t.Id
	c.ParentId = t.ParentId
	c.Title = t.Title
	c.Command = t.Command
	c.CommandType = t.CommandType
	return c
}

func (t *MenuEntry) CloneMsg() types.Message {
	return t.Clone()
}

func (t *MenuEntry) SetDefaults() {
	t.Id = 0
	t.ParentId = 0
	t.Title = ""
	t.Command = ""
	t.CommandType = 0
}

func (t *MenuEntry) GetTypeSupport() types.MessageTypeSupport {
	return MenuEntryTypeSupport
}

// MenuEntryPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type MenuEntryPublisher struct {
	*rclgo.Publisher
}

// NewMenuEntryPublisher creates and returns a new publisher for the
// MenuEntry
func NewMenuEntryPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*MenuEntryPublisher, error) {
	pub, err := node.NewPublisher(topic_name, MenuEntryTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &MenuEntryPublisher{pub}, nil
}

func (p *MenuEntryPublisher) Publish(msg *MenuEntry) error {
	return p.Publisher.Publish(msg)
}

// MenuEntrySubscription wraps rclgo.Subscription to provide type safe helper
// functions
type MenuEntrySubscription struct {
	*rclgo.Subscription
}

// MenuEntrySubscriptionCallback type is used to provide a subscription
// handler function for a MenuEntrySubscription.
type MenuEntrySubscriptionCallback func(msg *MenuEntry, info *rclgo.MessageInfo, err error)

// NewMenuEntrySubscription creates and returns a new subscription for the
// MenuEntry
func NewMenuEntrySubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback MenuEntrySubscriptionCallback) (*MenuEntrySubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg MenuEntry
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, MenuEntryTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &MenuEntrySubscription{sub}, nil
}

func (s *MenuEntrySubscription) TakeMessage(out *MenuEntry) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneMenuEntrySlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneMenuEntrySlice(dst, src []MenuEntry) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var MenuEntryTypeSupport types.MessageTypeSupport = _MenuEntryTypeSupport{}

type _MenuEntryTypeSupport struct{}

func (t _MenuEntryTypeSupport) New() types.Message {
	return NewMenuEntry()
}

func (t _MenuEntryTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.visualization_msgs__msg__MenuEntry
	return (unsafe.Pointer)(C.visualization_msgs__msg__MenuEntry__create())
}

func (t _MenuEntryTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.visualization_msgs__msg__MenuEntry__destroy((*C.visualization_msgs__msg__MenuEntry)(pointer_to_free))
}

func (t _MenuEntryTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*MenuEntry)
	mem := (*C.visualization_msgs__msg__MenuEntry)(dst)
	mem.id = C.uint32_t(m.Id)
	mem.parent_id = C.uint32_t(m.ParentId)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.title), m.Title)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.command), m.Command)
	mem.command_type = C.uint8_t(m.CommandType)
}

func (t _MenuEntryTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*MenuEntry)
	mem := (*C.visualization_msgs__msg__MenuEntry)(ros2_message_buffer)
	m.Id = uint32(mem.id)
	m.ParentId = uint32(mem.parent_id)
	primitives.StringAsGoStruct(&m.Title, unsafe.Pointer(&mem.title))
	primitives.StringAsGoStruct(&m.Command, unsafe.Pointer(&mem.command))
	m.CommandType = uint8(mem.command_type)
}

func (t _MenuEntryTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__visualization_msgs__msg__MenuEntry())
}

type CMenuEntry = C.visualization_msgs__msg__MenuEntry
type CMenuEntry__Sequence = C.visualization_msgs__msg__MenuEntry__Sequence

func MenuEntry__Sequence_to_Go(goSlice *[]MenuEntry, cSlice CMenuEntry__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]MenuEntry, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		MenuEntryTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func MenuEntry__Sequence_to_C(cSlice *CMenuEntry__Sequence, goSlice []MenuEntry) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.visualization_msgs__msg__MenuEntry)(C.malloc(C.sizeof_struct_visualization_msgs__msg__MenuEntry * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		MenuEntryTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func MenuEntry__Array_to_Go(goSlice []MenuEntry, cSlice []CMenuEntry) {
	for i := 0; i < len(cSlice); i++ {
		MenuEntryTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func MenuEntry__Array_to_C(cSlice []CMenuEntry, goSlice []MenuEntry) {
	for i := 0; i < len(goSlice); i++ {
		MenuEntryTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
