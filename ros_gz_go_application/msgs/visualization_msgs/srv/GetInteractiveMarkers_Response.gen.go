// Code generated by rclgo-gen. DO NOT EDIT.

package visualization_msgs_srv
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	visualization_msgs_msg "github.com/iema-group/goros2/msgs/visualization_msgs/msg"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <visualization_msgs/srv/get_interactive_markers.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("visualization_msgs/GetInteractiveMarkers_Response", GetInteractiveMarkers_ResponseTypeSupport)
	typemap.RegisterMessage("visualization_msgs/srv/GetInteractiveMarkers_Response", GetInteractiveMarkers_ResponseTypeSupport)
}

type GetInteractiveMarkers_Response struct {
	SequenceNumber uint64 `yaml:"sequence_number" json:"sequence_number" mapstructure:"sequence_number"`// Sequence number.Set to the sequence number of the latest update messageat the time the server received the request.Clients use this to detect if any updates were missed.
	Markers []visualization_msgs_msg.InteractiveMarker `yaml:"markers" json:"markers" mapstructure:"markers"`// All interactive markers provided by the server.
}

// NewGetInteractiveMarkers_Response creates a new GetInteractiveMarkers_Response with default values.
func NewGetInteractiveMarkers_Response() *GetInteractiveMarkers_Response {
	self := GetInteractiveMarkers_Response{}
	self.SetDefaults()
	return &self
}

func (t *GetInteractiveMarkers_Response) Clone() *GetInteractiveMarkers_Response {
	c := &GetInteractiveMarkers_Response{}
	c.SequenceNumber = t.SequenceNumber
	if t.Markers != nil {
		c.Markers = make([]visualization_msgs_msg.InteractiveMarker, len(t.Markers))
		visualization_msgs_msg.CloneInteractiveMarkerSlice(c.Markers, t.Markers)
	}
	return c
}

func (t *GetInteractiveMarkers_Response) CloneMsg() types.Message {
	return t.Clone()
}

func (t *GetInteractiveMarkers_Response) SetDefaults() {
	t.SequenceNumber = 0
	t.Markers = nil
}

func (t *GetInteractiveMarkers_Response) GetTypeSupport() types.MessageTypeSupport {
	return GetInteractiveMarkers_ResponseTypeSupport
}

// GetInteractiveMarkers_ResponsePublisher wraps rclgo.Publisher to provide type safe helper
// functions
type GetInteractiveMarkers_ResponsePublisher struct {
	*rclgo.Publisher
}

// NewGetInteractiveMarkers_ResponsePublisher creates and returns a new publisher for the
// GetInteractiveMarkers_Response
func NewGetInteractiveMarkers_ResponsePublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*GetInteractiveMarkers_ResponsePublisher, error) {
	pub, err := node.NewPublisher(topic_name, GetInteractiveMarkers_ResponseTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &GetInteractiveMarkers_ResponsePublisher{pub}, nil
}

func (p *GetInteractiveMarkers_ResponsePublisher) Publish(msg *GetInteractiveMarkers_Response) error {
	return p.Publisher.Publish(msg)
}

// GetInteractiveMarkers_ResponseSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type GetInteractiveMarkers_ResponseSubscription struct {
	*rclgo.Subscription
}

// GetInteractiveMarkers_ResponseSubscriptionCallback type is used to provide a subscription
// handler function for a GetInteractiveMarkers_ResponseSubscription.
type GetInteractiveMarkers_ResponseSubscriptionCallback func(msg *GetInteractiveMarkers_Response, info *rclgo.MessageInfo, err error)

// NewGetInteractiveMarkers_ResponseSubscription creates and returns a new subscription for the
// GetInteractiveMarkers_Response
func NewGetInteractiveMarkers_ResponseSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback GetInteractiveMarkers_ResponseSubscriptionCallback) (*GetInteractiveMarkers_ResponseSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg GetInteractiveMarkers_Response
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, GetInteractiveMarkers_ResponseTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &GetInteractiveMarkers_ResponseSubscription{sub}, nil
}

func (s *GetInteractiveMarkers_ResponseSubscription) TakeMessage(out *GetInteractiveMarkers_Response) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneGetInteractiveMarkers_ResponseSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneGetInteractiveMarkers_ResponseSlice(dst, src []GetInteractiveMarkers_Response) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var GetInteractiveMarkers_ResponseTypeSupport types.MessageTypeSupport = _GetInteractiveMarkers_ResponseTypeSupport{}

type _GetInteractiveMarkers_ResponseTypeSupport struct{}

func (t _GetInteractiveMarkers_ResponseTypeSupport) New() types.Message {
	return NewGetInteractiveMarkers_Response()
}

func (t _GetInteractiveMarkers_ResponseTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.visualization_msgs__srv__GetInteractiveMarkers_Response
	return (unsafe.Pointer)(C.visualization_msgs__srv__GetInteractiveMarkers_Response__create())
}

func (t _GetInteractiveMarkers_ResponseTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.visualization_msgs__srv__GetInteractiveMarkers_Response__destroy((*C.visualization_msgs__srv__GetInteractiveMarkers_Response)(pointer_to_free))
}

func (t _GetInteractiveMarkers_ResponseTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*GetInteractiveMarkers_Response)
	mem := (*C.visualization_msgs__srv__GetInteractiveMarkers_Response)(dst)
	mem.sequence_number = C.uint64_t(m.SequenceNumber)
	visualization_msgs_msg.InteractiveMarker__Sequence_to_C((*visualization_msgs_msg.CInteractiveMarker__Sequence)(unsafe.Pointer(&mem.markers)), m.Markers)
}

func (t _GetInteractiveMarkers_ResponseTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*GetInteractiveMarkers_Response)
	mem := (*C.visualization_msgs__srv__GetInteractiveMarkers_Response)(ros2_message_buffer)
	m.SequenceNumber = uint64(mem.sequence_number)
	visualization_msgs_msg.InteractiveMarker__Sequence_to_Go(&m.Markers, *(*visualization_msgs_msg.CInteractiveMarker__Sequence)(unsafe.Pointer(&mem.markers)))
}

func (t _GetInteractiveMarkers_ResponseTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__visualization_msgs__srv__GetInteractiveMarkers_Response())
}

type CGetInteractiveMarkers_Response = C.visualization_msgs__srv__GetInteractiveMarkers_Response
type CGetInteractiveMarkers_Response__Sequence = C.visualization_msgs__srv__GetInteractiveMarkers_Response__Sequence

func GetInteractiveMarkers_Response__Sequence_to_Go(goSlice *[]GetInteractiveMarkers_Response, cSlice CGetInteractiveMarkers_Response__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]GetInteractiveMarkers_Response, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		GetInteractiveMarkers_ResponseTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func GetInteractiveMarkers_Response__Sequence_to_C(cSlice *CGetInteractiveMarkers_Response__Sequence, goSlice []GetInteractiveMarkers_Response) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.visualization_msgs__srv__GetInteractiveMarkers_Response)(C.malloc(C.sizeof_struct_visualization_msgs__srv__GetInteractiveMarkers_Response * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		GetInteractiveMarkers_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func GetInteractiveMarkers_Response__Array_to_Go(goSlice []GetInteractiveMarkers_Response, cSlice []CGetInteractiveMarkers_Response) {
	for i := 0; i < len(cSlice); i++ {
		GetInteractiveMarkers_ResponseTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func GetInteractiveMarkers_Response__Array_to_C(cSlice []CGetInteractiveMarkers_Response, goSlice []GetInteractiveMarkers_Response) {
	for i := 0; i < len(goSlice); i++ {
		GetInteractiveMarkers_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
