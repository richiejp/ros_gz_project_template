// Code generated by rclgo-gen. DO NOT EDIT.

package actuator_msgs_msg
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	primitives "github.com/ATIinc/rclgo/pkg/rclgo/primitives"
	std_msgs_msg "github.com/iema-group/goros2/msgs/std_msgs/msg"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <actuator_msgs/msg/actuators_normalized.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("actuator_msgs/ActuatorsNormalized", ActuatorsNormalizedTypeSupport)
	typemap.RegisterMessage("actuator_msgs/msg/ActuatorsNormalized", ActuatorsNormalizedTypeSupport)
}

type ActuatorsNormalized struct {
	Header std_msgs_msg.Header `yaml:"header" json:"header" mapstructure:"header"`
	Normalized []float64 `yaml:"normalized" json:"normalized" mapstructure:"normalized"`// Normalized between [-1 ... 1].
}

// NewActuatorsNormalized creates a new ActuatorsNormalized with default values.
func NewActuatorsNormalized() *ActuatorsNormalized {
	self := ActuatorsNormalized{}
	self.SetDefaults()
	return &self
}

func (t *ActuatorsNormalized) Clone() *ActuatorsNormalized {
	c := &ActuatorsNormalized{}
	c.Header = *t.Header.Clone()
	if t.Normalized != nil {
		c.Normalized = make([]float64, len(t.Normalized))
		copy(c.Normalized, t.Normalized)
	}
	return c
}

func (t *ActuatorsNormalized) CloneMsg() types.Message {
	return t.Clone()
}

func (t *ActuatorsNormalized) SetDefaults() {
	t.Header.SetDefaults()
	t.Normalized = nil
}

func (t *ActuatorsNormalized) GetTypeSupport() types.MessageTypeSupport {
	return ActuatorsNormalizedTypeSupport
}

// ActuatorsNormalizedPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type ActuatorsNormalizedPublisher struct {
	*rclgo.Publisher
}

// NewActuatorsNormalizedPublisher creates and returns a new publisher for the
// ActuatorsNormalized
func NewActuatorsNormalizedPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*ActuatorsNormalizedPublisher, error) {
	pub, err := node.NewPublisher(topic_name, ActuatorsNormalizedTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ActuatorsNormalizedPublisher{pub}, nil
}

func (p *ActuatorsNormalizedPublisher) Publish(msg *ActuatorsNormalized) error {
	return p.Publisher.Publish(msg)
}

// ActuatorsNormalizedSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type ActuatorsNormalizedSubscription struct {
	*rclgo.Subscription
}

// ActuatorsNormalizedSubscriptionCallback type is used to provide a subscription
// handler function for a ActuatorsNormalizedSubscription.
type ActuatorsNormalizedSubscriptionCallback func(msg *ActuatorsNormalized, info *rclgo.MessageInfo, err error)

// NewActuatorsNormalizedSubscription creates and returns a new subscription for the
// ActuatorsNormalized
func NewActuatorsNormalizedSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback ActuatorsNormalizedSubscriptionCallback) (*ActuatorsNormalizedSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg ActuatorsNormalized
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, ActuatorsNormalizedTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &ActuatorsNormalizedSubscription{sub}, nil
}

func (s *ActuatorsNormalizedSubscription) TakeMessage(out *ActuatorsNormalized) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneActuatorsNormalizedSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneActuatorsNormalizedSlice(dst, src []ActuatorsNormalized) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ActuatorsNormalizedTypeSupport types.MessageTypeSupport = _ActuatorsNormalizedTypeSupport{}

type _ActuatorsNormalizedTypeSupport struct{}

func (t _ActuatorsNormalizedTypeSupport) New() types.Message {
	return NewActuatorsNormalized()
}

func (t _ActuatorsNormalizedTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.actuator_msgs__msg__ActuatorsNormalized
	return (unsafe.Pointer)(C.actuator_msgs__msg__ActuatorsNormalized__create())
}

func (t _ActuatorsNormalizedTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.actuator_msgs__msg__ActuatorsNormalized__destroy((*C.actuator_msgs__msg__ActuatorsNormalized)(pointer_to_free))
}

func (t _ActuatorsNormalizedTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*ActuatorsNormalized)
	mem := (*C.actuator_msgs__msg__ActuatorsNormalized)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	primitives.Float64__Sequence_to_C((*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.normalized)), m.Normalized)
}

func (t _ActuatorsNormalizedTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*ActuatorsNormalized)
	mem := (*C.actuator_msgs__msg__ActuatorsNormalized)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	primitives.Float64__Sequence_to_Go(&m.Normalized, *(*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.normalized)))
}

func (t _ActuatorsNormalizedTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__actuator_msgs__msg__ActuatorsNormalized())
}

type CActuatorsNormalized = C.actuator_msgs__msg__ActuatorsNormalized
type CActuatorsNormalized__Sequence = C.actuator_msgs__msg__ActuatorsNormalized__Sequence

func ActuatorsNormalized__Sequence_to_Go(goSlice *[]ActuatorsNormalized, cSlice CActuatorsNormalized__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]ActuatorsNormalized, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		ActuatorsNormalizedTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func ActuatorsNormalized__Sequence_to_C(cSlice *CActuatorsNormalized__Sequence, goSlice []ActuatorsNormalized) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.actuator_msgs__msg__ActuatorsNormalized)(C.malloc(C.sizeof_struct_actuator_msgs__msg__ActuatorsNormalized * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		ActuatorsNormalizedTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func ActuatorsNormalized__Array_to_Go(goSlice []ActuatorsNormalized, cSlice []CActuatorsNormalized) {
	for i := 0; i < len(cSlice); i++ {
		ActuatorsNormalizedTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func ActuatorsNormalized__Array_to_C(cSlice []CActuatorsNormalized, goSlice []ActuatorsNormalized) {
	for i := 0; i < len(goSlice); i++ {
		ActuatorsNormalizedTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
