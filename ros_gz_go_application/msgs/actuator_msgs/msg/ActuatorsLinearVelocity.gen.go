// Code generated by rclgo-gen. DO NOT EDIT.

package actuator_msgs_msg
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	primitives "github.com/ATIinc/rclgo/pkg/rclgo/primitives"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <actuator_msgs/msg/actuators_linear_velocity.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("actuator_msgs/ActuatorsLinearVelocity", ActuatorsLinearVelocityTypeSupport)
	typemap.RegisterMessage("actuator_msgs/msg/ActuatorsLinearVelocity", ActuatorsLinearVelocityTypeSupport)
}

type ActuatorsLinearVelocity struct {
	Velocity []float64 `yaml:"velocity" json:"velocity" mapstructure:"velocity"`// Velocity of the actuators in [m/s]
}

// NewActuatorsLinearVelocity creates a new ActuatorsLinearVelocity with default values.
func NewActuatorsLinearVelocity() *ActuatorsLinearVelocity {
	self := ActuatorsLinearVelocity{}
	self.SetDefaults()
	return &self
}

func (t *ActuatorsLinearVelocity) Clone() *ActuatorsLinearVelocity {
	c := &ActuatorsLinearVelocity{}
	if t.Velocity != nil {
		c.Velocity = make([]float64, len(t.Velocity))
		copy(c.Velocity, t.Velocity)
	}
	return c
}

func (t *ActuatorsLinearVelocity) CloneMsg() types.Message {
	return t.Clone()
}

func (t *ActuatorsLinearVelocity) SetDefaults() {
	t.Velocity = nil
}

func (t *ActuatorsLinearVelocity) GetTypeSupport() types.MessageTypeSupport {
	return ActuatorsLinearVelocityTypeSupport
}

// ActuatorsLinearVelocityPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type ActuatorsLinearVelocityPublisher struct {
	*rclgo.Publisher
}

// NewActuatorsLinearVelocityPublisher creates and returns a new publisher for the
// ActuatorsLinearVelocity
func NewActuatorsLinearVelocityPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*ActuatorsLinearVelocityPublisher, error) {
	pub, err := node.NewPublisher(topic_name, ActuatorsLinearVelocityTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ActuatorsLinearVelocityPublisher{pub}, nil
}

func (p *ActuatorsLinearVelocityPublisher) Publish(msg *ActuatorsLinearVelocity) error {
	return p.Publisher.Publish(msg)
}

// ActuatorsLinearVelocitySubscription wraps rclgo.Subscription to provide type safe helper
// functions
type ActuatorsLinearVelocitySubscription struct {
	*rclgo.Subscription
}

// ActuatorsLinearVelocitySubscriptionCallback type is used to provide a subscription
// handler function for a ActuatorsLinearVelocitySubscription.
type ActuatorsLinearVelocitySubscriptionCallback func(msg *ActuatorsLinearVelocity, info *rclgo.MessageInfo, err error)

// NewActuatorsLinearVelocitySubscription creates and returns a new subscription for the
// ActuatorsLinearVelocity
func NewActuatorsLinearVelocitySubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback ActuatorsLinearVelocitySubscriptionCallback) (*ActuatorsLinearVelocitySubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg ActuatorsLinearVelocity
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, ActuatorsLinearVelocityTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &ActuatorsLinearVelocitySubscription{sub}, nil
}

func (s *ActuatorsLinearVelocitySubscription) TakeMessage(out *ActuatorsLinearVelocity) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneActuatorsLinearVelocitySlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneActuatorsLinearVelocitySlice(dst, src []ActuatorsLinearVelocity) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ActuatorsLinearVelocityTypeSupport types.MessageTypeSupport = _ActuatorsLinearVelocityTypeSupport{}

type _ActuatorsLinearVelocityTypeSupport struct{}

func (t _ActuatorsLinearVelocityTypeSupport) New() types.Message {
	return NewActuatorsLinearVelocity()
}

func (t _ActuatorsLinearVelocityTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.actuator_msgs__msg__ActuatorsLinearVelocity
	return (unsafe.Pointer)(C.actuator_msgs__msg__ActuatorsLinearVelocity__create())
}

func (t _ActuatorsLinearVelocityTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.actuator_msgs__msg__ActuatorsLinearVelocity__destroy((*C.actuator_msgs__msg__ActuatorsLinearVelocity)(pointer_to_free))
}

func (t _ActuatorsLinearVelocityTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*ActuatorsLinearVelocity)
	mem := (*C.actuator_msgs__msg__ActuatorsLinearVelocity)(dst)
	primitives.Float64__Sequence_to_C((*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.velocity)), m.Velocity)
}

func (t _ActuatorsLinearVelocityTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*ActuatorsLinearVelocity)
	mem := (*C.actuator_msgs__msg__ActuatorsLinearVelocity)(ros2_message_buffer)
	primitives.Float64__Sequence_to_Go(&m.Velocity, *(*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.velocity)))
}

func (t _ActuatorsLinearVelocityTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__actuator_msgs__msg__ActuatorsLinearVelocity())
}

type CActuatorsLinearVelocity = C.actuator_msgs__msg__ActuatorsLinearVelocity
type CActuatorsLinearVelocity__Sequence = C.actuator_msgs__msg__ActuatorsLinearVelocity__Sequence

func ActuatorsLinearVelocity__Sequence_to_Go(goSlice *[]ActuatorsLinearVelocity, cSlice CActuatorsLinearVelocity__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]ActuatorsLinearVelocity, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		ActuatorsLinearVelocityTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func ActuatorsLinearVelocity__Sequence_to_C(cSlice *CActuatorsLinearVelocity__Sequence, goSlice []ActuatorsLinearVelocity) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.actuator_msgs__msg__ActuatorsLinearVelocity)(C.malloc(C.sizeof_struct_actuator_msgs__msg__ActuatorsLinearVelocity * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		ActuatorsLinearVelocityTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func ActuatorsLinearVelocity__Array_to_Go(goSlice []ActuatorsLinearVelocity, cSlice []CActuatorsLinearVelocity) {
	for i := 0; i < len(cSlice); i++ {
		ActuatorsLinearVelocityTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func ActuatorsLinearVelocity__Array_to_C(cSlice []CActuatorsLinearVelocity, goSlice []ActuatorsLinearVelocity) {
	for i := 0; i < len(goSlice); i++ {
		ActuatorsLinearVelocityTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
