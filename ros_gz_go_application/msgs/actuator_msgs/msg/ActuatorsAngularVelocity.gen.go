// Code generated by rclgo-gen. DO NOT EDIT.

package actuator_msgs_msg
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	primitives "github.com/ATIinc/rclgo/pkg/rclgo/primitives"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <actuator_msgs/msg/actuators_angular_velocity.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("actuator_msgs/ActuatorsAngularVelocity", ActuatorsAngularVelocityTypeSupport)
	typemap.RegisterMessage("actuator_msgs/msg/ActuatorsAngularVelocity", ActuatorsAngularVelocityTypeSupport)
}

type ActuatorsAngularVelocity struct {
	Velocity []float64 `yaml:"velocity" json:"velocity" mapstructure:"velocity"`// Velocity of the actuators in [rad/s]
}

// NewActuatorsAngularVelocity creates a new ActuatorsAngularVelocity with default values.
func NewActuatorsAngularVelocity() *ActuatorsAngularVelocity {
	self := ActuatorsAngularVelocity{}
	self.SetDefaults()
	return &self
}

func (t *ActuatorsAngularVelocity) Clone() *ActuatorsAngularVelocity {
	c := &ActuatorsAngularVelocity{}
	if t.Velocity != nil {
		c.Velocity = make([]float64, len(t.Velocity))
		copy(c.Velocity, t.Velocity)
	}
	return c
}

func (t *ActuatorsAngularVelocity) CloneMsg() types.Message {
	return t.Clone()
}

func (t *ActuatorsAngularVelocity) SetDefaults() {
	t.Velocity = nil
}

func (t *ActuatorsAngularVelocity) GetTypeSupport() types.MessageTypeSupport {
	return ActuatorsAngularVelocityTypeSupport
}

// ActuatorsAngularVelocityPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type ActuatorsAngularVelocityPublisher struct {
	*rclgo.Publisher
}

// NewActuatorsAngularVelocityPublisher creates and returns a new publisher for the
// ActuatorsAngularVelocity
func NewActuatorsAngularVelocityPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*ActuatorsAngularVelocityPublisher, error) {
	pub, err := node.NewPublisher(topic_name, ActuatorsAngularVelocityTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ActuatorsAngularVelocityPublisher{pub}, nil
}

func (p *ActuatorsAngularVelocityPublisher) Publish(msg *ActuatorsAngularVelocity) error {
	return p.Publisher.Publish(msg)
}

// ActuatorsAngularVelocitySubscription wraps rclgo.Subscription to provide type safe helper
// functions
type ActuatorsAngularVelocitySubscription struct {
	*rclgo.Subscription
}

// ActuatorsAngularVelocitySubscriptionCallback type is used to provide a subscription
// handler function for a ActuatorsAngularVelocitySubscription.
type ActuatorsAngularVelocitySubscriptionCallback func(msg *ActuatorsAngularVelocity, info *rclgo.MessageInfo, err error)

// NewActuatorsAngularVelocitySubscription creates and returns a new subscription for the
// ActuatorsAngularVelocity
func NewActuatorsAngularVelocitySubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback ActuatorsAngularVelocitySubscriptionCallback) (*ActuatorsAngularVelocitySubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg ActuatorsAngularVelocity
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, ActuatorsAngularVelocityTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &ActuatorsAngularVelocitySubscription{sub}, nil
}

func (s *ActuatorsAngularVelocitySubscription) TakeMessage(out *ActuatorsAngularVelocity) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneActuatorsAngularVelocitySlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneActuatorsAngularVelocitySlice(dst, src []ActuatorsAngularVelocity) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ActuatorsAngularVelocityTypeSupport types.MessageTypeSupport = _ActuatorsAngularVelocityTypeSupport{}

type _ActuatorsAngularVelocityTypeSupport struct{}

func (t _ActuatorsAngularVelocityTypeSupport) New() types.Message {
	return NewActuatorsAngularVelocity()
}

func (t _ActuatorsAngularVelocityTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.actuator_msgs__msg__ActuatorsAngularVelocity
	return (unsafe.Pointer)(C.actuator_msgs__msg__ActuatorsAngularVelocity__create())
}

func (t _ActuatorsAngularVelocityTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.actuator_msgs__msg__ActuatorsAngularVelocity__destroy((*C.actuator_msgs__msg__ActuatorsAngularVelocity)(pointer_to_free))
}

func (t _ActuatorsAngularVelocityTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*ActuatorsAngularVelocity)
	mem := (*C.actuator_msgs__msg__ActuatorsAngularVelocity)(dst)
	primitives.Float64__Sequence_to_C((*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.velocity)), m.Velocity)
}

func (t _ActuatorsAngularVelocityTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*ActuatorsAngularVelocity)
	mem := (*C.actuator_msgs__msg__ActuatorsAngularVelocity)(ros2_message_buffer)
	primitives.Float64__Sequence_to_Go(&m.Velocity, *(*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.velocity)))
}

func (t _ActuatorsAngularVelocityTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__actuator_msgs__msg__ActuatorsAngularVelocity())
}

type CActuatorsAngularVelocity = C.actuator_msgs__msg__ActuatorsAngularVelocity
type CActuatorsAngularVelocity__Sequence = C.actuator_msgs__msg__ActuatorsAngularVelocity__Sequence

func ActuatorsAngularVelocity__Sequence_to_Go(goSlice *[]ActuatorsAngularVelocity, cSlice CActuatorsAngularVelocity__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]ActuatorsAngularVelocity, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		ActuatorsAngularVelocityTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func ActuatorsAngularVelocity__Sequence_to_C(cSlice *CActuatorsAngularVelocity__Sequence, goSlice []ActuatorsAngularVelocity) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.actuator_msgs__msg__ActuatorsAngularVelocity)(C.malloc(C.sizeof_struct_actuator_msgs__msg__ActuatorsAngularVelocity * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		ActuatorsAngularVelocityTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func ActuatorsAngularVelocity__Array_to_Go(goSlice []ActuatorsAngularVelocity, cSlice []CActuatorsAngularVelocity) {
	for i := 0; i < len(cSlice); i++ {
		ActuatorsAngularVelocityTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func ActuatorsAngularVelocity__Array_to_C(cSlice []CActuatorsAngularVelocity, goSlice []ActuatorsAngularVelocity) {
	for i := 0; i < len(goSlice); i++ {
		ActuatorsAngularVelocityTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
