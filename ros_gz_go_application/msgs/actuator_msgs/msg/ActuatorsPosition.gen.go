// Code generated by rclgo-gen. DO NOT EDIT.

package actuator_msgs_msg
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	std_msgs_msg "github.com/iema-group/goros2/msgs/std_msgs/msg"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <actuator_msgs/msg/actuators_position.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("actuator_msgs/ActuatorsPosition", ActuatorsPositionTypeSupport)
	typemap.RegisterMessage("actuator_msgs/msg/ActuatorsPosition", ActuatorsPositionTypeSupport)
}

type ActuatorsPosition struct {
	Header std_msgs_msg.Header `yaml:"header" json:"header" mapstructure:"header"`
	Angular ActuatorsAngularPosition `yaml:"angular" json:"angular" mapstructure:"angular"`// Position of the actuators in [rad]
	Linear ActuatorsLinearPosition `yaml:"linear" json:"linear" mapstructure:"linear"`// Position of the actuators in [m]
}

// NewActuatorsPosition creates a new ActuatorsPosition with default values.
func NewActuatorsPosition() *ActuatorsPosition {
	self := ActuatorsPosition{}
	self.SetDefaults()
	return &self
}

func (t *ActuatorsPosition) Clone() *ActuatorsPosition {
	c := &ActuatorsPosition{}
	c.Header = *t.Header.Clone()
	c.Angular = *t.Angular.Clone()
	c.Linear = *t.Linear.Clone()
	return c
}

func (t *ActuatorsPosition) CloneMsg() types.Message {
	return t.Clone()
}

func (t *ActuatorsPosition) SetDefaults() {
	t.Header.SetDefaults()
	t.Angular.SetDefaults()
	t.Linear.SetDefaults()
}

func (t *ActuatorsPosition) GetTypeSupport() types.MessageTypeSupport {
	return ActuatorsPositionTypeSupport
}

// ActuatorsPositionPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type ActuatorsPositionPublisher struct {
	*rclgo.Publisher
}

// NewActuatorsPositionPublisher creates and returns a new publisher for the
// ActuatorsPosition
func NewActuatorsPositionPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*ActuatorsPositionPublisher, error) {
	pub, err := node.NewPublisher(topic_name, ActuatorsPositionTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ActuatorsPositionPublisher{pub}, nil
}

func (p *ActuatorsPositionPublisher) Publish(msg *ActuatorsPosition) error {
	return p.Publisher.Publish(msg)
}

// ActuatorsPositionSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type ActuatorsPositionSubscription struct {
	*rclgo.Subscription
}

// ActuatorsPositionSubscriptionCallback type is used to provide a subscription
// handler function for a ActuatorsPositionSubscription.
type ActuatorsPositionSubscriptionCallback func(msg *ActuatorsPosition, info *rclgo.MessageInfo, err error)

// NewActuatorsPositionSubscription creates and returns a new subscription for the
// ActuatorsPosition
func NewActuatorsPositionSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback ActuatorsPositionSubscriptionCallback) (*ActuatorsPositionSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg ActuatorsPosition
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, ActuatorsPositionTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &ActuatorsPositionSubscription{sub}, nil
}

func (s *ActuatorsPositionSubscription) TakeMessage(out *ActuatorsPosition) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneActuatorsPositionSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneActuatorsPositionSlice(dst, src []ActuatorsPosition) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ActuatorsPositionTypeSupport types.MessageTypeSupport = _ActuatorsPositionTypeSupport{}

type _ActuatorsPositionTypeSupport struct{}

func (t _ActuatorsPositionTypeSupport) New() types.Message {
	return NewActuatorsPosition()
}

func (t _ActuatorsPositionTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.actuator_msgs__msg__ActuatorsPosition
	return (unsafe.Pointer)(C.actuator_msgs__msg__ActuatorsPosition__create())
}

func (t _ActuatorsPositionTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.actuator_msgs__msg__ActuatorsPosition__destroy((*C.actuator_msgs__msg__ActuatorsPosition)(pointer_to_free))
}

func (t _ActuatorsPositionTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*ActuatorsPosition)
	mem := (*C.actuator_msgs__msg__ActuatorsPosition)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	ActuatorsAngularPositionTypeSupport.AsCStruct(unsafe.Pointer(&mem.angular), &m.Angular)
	ActuatorsLinearPositionTypeSupport.AsCStruct(unsafe.Pointer(&mem.linear), &m.Linear)
}

func (t _ActuatorsPositionTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*ActuatorsPosition)
	mem := (*C.actuator_msgs__msg__ActuatorsPosition)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	ActuatorsAngularPositionTypeSupport.AsGoStruct(&m.Angular, unsafe.Pointer(&mem.angular))
	ActuatorsLinearPositionTypeSupport.AsGoStruct(&m.Linear, unsafe.Pointer(&mem.linear))
}

func (t _ActuatorsPositionTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__actuator_msgs__msg__ActuatorsPosition())
}

type CActuatorsPosition = C.actuator_msgs__msg__ActuatorsPosition
type CActuatorsPosition__Sequence = C.actuator_msgs__msg__ActuatorsPosition__Sequence

func ActuatorsPosition__Sequence_to_Go(goSlice *[]ActuatorsPosition, cSlice CActuatorsPosition__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]ActuatorsPosition, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		ActuatorsPositionTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func ActuatorsPosition__Sequence_to_C(cSlice *CActuatorsPosition__Sequence, goSlice []ActuatorsPosition) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.actuator_msgs__msg__ActuatorsPosition)(C.malloc(C.sizeof_struct_actuator_msgs__msg__ActuatorsPosition * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		ActuatorsPositionTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func ActuatorsPosition__Array_to_Go(goSlice []ActuatorsPosition, cSlice []CActuatorsPosition) {
	for i := 0; i < len(cSlice); i++ {
		ActuatorsPositionTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func ActuatorsPosition__Array_to_C(cSlice []CActuatorsPosition, goSlice []ActuatorsPosition) {
	for i := 0; i < len(goSlice); i++ {
		ActuatorsPositionTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
