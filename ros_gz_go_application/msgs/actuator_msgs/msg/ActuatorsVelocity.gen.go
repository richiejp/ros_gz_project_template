// Code generated by rclgo-gen. DO NOT EDIT.

package actuator_msgs_msg
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	std_msgs_msg "github.com/iema-group/goros2/msgs/std_msgs/msg"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <actuator_msgs/msg/actuators_velocity.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("actuator_msgs/ActuatorsVelocity", ActuatorsVelocityTypeSupport)
	typemap.RegisterMessage("actuator_msgs/msg/ActuatorsVelocity", ActuatorsVelocityTypeSupport)
}

type ActuatorsVelocity struct {
	Header std_msgs_msg.Header `yaml:"header" json:"header" mapstructure:"header"`
	Angular ActuatorsAngularVelocity `yaml:"angular" json:"angular" mapstructure:"angular"`// Velocity of the actuators in [rad/s]
	Linear ActuatorsLinearVelocity `yaml:"linear" json:"linear" mapstructure:"linear"`// Velocity of the actuators in [m/s]
}

// NewActuatorsVelocity creates a new ActuatorsVelocity with default values.
func NewActuatorsVelocity() *ActuatorsVelocity {
	self := ActuatorsVelocity{}
	self.SetDefaults()
	return &self
}

func (t *ActuatorsVelocity) Clone() *ActuatorsVelocity {
	c := &ActuatorsVelocity{}
	c.Header = *t.Header.Clone()
	c.Angular = *t.Angular.Clone()
	c.Linear = *t.Linear.Clone()
	return c
}

func (t *ActuatorsVelocity) CloneMsg() types.Message {
	return t.Clone()
}

func (t *ActuatorsVelocity) SetDefaults() {
	t.Header.SetDefaults()
	t.Angular.SetDefaults()
	t.Linear.SetDefaults()
}

func (t *ActuatorsVelocity) GetTypeSupport() types.MessageTypeSupport {
	return ActuatorsVelocityTypeSupport
}

// ActuatorsVelocityPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type ActuatorsVelocityPublisher struct {
	*rclgo.Publisher
}

// NewActuatorsVelocityPublisher creates and returns a new publisher for the
// ActuatorsVelocity
func NewActuatorsVelocityPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*ActuatorsVelocityPublisher, error) {
	pub, err := node.NewPublisher(topic_name, ActuatorsVelocityTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ActuatorsVelocityPublisher{pub}, nil
}

func (p *ActuatorsVelocityPublisher) Publish(msg *ActuatorsVelocity) error {
	return p.Publisher.Publish(msg)
}

// ActuatorsVelocitySubscription wraps rclgo.Subscription to provide type safe helper
// functions
type ActuatorsVelocitySubscription struct {
	*rclgo.Subscription
}

// ActuatorsVelocitySubscriptionCallback type is used to provide a subscription
// handler function for a ActuatorsVelocitySubscription.
type ActuatorsVelocitySubscriptionCallback func(msg *ActuatorsVelocity, info *rclgo.MessageInfo, err error)

// NewActuatorsVelocitySubscription creates and returns a new subscription for the
// ActuatorsVelocity
func NewActuatorsVelocitySubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback ActuatorsVelocitySubscriptionCallback) (*ActuatorsVelocitySubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg ActuatorsVelocity
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, ActuatorsVelocityTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &ActuatorsVelocitySubscription{sub}, nil
}

func (s *ActuatorsVelocitySubscription) TakeMessage(out *ActuatorsVelocity) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneActuatorsVelocitySlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneActuatorsVelocitySlice(dst, src []ActuatorsVelocity) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ActuatorsVelocityTypeSupport types.MessageTypeSupport = _ActuatorsVelocityTypeSupport{}

type _ActuatorsVelocityTypeSupport struct{}

func (t _ActuatorsVelocityTypeSupport) New() types.Message {
	return NewActuatorsVelocity()
}

func (t _ActuatorsVelocityTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.actuator_msgs__msg__ActuatorsVelocity
	return (unsafe.Pointer)(C.actuator_msgs__msg__ActuatorsVelocity__create())
}

func (t _ActuatorsVelocityTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.actuator_msgs__msg__ActuatorsVelocity__destroy((*C.actuator_msgs__msg__ActuatorsVelocity)(pointer_to_free))
}

func (t _ActuatorsVelocityTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*ActuatorsVelocity)
	mem := (*C.actuator_msgs__msg__ActuatorsVelocity)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	ActuatorsAngularVelocityTypeSupport.AsCStruct(unsafe.Pointer(&mem.angular), &m.Angular)
	ActuatorsLinearVelocityTypeSupport.AsCStruct(unsafe.Pointer(&mem.linear), &m.Linear)
}

func (t _ActuatorsVelocityTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*ActuatorsVelocity)
	mem := (*C.actuator_msgs__msg__ActuatorsVelocity)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	ActuatorsAngularVelocityTypeSupport.AsGoStruct(&m.Angular, unsafe.Pointer(&mem.angular))
	ActuatorsLinearVelocityTypeSupport.AsGoStruct(&m.Linear, unsafe.Pointer(&mem.linear))
}

func (t _ActuatorsVelocityTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__actuator_msgs__msg__ActuatorsVelocity())
}

type CActuatorsVelocity = C.actuator_msgs__msg__ActuatorsVelocity
type CActuatorsVelocity__Sequence = C.actuator_msgs__msg__ActuatorsVelocity__Sequence

func ActuatorsVelocity__Sequence_to_Go(goSlice *[]ActuatorsVelocity, cSlice CActuatorsVelocity__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]ActuatorsVelocity, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		ActuatorsVelocityTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func ActuatorsVelocity__Sequence_to_C(cSlice *CActuatorsVelocity__Sequence, goSlice []ActuatorsVelocity) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.actuator_msgs__msg__ActuatorsVelocity)(C.malloc(C.sizeof_struct_actuator_msgs__msg__ActuatorsVelocity * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		ActuatorsVelocityTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func ActuatorsVelocity__Array_to_Go(goSlice []ActuatorsVelocity, cSlice []CActuatorsVelocity) {
	for i := 0; i < len(cSlice); i++ {
		ActuatorsVelocityTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func ActuatorsVelocity__Array_to_C(cSlice []CActuatorsVelocity, goSlice []ActuatorsVelocity) {
	for i := 0; i < len(goSlice); i++ {
		ActuatorsVelocityTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
