// Code generated by rclgo-gen. DO NOT EDIT.

package actuator_msgs_msg
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	primitives "github.com/ATIinc/rclgo/pkg/rclgo/primitives"
	std_msgs_msg "github.com/iema-group/goros2/msgs/std_msgs/msg"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <actuator_msgs/msg/actuators.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("actuator_msgs/Actuators", ActuatorsTypeSupport)
	typemap.RegisterMessage("actuator_msgs/msg/Actuators", ActuatorsTypeSupport)
}

type Actuators struct {
	Header std_msgs_msg.Header `yaml:"header" json:"header" mapstructure:"header"`
	Position []float64 `yaml:"position" json:"position" mapstructure:"position"`// Position of the actuators in [rad] for angular actuators
	Velocity []float64 `yaml:"velocity" json:"velocity" mapstructure:"velocity"`// Velocities of the actuators in [rad/s] for angular actuators
	Normalized []float64 `yaml:"normalized" json:"normalized" mapstructure:"normalized"`// Everything that does not fit the above,
}

// NewActuators creates a new Actuators with default values.
func NewActuators() *Actuators {
	self := Actuators{}
	self.SetDefaults()
	return &self
}

func (t *Actuators) Clone() *Actuators {
	c := &Actuators{}
	c.Header = *t.Header.Clone()
	if t.Position != nil {
		c.Position = make([]float64, len(t.Position))
		copy(c.Position, t.Position)
	}
	if t.Velocity != nil {
		c.Velocity = make([]float64, len(t.Velocity))
		copy(c.Velocity, t.Velocity)
	}
	if t.Normalized != nil {
		c.Normalized = make([]float64, len(t.Normalized))
		copy(c.Normalized, t.Normalized)
	}
	return c
}

func (t *Actuators) CloneMsg() types.Message {
	return t.Clone()
}

func (t *Actuators) SetDefaults() {
	t.Header.SetDefaults()
	t.Position = nil
	t.Velocity = nil
	t.Normalized = nil
}

func (t *Actuators) GetTypeSupport() types.MessageTypeSupport {
	return ActuatorsTypeSupport
}

// ActuatorsPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type ActuatorsPublisher struct {
	*rclgo.Publisher
}

// NewActuatorsPublisher creates and returns a new publisher for the
// Actuators
func NewActuatorsPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*ActuatorsPublisher, error) {
	pub, err := node.NewPublisher(topic_name, ActuatorsTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ActuatorsPublisher{pub}, nil
}

func (p *ActuatorsPublisher) Publish(msg *Actuators) error {
	return p.Publisher.Publish(msg)
}

// ActuatorsSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type ActuatorsSubscription struct {
	*rclgo.Subscription
}

// ActuatorsSubscriptionCallback type is used to provide a subscription
// handler function for a ActuatorsSubscription.
type ActuatorsSubscriptionCallback func(msg *Actuators, info *rclgo.MessageInfo, err error)

// NewActuatorsSubscription creates and returns a new subscription for the
// Actuators
func NewActuatorsSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback ActuatorsSubscriptionCallback) (*ActuatorsSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg Actuators
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, ActuatorsTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &ActuatorsSubscription{sub}, nil
}

func (s *ActuatorsSubscription) TakeMessage(out *Actuators) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneActuatorsSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneActuatorsSlice(dst, src []Actuators) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ActuatorsTypeSupport types.MessageTypeSupport = _ActuatorsTypeSupport{}

type _ActuatorsTypeSupport struct{}

func (t _ActuatorsTypeSupport) New() types.Message {
	return NewActuators()
}

func (t _ActuatorsTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.actuator_msgs__msg__Actuators
	return (unsafe.Pointer)(C.actuator_msgs__msg__Actuators__create())
}

func (t _ActuatorsTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.actuator_msgs__msg__Actuators__destroy((*C.actuator_msgs__msg__Actuators)(pointer_to_free))
}

func (t _ActuatorsTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*Actuators)
	mem := (*C.actuator_msgs__msg__Actuators)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	primitives.Float64__Sequence_to_C((*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.position)), m.Position)
	primitives.Float64__Sequence_to_C((*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.velocity)), m.Velocity)
	primitives.Float64__Sequence_to_C((*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.normalized)), m.Normalized)
}

func (t _ActuatorsTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*Actuators)
	mem := (*C.actuator_msgs__msg__Actuators)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	primitives.Float64__Sequence_to_Go(&m.Position, *(*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.position)))
	primitives.Float64__Sequence_to_Go(&m.Velocity, *(*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.velocity)))
	primitives.Float64__Sequence_to_Go(&m.Normalized, *(*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.normalized)))
}

func (t _ActuatorsTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__actuator_msgs__msg__Actuators())
}

type CActuators = C.actuator_msgs__msg__Actuators
type CActuators__Sequence = C.actuator_msgs__msg__Actuators__Sequence

func Actuators__Sequence_to_Go(goSlice *[]Actuators, cSlice CActuators__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Actuators, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		ActuatorsTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func Actuators__Sequence_to_C(cSlice *CActuators__Sequence, goSlice []Actuators) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.actuator_msgs__msg__Actuators)(C.malloc(C.sizeof_struct_actuator_msgs__msg__Actuators * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		ActuatorsTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func Actuators__Array_to_Go(goSlice []Actuators, cSlice []CActuators) {
	for i := 0; i < len(cSlice); i++ {
		ActuatorsTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func Actuators__Array_to_C(cSlice []CActuators, goSlice []Actuators) {
	for i := 0; i < len(goSlice); i++ {
		ActuatorsTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
