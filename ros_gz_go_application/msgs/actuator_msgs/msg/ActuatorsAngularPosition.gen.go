// Code generated by rclgo-gen. DO NOT EDIT.

package actuator_msgs_msg
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	primitives "github.com/ATIinc/rclgo/pkg/rclgo/primitives"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <actuator_msgs/msg/actuators_angular_position.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("actuator_msgs/ActuatorsAngularPosition", ActuatorsAngularPositionTypeSupport)
	typemap.RegisterMessage("actuator_msgs/msg/ActuatorsAngularPosition", ActuatorsAngularPositionTypeSupport)
}

type ActuatorsAngularPosition struct {
	Position []float64 `yaml:"position" json:"position" mapstructure:"position"`// Position of the actuators in [rad]
}

// NewActuatorsAngularPosition creates a new ActuatorsAngularPosition with default values.
func NewActuatorsAngularPosition() *ActuatorsAngularPosition {
	self := ActuatorsAngularPosition{}
	self.SetDefaults()
	return &self
}

func (t *ActuatorsAngularPosition) Clone() *ActuatorsAngularPosition {
	c := &ActuatorsAngularPosition{}
	if t.Position != nil {
		c.Position = make([]float64, len(t.Position))
		copy(c.Position, t.Position)
	}
	return c
}

func (t *ActuatorsAngularPosition) CloneMsg() types.Message {
	return t.Clone()
}

func (t *ActuatorsAngularPosition) SetDefaults() {
	t.Position = nil
}

func (t *ActuatorsAngularPosition) GetTypeSupport() types.MessageTypeSupport {
	return ActuatorsAngularPositionTypeSupport
}

// ActuatorsAngularPositionPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type ActuatorsAngularPositionPublisher struct {
	*rclgo.Publisher
}

// NewActuatorsAngularPositionPublisher creates and returns a new publisher for the
// ActuatorsAngularPosition
func NewActuatorsAngularPositionPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*ActuatorsAngularPositionPublisher, error) {
	pub, err := node.NewPublisher(topic_name, ActuatorsAngularPositionTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ActuatorsAngularPositionPublisher{pub}, nil
}

func (p *ActuatorsAngularPositionPublisher) Publish(msg *ActuatorsAngularPosition) error {
	return p.Publisher.Publish(msg)
}

// ActuatorsAngularPositionSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type ActuatorsAngularPositionSubscription struct {
	*rclgo.Subscription
}

// ActuatorsAngularPositionSubscriptionCallback type is used to provide a subscription
// handler function for a ActuatorsAngularPositionSubscription.
type ActuatorsAngularPositionSubscriptionCallback func(msg *ActuatorsAngularPosition, info *rclgo.MessageInfo, err error)

// NewActuatorsAngularPositionSubscription creates and returns a new subscription for the
// ActuatorsAngularPosition
func NewActuatorsAngularPositionSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback ActuatorsAngularPositionSubscriptionCallback) (*ActuatorsAngularPositionSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg ActuatorsAngularPosition
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, ActuatorsAngularPositionTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &ActuatorsAngularPositionSubscription{sub}, nil
}

func (s *ActuatorsAngularPositionSubscription) TakeMessage(out *ActuatorsAngularPosition) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneActuatorsAngularPositionSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneActuatorsAngularPositionSlice(dst, src []ActuatorsAngularPosition) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ActuatorsAngularPositionTypeSupport types.MessageTypeSupport = _ActuatorsAngularPositionTypeSupport{}

type _ActuatorsAngularPositionTypeSupport struct{}

func (t _ActuatorsAngularPositionTypeSupport) New() types.Message {
	return NewActuatorsAngularPosition()
}

func (t _ActuatorsAngularPositionTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.actuator_msgs__msg__ActuatorsAngularPosition
	return (unsafe.Pointer)(C.actuator_msgs__msg__ActuatorsAngularPosition__create())
}

func (t _ActuatorsAngularPositionTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.actuator_msgs__msg__ActuatorsAngularPosition__destroy((*C.actuator_msgs__msg__ActuatorsAngularPosition)(pointer_to_free))
}

func (t _ActuatorsAngularPositionTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*ActuatorsAngularPosition)
	mem := (*C.actuator_msgs__msg__ActuatorsAngularPosition)(dst)
	primitives.Float64__Sequence_to_C((*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.position)), m.Position)
}

func (t _ActuatorsAngularPositionTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*ActuatorsAngularPosition)
	mem := (*C.actuator_msgs__msg__ActuatorsAngularPosition)(ros2_message_buffer)
	primitives.Float64__Sequence_to_Go(&m.Position, *(*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.position)))
}

func (t _ActuatorsAngularPositionTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__actuator_msgs__msg__ActuatorsAngularPosition())
}

type CActuatorsAngularPosition = C.actuator_msgs__msg__ActuatorsAngularPosition
type CActuatorsAngularPosition__Sequence = C.actuator_msgs__msg__ActuatorsAngularPosition__Sequence

func ActuatorsAngularPosition__Sequence_to_Go(goSlice *[]ActuatorsAngularPosition, cSlice CActuatorsAngularPosition__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]ActuatorsAngularPosition, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		ActuatorsAngularPositionTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func ActuatorsAngularPosition__Sequence_to_C(cSlice *CActuatorsAngularPosition__Sequence, goSlice []ActuatorsAngularPosition) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.actuator_msgs__msg__ActuatorsAngularPosition)(C.malloc(C.sizeof_struct_actuator_msgs__msg__ActuatorsAngularPosition * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		ActuatorsAngularPositionTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func ActuatorsAngularPosition__Array_to_Go(goSlice []ActuatorsAngularPosition, cSlice []CActuatorsAngularPosition) {
	for i := 0; i < len(cSlice); i++ {
		ActuatorsAngularPositionTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func ActuatorsAngularPosition__Array_to_C(cSlice []CActuatorsAngularPosition, goSlice []ActuatorsAngularPosition) {
	for i := 0; i < len(goSlice); i++ {
		ActuatorsAngularPositionTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
