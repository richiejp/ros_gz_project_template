// Code generated by rclgo-gen. DO NOT EDIT.

package actuator_msgs_msg
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	primitives "github.com/ATIinc/rclgo/pkg/rclgo/primitives"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <actuator_msgs/msg/actuators_linear_position.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("actuator_msgs/ActuatorsLinearPosition", ActuatorsLinearPositionTypeSupport)
	typemap.RegisterMessage("actuator_msgs/msg/ActuatorsLinearPosition", ActuatorsLinearPositionTypeSupport)
}

type ActuatorsLinearPosition struct {
	Position []float64 `yaml:"position" json:"position" mapstructure:"position"`// Position of the actuators in [m]
}

// NewActuatorsLinearPosition creates a new ActuatorsLinearPosition with default values.
func NewActuatorsLinearPosition() *ActuatorsLinearPosition {
	self := ActuatorsLinearPosition{}
	self.SetDefaults()
	return &self
}

func (t *ActuatorsLinearPosition) Clone() *ActuatorsLinearPosition {
	c := &ActuatorsLinearPosition{}
	if t.Position != nil {
		c.Position = make([]float64, len(t.Position))
		copy(c.Position, t.Position)
	}
	return c
}

func (t *ActuatorsLinearPosition) CloneMsg() types.Message {
	return t.Clone()
}

func (t *ActuatorsLinearPosition) SetDefaults() {
	t.Position = nil
}

func (t *ActuatorsLinearPosition) GetTypeSupport() types.MessageTypeSupport {
	return ActuatorsLinearPositionTypeSupport
}

// ActuatorsLinearPositionPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type ActuatorsLinearPositionPublisher struct {
	*rclgo.Publisher
}

// NewActuatorsLinearPositionPublisher creates and returns a new publisher for the
// ActuatorsLinearPosition
func NewActuatorsLinearPositionPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*ActuatorsLinearPositionPublisher, error) {
	pub, err := node.NewPublisher(topic_name, ActuatorsLinearPositionTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ActuatorsLinearPositionPublisher{pub}, nil
}

func (p *ActuatorsLinearPositionPublisher) Publish(msg *ActuatorsLinearPosition) error {
	return p.Publisher.Publish(msg)
}

// ActuatorsLinearPositionSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type ActuatorsLinearPositionSubscription struct {
	*rclgo.Subscription
}

// ActuatorsLinearPositionSubscriptionCallback type is used to provide a subscription
// handler function for a ActuatorsLinearPositionSubscription.
type ActuatorsLinearPositionSubscriptionCallback func(msg *ActuatorsLinearPosition, info *rclgo.MessageInfo, err error)

// NewActuatorsLinearPositionSubscription creates and returns a new subscription for the
// ActuatorsLinearPosition
func NewActuatorsLinearPositionSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback ActuatorsLinearPositionSubscriptionCallback) (*ActuatorsLinearPositionSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg ActuatorsLinearPosition
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, ActuatorsLinearPositionTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &ActuatorsLinearPositionSubscription{sub}, nil
}

func (s *ActuatorsLinearPositionSubscription) TakeMessage(out *ActuatorsLinearPosition) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneActuatorsLinearPositionSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneActuatorsLinearPositionSlice(dst, src []ActuatorsLinearPosition) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ActuatorsLinearPositionTypeSupport types.MessageTypeSupport = _ActuatorsLinearPositionTypeSupport{}

type _ActuatorsLinearPositionTypeSupport struct{}

func (t _ActuatorsLinearPositionTypeSupport) New() types.Message {
	return NewActuatorsLinearPosition()
}

func (t _ActuatorsLinearPositionTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.actuator_msgs__msg__ActuatorsLinearPosition
	return (unsafe.Pointer)(C.actuator_msgs__msg__ActuatorsLinearPosition__create())
}

func (t _ActuatorsLinearPositionTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.actuator_msgs__msg__ActuatorsLinearPosition__destroy((*C.actuator_msgs__msg__ActuatorsLinearPosition)(pointer_to_free))
}

func (t _ActuatorsLinearPositionTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*ActuatorsLinearPosition)
	mem := (*C.actuator_msgs__msg__ActuatorsLinearPosition)(dst)
	primitives.Float64__Sequence_to_C((*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.position)), m.Position)
}

func (t _ActuatorsLinearPositionTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*ActuatorsLinearPosition)
	mem := (*C.actuator_msgs__msg__ActuatorsLinearPosition)(ros2_message_buffer)
	primitives.Float64__Sequence_to_Go(&m.Position, *(*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.position)))
}

func (t _ActuatorsLinearPositionTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__actuator_msgs__msg__ActuatorsLinearPosition())
}

type CActuatorsLinearPosition = C.actuator_msgs__msg__ActuatorsLinearPosition
type CActuatorsLinearPosition__Sequence = C.actuator_msgs__msg__ActuatorsLinearPosition__Sequence

func ActuatorsLinearPosition__Sequence_to_Go(goSlice *[]ActuatorsLinearPosition, cSlice CActuatorsLinearPosition__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]ActuatorsLinearPosition, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		ActuatorsLinearPositionTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func ActuatorsLinearPosition__Sequence_to_C(cSlice *CActuatorsLinearPosition__Sequence, goSlice []ActuatorsLinearPosition) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.actuator_msgs__msg__ActuatorsLinearPosition)(C.malloc(C.sizeof_struct_actuator_msgs__msg__ActuatorsLinearPosition * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		ActuatorsLinearPositionTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func ActuatorsLinearPosition__Array_to_Go(goSlice []ActuatorsLinearPosition, cSlice []CActuatorsLinearPosition) {
	for i := 0; i < len(cSlice); i++ {
		ActuatorsLinearPositionTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func ActuatorsLinearPosition__Array_to_C(cSlice []CActuatorsLinearPosition, goSlice []ActuatorsLinearPosition) {
	for i := 0; i < len(goSlice); i++ {
		ActuatorsLinearPositionTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
