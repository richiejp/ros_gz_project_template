// Code generated by rclgo-gen. DO NOT EDIT.

package lifecycle_msgs_srv
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <lifecycle_msgs/srv/get_state.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("lifecycle_msgs/GetState_Request", GetState_RequestTypeSupport)
	typemap.RegisterMessage("lifecycle_msgs/srv/GetState_Request", GetState_RequestTypeSupport)
}

type GetState_Request struct {
}

// NewGetState_Request creates a new GetState_Request with default values.
func NewGetState_Request() *GetState_Request {
	self := GetState_Request{}
	self.SetDefaults()
	return &self
}

func (t *GetState_Request) Clone() *GetState_Request {
	c := &GetState_Request{}
	return c
}

func (t *GetState_Request) CloneMsg() types.Message {
	return t.Clone()
}

func (t *GetState_Request) SetDefaults() {
}

func (t *GetState_Request) GetTypeSupport() types.MessageTypeSupport {
	return GetState_RequestTypeSupport
}

// GetState_RequestPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type GetState_RequestPublisher struct {
	*rclgo.Publisher
}

// NewGetState_RequestPublisher creates and returns a new publisher for the
// GetState_Request
func NewGetState_RequestPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*GetState_RequestPublisher, error) {
	pub, err := node.NewPublisher(topic_name, GetState_RequestTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &GetState_RequestPublisher{pub}, nil
}

func (p *GetState_RequestPublisher) Publish(msg *GetState_Request) error {
	return p.Publisher.Publish(msg)
}

// GetState_RequestSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type GetState_RequestSubscription struct {
	*rclgo.Subscription
}

// GetState_RequestSubscriptionCallback type is used to provide a subscription
// handler function for a GetState_RequestSubscription.
type GetState_RequestSubscriptionCallback func(msg *GetState_Request, info *rclgo.MessageInfo, err error)

// NewGetState_RequestSubscription creates and returns a new subscription for the
// GetState_Request
func NewGetState_RequestSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback GetState_RequestSubscriptionCallback) (*GetState_RequestSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg GetState_Request
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, GetState_RequestTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &GetState_RequestSubscription{sub}, nil
}

func (s *GetState_RequestSubscription) TakeMessage(out *GetState_Request) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneGetState_RequestSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneGetState_RequestSlice(dst, src []GetState_Request) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var GetState_RequestTypeSupport types.MessageTypeSupport = _GetState_RequestTypeSupport{}

type _GetState_RequestTypeSupport struct{}

func (t _GetState_RequestTypeSupport) New() types.Message {
	return NewGetState_Request()
}

func (t _GetState_RequestTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.lifecycle_msgs__srv__GetState_Request
	return (unsafe.Pointer)(C.lifecycle_msgs__srv__GetState_Request__create())
}

func (t _GetState_RequestTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.lifecycle_msgs__srv__GetState_Request__destroy((*C.lifecycle_msgs__srv__GetState_Request)(pointer_to_free))
}

func (t _GetState_RequestTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	
}

func (t _GetState_RequestTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	
}

func (t _GetState_RequestTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__lifecycle_msgs__srv__GetState_Request())
}

type CGetState_Request = C.lifecycle_msgs__srv__GetState_Request
type CGetState_Request__Sequence = C.lifecycle_msgs__srv__GetState_Request__Sequence

func GetState_Request__Sequence_to_Go(goSlice *[]GetState_Request, cSlice CGetState_Request__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]GetState_Request, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		GetState_RequestTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func GetState_Request__Sequence_to_C(cSlice *CGetState_Request__Sequence, goSlice []GetState_Request) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.lifecycle_msgs__srv__GetState_Request)(C.malloc(C.sizeof_struct_lifecycle_msgs__srv__GetState_Request * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		GetState_RequestTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func GetState_Request__Array_to_Go(goSlice []GetState_Request, cSlice []CGetState_Request) {
	for i := 0; i < len(cSlice); i++ {
		GetState_RequestTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func GetState_Request__Array_to_C(cSlice []CGetState_Request, goSlice []GetState_Request) {
	for i := 0; i < len(goSlice); i++ {
		GetState_RequestTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
