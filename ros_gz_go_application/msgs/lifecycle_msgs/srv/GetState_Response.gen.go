// Code generated by rclgo-gen. DO NOT EDIT.

package lifecycle_msgs_srv
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	lifecycle_msgs_msg "github.com/iema-group/goros2/msgs/lifecycle_msgs/msg"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <lifecycle_msgs/srv/get_state.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("lifecycle_msgs/GetState_Response", GetState_ResponseTypeSupport)
	typemap.RegisterMessage("lifecycle_msgs/srv/GetState_Response", GetState_ResponseTypeSupport)
}

type GetState_Response struct {
	CurrentState lifecycle_msgs_msg.State `yaml:"current_state" json:"current_state" mapstructure:"current_state"`// The current state-machine state of the node.
}

// NewGetState_Response creates a new GetState_Response with default values.
func NewGetState_Response() *GetState_Response {
	self := GetState_Response{}
	self.SetDefaults()
	return &self
}

func (t *GetState_Response) Clone() *GetState_Response {
	c := &GetState_Response{}
	c.CurrentState = *t.CurrentState.Clone()
	return c
}

func (t *GetState_Response) CloneMsg() types.Message {
	return t.Clone()
}

func (t *GetState_Response) SetDefaults() {
	t.CurrentState.SetDefaults()
}

func (t *GetState_Response) GetTypeSupport() types.MessageTypeSupport {
	return GetState_ResponseTypeSupport
}

// GetState_ResponsePublisher wraps rclgo.Publisher to provide type safe helper
// functions
type GetState_ResponsePublisher struct {
	*rclgo.Publisher
}

// NewGetState_ResponsePublisher creates and returns a new publisher for the
// GetState_Response
func NewGetState_ResponsePublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*GetState_ResponsePublisher, error) {
	pub, err := node.NewPublisher(topic_name, GetState_ResponseTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &GetState_ResponsePublisher{pub}, nil
}

func (p *GetState_ResponsePublisher) Publish(msg *GetState_Response) error {
	return p.Publisher.Publish(msg)
}

// GetState_ResponseSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type GetState_ResponseSubscription struct {
	*rclgo.Subscription
}

// GetState_ResponseSubscriptionCallback type is used to provide a subscription
// handler function for a GetState_ResponseSubscription.
type GetState_ResponseSubscriptionCallback func(msg *GetState_Response, info *rclgo.MessageInfo, err error)

// NewGetState_ResponseSubscription creates and returns a new subscription for the
// GetState_Response
func NewGetState_ResponseSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback GetState_ResponseSubscriptionCallback) (*GetState_ResponseSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg GetState_Response
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, GetState_ResponseTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &GetState_ResponseSubscription{sub}, nil
}

func (s *GetState_ResponseSubscription) TakeMessage(out *GetState_Response) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneGetState_ResponseSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneGetState_ResponseSlice(dst, src []GetState_Response) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var GetState_ResponseTypeSupport types.MessageTypeSupport = _GetState_ResponseTypeSupport{}

type _GetState_ResponseTypeSupport struct{}

func (t _GetState_ResponseTypeSupport) New() types.Message {
	return NewGetState_Response()
}

func (t _GetState_ResponseTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.lifecycle_msgs__srv__GetState_Response
	return (unsafe.Pointer)(C.lifecycle_msgs__srv__GetState_Response__create())
}

func (t _GetState_ResponseTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.lifecycle_msgs__srv__GetState_Response__destroy((*C.lifecycle_msgs__srv__GetState_Response)(pointer_to_free))
}

func (t _GetState_ResponseTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*GetState_Response)
	mem := (*C.lifecycle_msgs__srv__GetState_Response)(dst)
	lifecycle_msgs_msg.StateTypeSupport.AsCStruct(unsafe.Pointer(&mem.current_state), &m.CurrentState)
}

func (t _GetState_ResponseTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*GetState_Response)
	mem := (*C.lifecycle_msgs__srv__GetState_Response)(ros2_message_buffer)
	lifecycle_msgs_msg.StateTypeSupport.AsGoStruct(&m.CurrentState, unsafe.Pointer(&mem.current_state))
}

func (t _GetState_ResponseTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__lifecycle_msgs__srv__GetState_Response())
}

type CGetState_Response = C.lifecycle_msgs__srv__GetState_Response
type CGetState_Response__Sequence = C.lifecycle_msgs__srv__GetState_Response__Sequence

func GetState_Response__Sequence_to_Go(goSlice *[]GetState_Response, cSlice CGetState_Response__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]GetState_Response, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		GetState_ResponseTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func GetState_Response__Sequence_to_C(cSlice *CGetState_Response__Sequence, goSlice []GetState_Response) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.lifecycle_msgs__srv__GetState_Response)(C.malloc(C.sizeof_struct_lifecycle_msgs__srv__GetState_Response * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		GetState_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func GetState_Response__Array_to_Go(goSlice []GetState_Response, cSlice []CGetState_Response) {
	for i := 0; i < len(cSlice); i++ {
		GetState_ResponseTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func GetState_Response__Array_to_C(cSlice []CGetState_Response, goSlice []GetState_Response) {
	for i := 0; i < len(goSlice); i++ {
		GetState_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
