// Code generated by rclgo-gen. DO NOT EDIT.

package lifecycle_msgs_srv

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <lifecycle_msgs/srv/get_available_transitions.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
)

func init() {
	typemap.RegisterService("lifecycle_msgs/GetAvailableTransitions", GetAvailableTransitionsTypeSupport)
	typemap.RegisterService("lifecycle_msgs/srv/GetAvailableTransitions", GetAvailableTransitionsTypeSupport)
}

type _GetAvailableTransitionsTypeSupport struct {}

func (s _GetAvailableTransitionsTypeSupport) Request() types.MessageTypeSupport {
	return GetAvailableTransitions_RequestTypeSupport
}

func (s _GetAvailableTransitionsTypeSupport) Response() types.MessageTypeSupport {
	return GetAvailableTransitions_ResponseTypeSupport
}

func (s _GetAvailableTransitionsTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__lifecycle_msgs__srv__GetAvailableTransitions())
}

// Modifying this variable is undefined behavior.
var GetAvailableTransitionsTypeSupport types.ServiceTypeSupport = _GetAvailableTransitionsTypeSupport{}

// GetAvailableTransitionsClient wraps rclgo.Client to provide type safe helper
// functions
type GetAvailableTransitionsClient struct {
	*rclgo.Client
}

// NewGetAvailableTransitionsClient creates and returns a new client for the
// GetAvailableTransitions
func NewGetAvailableTransitionsClient(node *rclgo.Node, serviceName string, options *rclgo.ClientOptions) (*GetAvailableTransitionsClient, error) {
	client, err := node.NewClient(serviceName, GetAvailableTransitionsTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &GetAvailableTransitionsClient{client}, nil
}

func (s *GetAvailableTransitionsClient) Send(ctx context.Context, req *GetAvailableTransitions_Request) (*GetAvailableTransitions_Response, *rclgo.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*GetAvailableTransitions_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type GetAvailableTransitionsServiceResponseSender struct {
	sender rclgo.ServiceResponseSender
}

func (s GetAvailableTransitionsServiceResponseSender) SendResponse(resp *GetAvailableTransitions_Response) error {
	return s.sender.SendResponse(resp)
}

type GetAvailableTransitionsServiceRequestHandler func(*rclgo.ServiceInfo, *GetAvailableTransitions_Request, GetAvailableTransitionsServiceResponseSender)

// GetAvailableTransitionsService wraps rclgo.Service to provide type safe helper
// functions
type GetAvailableTransitionsService struct {
	*rclgo.Service
}

// NewGetAvailableTransitionsService creates and returns a new service for the
// GetAvailableTransitions
func NewGetAvailableTransitionsService(node *rclgo.Node, name string, options *rclgo.ServiceOptions, handler GetAvailableTransitionsServiceRequestHandler) (*GetAvailableTransitionsService, error) {
	h := func(rmw *rclgo.ServiceInfo, msg types.Message, rs rclgo.ServiceResponseSender) {
		m := msg.(*GetAvailableTransitions_Request)
		responseSender := GetAvailableTransitionsServiceResponseSender{sender: rs}
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, GetAvailableTransitionsTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &GetAvailableTransitionsService{service}, nil
}
