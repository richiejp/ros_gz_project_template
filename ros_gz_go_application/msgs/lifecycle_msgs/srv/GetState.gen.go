// Code generated by rclgo-gen. DO NOT EDIT.

package lifecycle_msgs_srv

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <lifecycle_msgs/srv/get_state.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
)

func init() {
	typemap.RegisterService("lifecycle_msgs/GetState", GetStateTypeSupport)
	typemap.RegisterService("lifecycle_msgs/srv/GetState", GetStateTypeSupport)
}

type _GetStateTypeSupport struct {}

func (s _GetStateTypeSupport) Request() types.MessageTypeSupport {
	return GetState_RequestTypeSupport
}

func (s _GetStateTypeSupport) Response() types.MessageTypeSupport {
	return GetState_ResponseTypeSupport
}

func (s _GetStateTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__lifecycle_msgs__srv__GetState())
}

// Modifying this variable is undefined behavior.
var GetStateTypeSupport types.ServiceTypeSupport = _GetStateTypeSupport{}

// GetStateClient wraps rclgo.Client to provide type safe helper
// functions
type GetStateClient struct {
	*rclgo.Client
}

// NewGetStateClient creates and returns a new client for the
// GetState
func NewGetStateClient(node *rclgo.Node, serviceName string, options *rclgo.ClientOptions) (*GetStateClient, error) {
	client, err := node.NewClient(serviceName, GetStateTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &GetStateClient{client}, nil
}

func (s *GetStateClient) Send(ctx context.Context, req *GetState_Request) (*GetState_Response, *rclgo.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*GetState_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type GetStateServiceResponseSender struct {
	sender rclgo.ServiceResponseSender
}

func (s GetStateServiceResponseSender) SendResponse(resp *GetState_Response) error {
	return s.sender.SendResponse(resp)
}

type GetStateServiceRequestHandler func(*rclgo.ServiceInfo, *GetState_Request, GetStateServiceResponseSender)

// GetStateService wraps rclgo.Service to provide type safe helper
// functions
type GetStateService struct {
	*rclgo.Service
}

// NewGetStateService creates and returns a new service for the
// GetState
func NewGetStateService(node *rclgo.Node, name string, options *rclgo.ServiceOptions, handler GetStateServiceRequestHandler) (*GetStateService, error) {
	h := func(rmw *rclgo.ServiceInfo, msg types.Message, rs rclgo.ServiceResponseSender) {
		m := msg.(*GetState_Request)
		responseSender := GetStateServiceResponseSender{sender: rs}
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, GetStateTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &GetStateService{service}, nil
}
