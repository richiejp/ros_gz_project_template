// Code generated by rclgo-gen. DO NOT EDIT.

package lifecycle_msgs_msg
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <lifecycle_msgs/msg/transition_event.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("lifecycle_msgs/TransitionEvent", TransitionEventTypeSupport)
	typemap.RegisterMessage("lifecycle_msgs/msg/TransitionEvent", TransitionEventTypeSupport)
}

type TransitionEvent struct {
	Timestamp uint64 `yaml:"timestamp" json:"timestamp" mapstructure:"timestamp"`// The time point at which this event occurred.
	Transition Transition `yaml:"transition" json:"transition" mapstructure:"transition"`// The id and label of this transition event.
	StartState State `yaml:"start_state" json:"start_state" mapstructure:"start_state"`// The starting state from which this event transitioned.
	GoalState State `yaml:"goal_state" json:"goal_state" mapstructure:"goal_state"`// The end state of this transition event.
}

// NewTransitionEvent creates a new TransitionEvent with default values.
func NewTransitionEvent() *TransitionEvent {
	self := TransitionEvent{}
	self.SetDefaults()
	return &self
}

func (t *TransitionEvent) Clone() *TransitionEvent {
	c := &TransitionEvent{}
	c.Timestamp = t.Timestamp
	c.Transition = *t.Transition.Clone()
	c.StartState = *t.StartState.Clone()
	c.GoalState = *t.GoalState.Clone()
	return c
}

func (t *TransitionEvent) CloneMsg() types.Message {
	return t.Clone()
}

func (t *TransitionEvent) SetDefaults() {
	t.Timestamp = 0
	t.Transition.SetDefaults()
	t.StartState.SetDefaults()
	t.GoalState.SetDefaults()
}

func (t *TransitionEvent) GetTypeSupport() types.MessageTypeSupport {
	return TransitionEventTypeSupport
}

// TransitionEventPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type TransitionEventPublisher struct {
	*rclgo.Publisher
}

// NewTransitionEventPublisher creates and returns a new publisher for the
// TransitionEvent
func NewTransitionEventPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*TransitionEventPublisher, error) {
	pub, err := node.NewPublisher(topic_name, TransitionEventTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &TransitionEventPublisher{pub}, nil
}

func (p *TransitionEventPublisher) Publish(msg *TransitionEvent) error {
	return p.Publisher.Publish(msg)
}

// TransitionEventSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type TransitionEventSubscription struct {
	*rclgo.Subscription
}

// TransitionEventSubscriptionCallback type is used to provide a subscription
// handler function for a TransitionEventSubscription.
type TransitionEventSubscriptionCallback func(msg *TransitionEvent, info *rclgo.MessageInfo, err error)

// NewTransitionEventSubscription creates and returns a new subscription for the
// TransitionEvent
func NewTransitionEventSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback TransitionEventSubscriptionCallback) (*TransitionEventSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg TransitionEvent
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, TransitionEventTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &TransitionEventSubscription{sub}, nil
}

func (s *TransitionEventSubscription) TakeMessage(out *TransitionEvent) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneTransitionEventSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneTransitionEventSlice(dst, src []TransitionEvent) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var TransitionEventTypeSupport types.MessageTypeSupport = _TransitionEventTypeSupport{}

type _TransitionEventTypeSupport struct{}

func (t _TransitionEventTypeSupport) New() types.Message {
	return NewTransitionEvent()
}

func (t _TransitionEventTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.lifecycle_msgs__msg__TransitionEvent
	return (unsafe.Pointer)(C.lifecycle_msgs__msg__TransitionEvent__create())
}

func (t _TransitionEventTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.lifecycle_msgs__msg__TransitionEvent__destroy((*C.lifecycle_msgs__msg__TransitionEvent)(pointer_to_free))
}

func (t _TransitionEventTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*TransitionEvent)
	mem := (*C.lifecycle_msgs__msg__TransitionEvent)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	TransitionTypeSupport.AsCStruct(unsafe.Pointer(&mem.transition), &m.Transition)
	StateTypeSupport.AsCStruct(unsafe.Pointer(&mem.start_state), &m.StartState)
	StateTypeSupport.AsCStruct(unsafe.Pointer(&mem.goal_state), &m.GoalState)
}

func (t _TransitionEventTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*TransitionEvent)
	mem := (*C.lifecycle_msgs__msg__TransitionEvent)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	TransitionTypeSupport.AsGoStruct(&m.Transition, unsafe.Pointer(&mem.transition))
	StateTypeSupport.AsGoStruct(&m.StartState, unsafe.Pointer(&mem.start_state))
	StateTypeSupport.AsGoStruct(&m.GoalState, unsafe.Pointer(&mem.goal_state))
}

func (t _TransitionEventTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__lifecycle_msgs__msg__TransitionEvent())
}

type CTransitionEvent = C.lifecycle_msgs__msg__TransitionEvent
type CTransitionEvent__Sequence = C.lifecycle_msgs__msg__TransitionEvent__Sequence

func TransitionEvent__Sequence_to_Go(goSlice *[]TransitionEvent, cSlice CTransitionEvent__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]TransitionEvent, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		TransitionEventTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func TransitionEvent__Sequence_to_C(cSlice *CTransitionEvent__Sequence, goSlice []TransitionEvent) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.lifecycle_msgs__msg__TransitionEvent)(C.malloc(C.sizeof_struct_lifecycle_msgs__msg__TransitionEvent * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		TransitionEventTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func TransitionEvent__Array_to_Go(goSlice []TransitionEvent, cSlice []CTransitionEvent) {
	for i := 0; i < len(cSlice); i++ {
		TransitionEventTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func TransitionEvent__Array_to_C(cSlice []CTransitionEvent, goSlice []TransitionEvent) {
	for i := 0; i < len(goSlice); i++ {
		TransitionEventTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
