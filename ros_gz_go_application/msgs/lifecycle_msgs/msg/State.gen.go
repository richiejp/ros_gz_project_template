// Code generated by rclgo-gen. DO NOT EDIT.

package lifecycle_msgs_msg
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	primitives "github.com/ATIinc/rclgo/pkg/rclgo/primitives"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <lifecycle_msgs/msg/state.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("lifecycle_msgs/State", StateTypeSupport)
	typemap.RegisterMessage("lifecycle_msgs/msg/State", StateTypeSupport)
}
const (
	State_PRIMARY_STATE_UNKNOWN uint8 = 0// Indicates state has not yet been set.
	State_PRIMARY_STATE_UNCONFIGURED uint8 = 1// This is the life cycle state the node is in immediately after beinginstantiated.
	State_PRIMARY_STATE_INACTIVE uint8 = 2// This state represents a node that is not currently performing any processing.
	State_PRIMARY_STATE_ACTIVE uint8 = 3// This is the main state of the node's life cycle. While in this state, the nodeperforms any processing, responds to service requests, reads and processesdata, produces output, etc.
	State_PRIMARY_STATE_FINALIZED uint8 = 4// The finalized state is the state in which the node ends immediately beforebeing destroyed.
	State_TRANSITION_STATE_CONFIGURING uint8 = 10// In this transition state the node's onConfigure callback will be called toallow the node to load its configuration and conduct any required setup.
	State_TRANSITION_STATE_CLEANINGUP uint8 = 11// In this transition state the node's callback onCleanup will be called to clearall state and return the node to a functionally equivalent state as whenfirst created.
	State_TRANSITION_STATE_SHUTTINGDOWN uint8 = 12// In this transition state the callback onShutdown will be executed to do anycleanup necessary before destruction.
	State_TRANSITION_STATE_ACTIVATING uint8 = 13// In this transition state the callback onActivate will be executed to do anyfinal preparations to start executing.
	State_TRANSITION_STATE_DEACTIVATING uint8 = 14// In this transition state the callback onDeactivate will be executed to do anycleanup to start executing, and reverse the onActivate changes.
	State_TRANSITION_STATE_ERRORPROCESSING uint8 = 15// This transition state is where any error may be cleaned up.
)

type State struct {
	Id uint8 `yaml:"id" json:"id" mapstructure:"id"`// The state id value from the above definitions.
	Label string `yaml:"label" json:"label" mapstructure:"label"`// A text label of the state.
}

// NewState creates a new State with default values.
func NewState() *State {
	self := State{}
	self.SetDefaults()
	return &self
}

func (t *State) Clone() *State {
	c := &State{}
	c.Id = t.Id
	c.Label = t.Label
	return c
}

func (t *State) CloneMsg() types.Message {
	return t.Clone()
}

func (t *State) SetDefaults() {
	t.Id = 0
	t.Label = ""
}

func (t *State) GetTypeSupport() types.MessageTypeSupport {
	return StateTypeSupport
}

// StatePublisher wraps rclgo.Publisher to provide type safe helper
// functions
type StatePublisher struct {
	*rclgo.Publisher
}

// NewStatePublisher creates and returns a new publisher for the
// State
func NewStatePublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*StatePublisher, error) {
	pub, err := node.NewPublisher(topic_name, StateTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &StatePublisher{pub}, nil
}

func (p *StatePublisher) Publish(msg *State) error {
	return p.Publisher.Publish(msg)
}

// StateSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type StateSubscription struct {
	*rclgo.Subscription
}

// StateSubscriptionCallback type is used to provide a subscription
// handler function for a StateSubscription.
type StateSubscriptionCallback func(msg *State, info *rclgo.MessageInfo, err error)

// NewStateSubscription creates and returns a new subscription for the
// State
func NewStateSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback StateSubscriptionCallback) (*StateSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg State
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, StateTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &StateSubscription{sub}, nil
}

func (s *StateSubscription) TakeMessage(out *State) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneStateSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneStateSlice(dst, src []State) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var StateTypeSupport types.MessageTypeSupport = _StateTypeSupport{}

type _StateTypeSupport struct{}

func (t _StateTypeSupport) New() types.Message {
	return NewState()
}

func (t _StateTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.lifecycle_msgs__msg__State
	return (unsafe.Pointer)(C.lifecycle_msgs__msg__State__create())
}

func (t _StateTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.lifecycle_msgs__msg__State__destroy((*C.lifecycle_msgs__msg__State)(pointer_to_free))
}

func (t _StateTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*State)
	mem := (*C.lifecycle_msgs__msg__State)(dst)
	mem.id = C.uint8_t(m.Id)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.label), m.Label)
}

func (t _StateTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*State)
	mem := (*C.lifecycle_msgs__msg__State)(ros2_message_buffer)
	m.Id = uint8(mem.id)
	primitives.StringAsGoStruct(&m.Label, unsafe.Pointer(&mem.label))
}

func (t _StateTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__lifecycle_msgs__msg__State())
}

type CState = C.lifecycle_msgs__msg__State
type CState__Sequence = C.lifecycle_msgs__msg__State__Sequence

func State__Sequence_to_Go(goSlice *[]State, cSlice CState__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]State, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		StateTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func State__Sequence_to_C(cSlice *CState__Sequence, goSlice []State) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.lifecycle_msgs__msg__State)(C.malloc(C.sizeof_struct_lifecycle_msgs__msg__State * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		StateTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func State__Array_to_Go(goSlice []State, cSlice []CState) {
	for i := 0; i < len(cSlice); i++ {
		StateTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func State__Array_to_C(cSlice []CState, goSlice []State) {
	for i := 0; i < len(goSlice); i++ {
		StateTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
