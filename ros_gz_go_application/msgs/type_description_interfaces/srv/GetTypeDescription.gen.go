// Code generated by rclgo-gen. DO NOT EDIT.

package type_description_interfaces_srv

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <type_description_interfaces/srv/get_type_description.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
)

func init() {
	typemap.RegisterService("type_description_interfaces/GetTypeDescription", GetTypeDescriptionTypeSupport)
	typemap.RegisterService("type_description_interfaces/srv/GetTypeDescription", GetTypeDescriptionTypeSupport)
}

type _GetTypeDescriptionTypeSupport struct {}

func (s _GetTypeDescriptionTypeSupport) Request() types.MessageTypeSupport {
	return GetTypeDescription_RequestTypeSupport
}

func (s _GetTypeDescriptionTypeSupport) Response() types.MessageTypeSupport {
	return GetTypeDescription_ResponseTypeSupport
}

func (s _GetTypeDescriptionTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__type_description_interfaces__srv__GetTypeDescription())
}

// Modifying this variable is undefined behavior.
var GetTypeDescriptionTypeSupport types.ServiceTypeSupport = _GetTypeDescriptionTypeSupport{}

// GetTypeDescriptionClient wraps rclgo.Client to provide type safe helper
// functions
type GetTypeDescriptionClient struct {
	*rclgo.Client
}

// NewGetTypeDescriptionClient creates and returns a new client for the
// GetTypeDescription
func NewGetTypeDescriptionClient(node *rclgo.Node, serviceName string, options *rclgo.ClientOptions) (*GetTypeDescriptionClient, error) {
	client, err := node.NewClient(serviceName, GetTypeDescriptionTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &GetTypeDescriptionClient{client}, nil
}

func (s *GetTypeDescriptionClient) Send(ctx context.Context, req *GetTypeDescription_Request) (*GetTypeDescription_Response, *rclgo.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*GetTypeDescription_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type GetTypeDescriptionServiceResponseSender struct {
	sender rclgo.ServiceResponseSender
}

func (s GetTypeDescriptionServiceResponseSender) SendResponse(resp *GetTypeDescription_Response) error {
	return s.sender.SendResponse(resp)
}

type GetTypeDescriptionServiceRequestHandler func(*rclgo.ServiceInfo, *GetTypeDescription_Request, GetTypeDescriptionServiceResponseSender)

// GetTypeDescriptionService wraps rclgo.Service to provide type safe helper
// functions
type GetTypeDescriptionService struct {
	*rclgo.Service
}

// NewGetTypeDescriptionService creates and returns a new service for the
// GetTypeDescription
func NewGetTypeDescriptionService(node *rclgo.Node, name string, options *rclgo.ServiceOptions, handler GetTypeDescriptionServiceRequestHandler) (*GetTypeDescriptionService, error) {
	h := func(rmw *rclgo.ServiceInfo, msg types.Message, rs rclgo.ServiceResponseSender) {
		m := msg.(*GetTypeDescription_Request)
		responseSender := GetTypeDescriptionServiceResponseSender{sender: rs}
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, GetTypeDescriptionTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &GetTypeDescriptionService{service}, nil
}
