// Code generated by rclgo-gen. DO NOT EDIT.

package type_description_interfaces_srv
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	primitives "github.com/ATIinc/rclgo/pkg/rclgo/primitives"
	type_description_interfaces_msg "github.com/iema-group/goros2/msgs/type_description_interfaces/msg"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <type_description_interfaces/srv/get_type_description.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("type_description_interfaces/GetTypeDescription_Response", GetTypeDescription_ResponseTypeSupport)
	typemap.RegisterMessage("type_description_interfaces/srv/GetTypeDescription_Response", GetTypeDescription_ResponseTypeSupport)
}

type GetTypeDescription_Response struct {
	Successful bool `yaml:"successful" json:"successful" mapstructure:"successful"`// True if the type description information is available and populated in the response.If false, all other fields except `failure_reason` are considered undefined.
	FailureReason string `yaml:"failure_reason" json:"failure_reason" mapstructure:"failure_reason"`// If `successful` is false, contains a reason for failure.If `successful` is true, this is left empty.
	TypeDescription type_description_interfaces_msg.TypeDescription `yaml:"type_description" json:"type_description" mapstructure:"type_description"`// The parsed type description which can be used programmatically.
	TypeSources []type_description_interfaces_msg.TypeSource `yaml:"type_sources" json:"type_sources" mapstructure:"type_sources"`// A list containing the interface definition source text of the requested type,plus all types it recursively depends on.Each source text is a copy of the original contents of the.msg, .srv, .action, .idl, or other file if it exists, including comments and whitespace.Sources can be matched with IndividualTypeDescriptions by their `type_name`.The `encoding` field of each entry informs how to interpret its contents.
	ExtraInformation []type_description_interfaces_msg.KeyValue `yaml:"extra_information" json:"extra_information" mapstructure:"extra_information"`// Key-value pairs of extra information.
}

// NewGetTypeDescription_Response creates a new GetTypeDescription_Response with default values.
func NewGetTypeDescription_Response() *GetTypeDescription_Response {
	self := GetTypeDescription_Response{}
	self.SetDefaults()
	return &self
}

func (t *GetTypeDescription_Response) Clone() *GetTypeDescription_Response {
	c := &GetTypeDescription_Response{}
	c.Successful = t.Successful
	c.FailureReason = t.FailureReason
	c.TypeDescription = *t.TypeDescription.Clone()
	if t.TypeSources != nil {
		c.TypeSources = make([]type_description_interfaces_msg.TypeSource, len(t.TypeSources))
		type_description_interfaces_msg.CloneTypeSourceSlice(c.TypeSources, t.TypeSources)
	}
	if t.ExtraInformation != nil {
		c.ExtraInformation = make([]type_description_interfaces_msg.KeyValue, len(t.ExtraInformation))
		type_description_interfaces_msg.CloneKeyValueSlice(c.ExtraInformation, t.ExtraInformation)
	}
	return c
}

func (t *GetTypeDescription_Response) CloneMsg() types.Message {
	return t.Clone()
}

func (t *GetTypeDescription_Response) SetDefaults() {
	t.Successful = false
	t.FailureReason = ""
	t.TypeDescription.SetDefaults()
	t.TypeSources = nil
	t.ExtraInformation = nil
}

func (t *GetTypeDescription_Response) GetTypeSupport() types.MessageTypeSupport {
	return GetTypeDescription_ResponseTypeSupport
}

// GetTypeDescription_ResponsePublisher wraps rclgo.Publisher to provide type safe helper
// functions
type GetTypeDescription_ResponsePublisher struct {
	*rclgo.Publisher
}

// NewGetTypeDescription_ResponsePublisher creates and returns a new publisher for the
// GetTypeDescription_Response
func NewGetTypeDescription_ResponsePublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*GetTypeDescription_ResponsePublisher, error) {
	pub, err := node.NewPublisher(topic_name, GetTypeDescription_ResponseTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &GetTypeDescription_ResponsePublisher{pub}, nil
}

func (p *GetTypeDescription_ResponsePublisher) Publish(msg *GetTypeDescription_Response) error {
	return p.Publisher.Publish(msg)
}

// GetTypeDescription_ResponseSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type GetTypeDescription_ResponseSubscription struct {
	*rclgo.Subscription
}

// GetTypeDescription_ResponseSubscriptionCallback type is used to provide a subscription
// handler function for a GetTypeDescription_ResponseSubscription.
type GetTypeDescription_ResponseSubscriptionCallback func(msg *GetTypeDescription_Response, info *rclgo.MessageInfo, err error)

// NewGetTypeDescription_ResponseSubscription creates and returns a new subscription for the
// GetTypeDescription_Response
func NewGetTypeDescription_ResponseSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback GetTypeDescription_ResponseSubscriptionCallback) (*GetTypeDescription_ResponseSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg GetTypeDescription_Response
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, GetTypeDescription_ResponseTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &GetTypeDescription_ResponseSubscription{sub}, nil
}

func (s *GetTypeDescription_ResponseSubscription) TakeMessage(out *GetTypeDescription_Response) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneGetTypeDescription_ResponseSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneGetTypeDescription_ResponseSlice(dst, src []GetTypeDescription_Response) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var GetTypeDescription_ResponseTypeSupport types.MessageTypeSupport = _GetTypeDescription_ResponseTypeSupport{}

type _GetTypeDescription_ResponseTypeSupport struct{}

func (t _GetTypeDescription_ResponseTypeSupport) New() types.Message {
	return NewGetTypeDescription_Response()
}

func (t _GetTypeDescription_ResponseTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.type_description_interfaces__srv__GetTypeDescription_Response
	return (unsafe.Pointer)(C.type_description_interfaces__srv__GetTypeDescription_Response__create())
}

func (t _GetTypeDescription_ResponseTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.type_description_interfaces__srv__GetTypeDescription_Response__destroy((*C.type_description_interfaces__srv__GetTypeDescription_Response)(pointer_to_free))
}

func (t _GetTypeDescription_ResponseTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*GetTypeDescription_Response)
	mem := (*C.type_description_interfaces__srv__GetTypeDescription_Response)(dst)
	mem.successful = C.bool(m.Successful)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.failure_reason), m.FailureReason)
	type_description_interfaces_msg.TypeDescriptionTypeSupport.AsCStruct(unsafe.Pointer(&mem.type_description), &m.TypeDescription)
	type_description_interfaces_msg.TypeSource__Sequence_to_C((*type_description_interfaces_msg.CTypeSource__Sequence)(unsafe.Pointer(&mem.type_sources)), m.TypeSources)
	type_description_interfaces_msg.KeyValue__Sequence_to_C((*type_description_interfaces_msg.CKeyValue__Sequence)(unsafe.Pointer(&mem.extra_information)), m.ExtraInformation)
}

func (t _GetTypeDescription_ResponseTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*GetTypeDescription_Response)
	mem := (*C.type_description_interfaces__srv__GetTypeDescription_Response)(ros2_message_buffer)
	m.Successful = bool(mem.successful)
	primitives.StringAsGoStruct(&m.FailureReason, unsafe.Pointer(&mem.failure_reason))
	type_description_interfaces_msg.TypeDescriptionTypeSupport.AsGoStruct(&m.TypeDescription, unsafe.Pointer(&mem.type_description))
	type_description_interfaces_msg.TypeSource__Sequence_to_Go(&m.TypeSources, *(*type_description_interfaces_msg.CTypeSource__Sequence)(unsafe.Pointer(&mem.type_sources)))
	type_description_interfaces_msg.KeyValue__Sequence_to_Go(&m.ExtraInformation, *(*type_description_interfaces_msg.CKeyValue__Sequence)(unsafe.Pointer(&mem.extra_information)))
}

func (t _GetTypeDescription_ResponseTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__type_description_interfaces__srv__GetTypeDescription_Response())
}

type CGetTypeDescription_Response = C.type_description_interfaces__srv__GetTypeDescription_Response
type CGetTypeDescription_Response__Sequence = C.type_description_interfaces__srv__GetTypeDescription_Response__Sequence

func GetTypeDescription_Response__Sequence_to_Go(goSlice *[]GetTypeDescription_Response, cSlice CGetTypeDescription_Response__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]GetTypeDescription_Response, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		GetTypeDescription_ResponseTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func GetTypeDescription_Response__Sequence_to_C(cSlice *CGetTypeDescription_Response__Sequence, goSlice []GetTypeDescription_Response) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.type_description_interfaces__srv__GetTypeDescription_Response)(C.malloc(C.sizeof_struct_type_description_interfaces__srv__GetTypeDescription_Response * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		GetTypeDescription_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func GetTypeDescription_Response__Array_to_Go(goSlice []GetTypeDescription_Response, cSlice []CGetTypeDescription_Response) {
	for i := 0; i < len(cSlice); i++ {
		GetTypeDescription_ResponseTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func GetTypeDescription_Response__Array_to_C(cSlice []CGetTypeDescription_Response, goSlice []GetTypeDescription_Response) {
	for i := 0; i < len(goSlice); i++ {
		GetTypeDescription_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
