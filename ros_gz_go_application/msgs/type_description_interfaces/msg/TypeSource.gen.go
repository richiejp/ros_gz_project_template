// Code generated by rclgo-gen. DO NOT EDIT.

package type_description_interfaces_msg
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	primitives "github.com/ATIinc/rclgo/pkg/rclgo/primitives"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <type_description_interfaces/msg/type_source.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("type_description_interfaces/TypeSource", TypeSourceTypeSupport)
	typemap.RegisterMessage("type_description_interfaces/msg/TypeSource", TypeSourceTypeSupport)
}

type TypeSource struct {
	TypeName string `yaml:"type_name" json:"type_name" mapstructure:"type_name"`// ROS interface type name, in PACKAGE/NAMESPACE/TYPENAME format.
	Encoding string `yaml:"encoding" json:"encoding" mapstructure:"encoding"`// The type of the original source file, typically matching the file extension.Well-known encodings: "idl", "msg", "srv", "action", "dynamic", "implicit"."dynamic" specifies a type created programmatically by a user, thus having no source."implicit" specifies a type created automatically as a subtype of acomplex type (service or action) - such as the request message for a service.Implicit types will have no contents, the full source will be available on the parent srv/action.
	RawFileContents string `yaml:"raw_file_contents" json:"raw_file_contents" mapstructure:"raw_file_contents"`// Dumped contents of the interface definition source file.If `encoding` is "dynamic" or "implicit", this field will be empty.
}

// NewTypeSource creates a new TypeSource with default values.
func NewTypeSource() *TypeSource {
	self := TypeSource{}
	self.SetDefaults()
	return &self
}

func (t *TypeSource) Clone() *TypeSource {
	c := &TypeSource{}
	c.TypeName = t.TypeName
	c.Encoding = t.Encoding
	c.RawFileContents = t.RawFileContents
	return c
}

func (t *TypeSource) CloneMsg() types.Message {
	return t.Clone()
}

func (t *TypeSource) SetDefaults() {
	t.TypeName = ""
	t.Encoding = ""
	t.RawFileContents = ""
}

func (t *TypeSource) GetTypeSupport() types.MessageTypeSupport {
	return TypeSourceTypeSupport
}

// TypeSourcePublisher wraps rclgo.Publisher to provide type safe helper
// functions
type TypeSourcePublisher struct {
	*rclgo.Publisher
}

// NewTypeSourcePublisher creates and returns a new publisher for the
// TypeSource
func NewTypeSourcePublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*TypeSourcePublisher, error) {
	pub, err := node.NewPublisher(topic_name, TypeSourceTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &TypeSourcePublisher{pub}, nil
}

func (p *TypeSourcePublisher) Publish(msg *TypeSource) error {
	return p.Publisher.Publish(msg)
}

// TypeSourceSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type TypeSourceSubscription struct {
	*rclgo.Subscription
}

// TypeSourceSubscriptionCallback type is used to provide a subscription
// handler function for a TypeSourceSubscription.
type TypeSourceSubscriptionCallback func(msg *TypeSource, info *rclgo.MessageInfo, err error)

// NewTypeSourceSubscription creates and returns a new subscription for the
// TypeSource
func NewTypeSourceSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback TypeSourceSubscriptionCallback) (*TypeSourceSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg TypeSource
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, TypeSourceTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &TypeSourceSubscription{sub}, nil
}

func (s *TypeSourceSubscription) TakeMessage(out *TypeSource) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneTypeSourceSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneTypeSourceSlice(dst, src []TypeSource) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var TypeSourceTypeSupport types.MessageTypeSupport = _TypeSourceTypeSupport{}

type _TypeSourceTypeSupport struct{}

func (t _TypeSourceTypeSupport) New() types.Message {
	return NewTypeSource()
}

func (t _TypeSourceTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.type_description_interfaces__msg__TypeSource
	return (unsafe.Pointer)(C.type_description_interfaces__msg__TypeSource__create())
}

func (t _TypeSourceTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.type_description_interfaces__msg__TypeSource__destroy((*C.type_description_interfaces__msg__TypeSource)(pointer_to_free))
}

func (t _TypeSourceTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*TypeSource)
	mem := (*C.type_description_interfaces__msg__TypeSource)(dst)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.type_name), m.TypeName)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.encoding), m.Encoding)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.raw_file_contents), m.RawFileContents)
}

func (t _TypeSourceTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*TypeSource)
	mem := (*C.type_description_interfaces__msg__TypeSource)(ros2_message_buffer)
	primitives.StringAsGoStruct(&m.TypeName, unsafe.Pointer(&mem.type_name))
	primitives.StringAsGoStruct(&m.Encoding, unsafe.Pointer(&mem.encoding))
	primitives.StringAsGoStruct(&m.RawFileContents, unsafe.Pointer(&mem.raw_file_contents))
}

func (t _TypeSourceTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__type_description_interfaces__msg__TypeSource())
}

type CTypeSource = C.type_description_interfaces__msg__TypeSource
type CTypeSource__Sequence = C.type_description_interfaces__msg__TypeSource__Sequence

func TypeSource__Sequence_to_Go(goSlice *[]TypeSource, cSlice CTypeSource__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]TypeSource, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		TypeSourceTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func TypeSource__Sequence_to_C(cSlice *CTypeSource__Sequence, goSlice []TypeSource) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.type_description_interfaces__msg__TypeSource)(C.malloc(C.sizeof_struct_type_description_interfaces__msg__TypeSource * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		TypeSourceTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func TypeSource__Array_to_Go(goSlice []TypeSource, cSlice []CTypeSource) {
	for i := 0; i < len(cSlice); i++ {
		TypeSourceTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func TypeSource__Array_to_C(cSlice []CTypeSource, goSlice []TypeSource) {
	for i := 0; i < len(goSlice); i++ {
		TypeSourceTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
