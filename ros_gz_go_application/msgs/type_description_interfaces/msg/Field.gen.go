// Code generated by rclgo-gen. DO NOT EDIT.

package type_description_interfaces_msg
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	primitives "github.com/ATIinc/rclgo/pkg/rclgo/primitives"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <type_description_interfaces/msg/field.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("type_description_interfaces/Field", FieldTypeSupport)
	typemap.RegisterMessage("type_description_interfaces/msg/Field", FieldTypeSupport)
}

type Field struct {
	Name string `yaml:"name" json:"name" mapstructure:"name"`// Name of the field.
	Type FieldType `yaml:"type" json:"type" mapstructure:"type"`// Type of the field, including details about the type like length, nested name, etc.
	DefaultValue string `yaml:"default_value" json:"default_value" mapstructure:"default_value"`// Literal default value of the field as a string, as it appeared in the originalmessage description file, whether that be .msg/.srv/.action or .idl.
}

// NewField creates a new Field with default values.
func NewField() *Field {
	self := Field{}
	self.SetDefaults()
	return &self
}

func (t *Field) Clone() *Field {
	c := &Field{}
	c.Name = t.Name
	c.Type = *t.Type.Clone()
	c.DefaultValue = t.DefaultValue
	return c
}

func (t *Field) CloneMsg() types.Message {
	return t.Clone()
}

func (t *Field) SetDefaults() {
	t.Name = ""
	t.Type.SetDefaults()
	t.DefaultValue = ""
}

func (t *Field) GetTypeSupport() types.MessageTypeSupport {
	return FieldTypeSupport
}

// FieldPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type FieldPublisher struct {
	*rclgo.Publisher
}

// NewFieldPublisher creates and returns a new publisher for the
// Field
func NewFieldPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*FieldPublisher, error) {
	pub, err := node.NewPublisher(topic_name, FieldTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &FieldPublisher{pub}, nil
}

func (p *FieldPublisher) Publish(msg *Field) error {
	return p.Publisher.Publish(msg)
}

// FieldSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type FieldSubscription struct {
	*rclgo.Subscription
}

// FieldSubscriptionCallback type is used to provide a subscription
// handler function for a FieldSubscription.
type FieldSubscriptionCallback func(msg *Field, info *rclgo.MessageInfo, err error)

// NewFieldSubscription creates and returns a new subscription for the
// Field
func NewFieldSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback FieldSubscriptionCallback) (*FieldSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg Field
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, FieldTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &FieldSubscription{sub}, nil
}

func (s *FieldSubscription) TakeMessage(out *Field) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneFieldSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneFieldSlice(dst, src []Field) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var FieldTypeSupport types.MessageTypeSupport = _FieldTypeSupport{}

type _FieldTypeSupport struct{}

func (t _FieldTypeSupport) New() types.Message {
	return NewField()
}

func (t _FieldTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.type_description_interfaces__msg__Field
	return (unsafe.Pointer)(C.type_description_interfaces__msg__Field__create())
}

func (t _FieldTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.type_description_interfaces__msg__Field__destroy((*C.type_description_interfaces__msg__Field)(pointer_to_free))
}

func (t _FieldTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*Field)
	mem := (*C.type_description_interfaces__msg__Field)(dst)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.name), m.Name)
	FieldTypeTypeSupport.AsCStruct(unsafe.Pointer(&mem._type), &m.Type)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.default_value), m.DefaultValue)
}

func (t _FieldTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*Field)
	mem := (*C.type_description_interfaces__msg__Field)(ros2_message_buffer)
	primitives.StringAsGoStruct(&m.Name, unsafe.Pointer(&mem.name))
	FieldTypeTypeSupport.AsGoStruct(&m.Type, unsafe.Pointer(&mem._type))
	primitives.StringAsGoStruct(&m.DefaultValue, unsafe.Pointer(&mem.default_value))
}

func (t _FieldTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__type_description_interfaces__msg__Field())
}

type CField = C.type_description_interfaces__msg__Field
type CField__Sequence = C.type_description_interfaces__msg__Field__Sequence

func Field__Sequence_to_Go(goSlice *[]Field, cSlice CField__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Field, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		FieldTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func Field__Sequence_to_C(cSlice *CField__Sequence, goSlice []Field) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.type_description_interfaces__msg__Field)(C.malloc(C.sizeof_struct_type_description_interfaces__msg__Field * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		FieldTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func Field__Array_to_Go(goSlice []Field, cSlice []CField) {
	for i := 0; i < len(cSlice); i++ {
		FieldTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func Field__Array_to_C(cSlice []CField, goSlice []Field) {
	for i := 0; i < len(goSlice); i++ {
		FieldTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
