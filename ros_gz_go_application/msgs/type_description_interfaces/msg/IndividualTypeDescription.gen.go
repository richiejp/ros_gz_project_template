// Code generated by rclgo-gen. DO NOT EDIT.

package type_description_interfaces_msg
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	primitives "github.com/ATIinc/rclgo/pkg/rclgo/primitives"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <type_description_interfaces/msg/individual_type_description.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("type_description_interfaces/IndividualTypeDescription", IndividualTypeDescriptionTypeSupport)
	typemap.RegisterMessage("type_description_interfaces/msg/IndividualTypeDescription", IndividualTypeDescriptionTypeSupport)
}

type IndividualTypeDescription struct {
	TypeName string `yaml:"type_name" json:"type_name" mapstructure:"type_name"`// Name of the type.This is limited to 255 characters.TODO(wjwwood): this 255 character limit was chosen due to this being the limitfor DDSI-RTPS based middlewares, which is the most commonly used right now.We lack a ROS 2 specific limit in our design documents, but we should updatethis and/or link to the design doc when that is available.
	Fields []Field `yaml:"fields" json:"fields" mapstructure:"fields"`// Fields of the type.
}

// NewIndividualTypeDescription creates a new IndividualTypeDescription with default values.
func NewIndividualTypeDescription() *IndividualTypeDescription {
	self := IndividualTypeDescription{}
	self.SetDefaults()
	return &self
}

func (t *IndividualTypeDescription) Clone() *IndividualTypeDescription {
	c := &IndividualTypeDescription{}
	c.TypeName = t.TypeName
	if t.Fields != nil {
		c.Fields = make([]Field, len(t.Fields))
		CloneFieldSlice(c.Fields, t.Fields)
	}
	return c
}

func (t *IndividualTypeDescription) CloneMsg() types.Message {
	return t.Clone()
}

func (t *IndividualTypeDescription) SetDefaults() {
	t.TypeName = ""
	t.Fields = nil
}

func (t *IndividualTypeDescription) GetTypeSupport() types.MessageTypeSupport {
	return IndividualTypeDescriptionTypeSupport
}

// IndividualTypeDescriptionPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type IndividualTypeDescriptionPublisher struct {
	*rclgo.Publisher
}

// NewIndividualTypeDescriptionPublisher creates and returns a new publisher for the
// IndividualTypeDescription
func NewIndividualTypeDescriptionPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*IndividualTypeDescriptionPublisher, error) {
	pub, err := node.NewPublisher(topic_name, IndividualTypeDescriptionTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &IndividualTypeDescriptionPublisher{pub}, nil
}

func (p *IndividualTypeDescriptionPublisher) Publish(msg *IndividualTypeDescription) error {
	return p.Publisher.Publish(msg)
}

// IndividualTypeDescriptionSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type IndividualTypeDescriptionSubscription struct {
	*rclgo.Subscription
}

// IndividualTypeDescriptionSubscriptionCallback type is used to provide a subscription
// handler function for a IndividualTypeDescriptionSubscription.
type IndividualTypeDescriptionSubscriptionCallback func(msg *IndividualTypeDescription, info *rclgo.MessageInfo, err error)

// NewIndividualTypeDescriptionSubscription creates and returns a new subscription for the
// IndividualTypeDescription
func NewIndividualTypeDescriptionSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback IndividualTypeDescriptionSubscriptionCallback) (*IndividualTypeDescriptionSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg IndividualTypeDescription
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, IndividualTypeDescriptionTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &IndividualTypeDescriptionSubscription{sub}, nil
}

func (s *IndividualTypeDescriptionSubscription) TakeMessage(out *IndividualTypeDescription) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneIndividualTypeDescriptionSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneIndividualTypeDescriptionSlice(dst, src []IndividualTypeDescription) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var IndividualTypeDescriptionTypeSupport types.MessageTypeSupport = _IndividualTypeDescriptionTypeSupport{}

type _IndividualTypeDescriptionTypeSupport struct{}

func (t _IndividualTypeDescriptionTypeSupport) New() types.Message {
	return NewIndividualTypeDescription()
}

func (t _IndividualTypeDescriptionTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.type_description_interfaces__msg__IndividualTypeDescription
	return (unsafe.Pointer)(C.type_description_interfaces__msg__IndividualTypeDescription__create())
}

func (t _IndividualTypeDescriptionTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.type_description_interfaces__msg__IndividualTypeDescription__destroy((*C.type_description_interfaces__msg__IndividualTypeDescription)(pointer_to_free))
}

func (t _IndividualTypeDescriptionTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*IndividualTypeDescription)
	mem := (*C.type_description_interfaces__msg__IndividualTypeDescription)(dst)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.type_name), m.TypeName)
	Field__Sequence_to_C(&mem.fields, m.Fields)
}

func (t _IndividualTypeDescriptionTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*IndividualTypeDescription)
	mem := (*C.type_description_interfaces__msg__IndividualTypeDescription)(ros2_message_buffer)
	primitives.StringAsGoStruct(&m.TypeName, unsafe.Pointer(&mem.type_name))
	Field__Sequence_to_Go(&m.Fields, mem.fields)
}

func (t _IndividualTypeDescriptionTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__type_description_interfaces__msg__IndividualTypeDescription())
}

type CIndividualTypeDescription = C.type_description_interfaces__msg__IndividualTypeDescription
type CIndividualTypeDescription__Sequence = C.type_description_interfaces__msg__IndividualTypeDescription__Sequence

func IndividualTypeDescription__Sequence_to_Go(goSlice *[]IndividualTypeDescription, cSlice CIndividualTypeDescription__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]IndividualTypeDescription, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		IndividualTypeDescriptionTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func IndividualTypeDescription__Sequence_to_C(cSlice *CIndividualTypeDescription__Sequence, goSlice []IndividualTypeDescription) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.type_description_interfaces__msg__IndividualTypeDescription)(C.malloc(C.sizeof_struct_type_description_interfaces__msg__IndividualTypeDescription * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		IndividualTypeDescriptionTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func IndividualTypeDescription__Array_to_Go(goSlice []IndividualTypeDescription, cSlice []CIndividualTypeDescription) {
	for i := 0; i < len(cSlice); i++ {
		IndividualTypeDescriptionTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func IndividualTypeDescription__Array_to_C(cSlice []CIndividualTypeDescription, goSlice []IndividualTypeDescription) {
	for i := 0; i < len(goSlice); i++ {
		IndividualTypeDescriptionTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
