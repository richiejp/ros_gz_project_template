// Code generated by rclgo-gen. DO NOT EDIT.

package theora_image_transport_msg
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	primitives "github.com/ATIinc/rclgo/pkg/rclgo/primitives"
	std_msgs_msg "github.com/iema-group/goros2/msgs/std_msgs/msg"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <theora_image_transport/msg/packet.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("theora_image_transport/Packet", PacketTypeSupport)
	typemap.RegisterMessage("theora_image_transport/msg/Packet", PacketTypeSupport)
}

type Packet struct {
	Header std_msgs_msg.Header `yaml:"header" json:"header" mapstructure:"header"`// Original sensor_msgs/Image header
	Data []uint8 `yaml:"data" json:"data" mapstructure:"data"`// Raw Theora packet data (combines packet and bytes fields from ogg_packet)
	BOS int32 `yaml:"b_o_s" json:"b_o_s" mapstructure:"b_o_s"`// Flag indicating whether this packet begins a logical bitstream
	EOS int32 `yaml:"e_o_s" json:"e_o_s" mapstructure:"e_o_s"`// Flag indicating whether this packet ends a bitstream
	Granulepos int64 `yaml:"granulepos" json:"granulepos" mapstructure:"granulepos"`// A number indicating the position of this packet in the decoded data
	Packetno int64 `yaml:"packetno" json:"packetno" mapstructure:"packetno"`// Sequential number of this packet in the ogg bitstream
}

// NewPacket creates a new Packet with default values.
func NewPacket() *Packet {
	self := Packet{}
	self.SetDefaults()
	return &self
}

func (t *Packet) Clone() *Packet {
	c := &Packet{}
	c.Header = *t.Header.Clone()
	if t.Data != nil {
		c.Data = make([]uint8, len(t.Data))
		copy(c.Data, t.Data)
	}
	c.BOS = t.BOS
	c.EOS = t.EOS
	c.Granulepos = t.Granulepos
	c.Packetno = t.Packetno
	return c
}

func (t *Packet) CloneMsg() types.Message {
	return t.Clone()
}

func (t *Packet) SetDefaults() {
	t.Header.SetDefaults()
	t.Data = nil
	t.BOS = 0
	t.EOS = 0
	t.Granulepos = 0
	t.Packetno = 0
}

func (t *Packet) GetTypeSupport() types.MessageTypeSupport {
	return PacketTypeSupport
}

// PacketPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type PacketPublisher struct {
	*rclgo.Publisher
}

// NewPacketPublisher creates and returns a new publisher for the
// Packet
func NewPacketPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*PacketPublisher, error) {
	pub, err := node.NewPublisher(topic_name, PacketTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &PacketPublisher{pub}, nil
}

func (p *PacketPublisher) Publish(msg *Packet) error {
	return p.Publisher.Publish(msg)
}

// PacketSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type PacketSubscription struct {
	*rclgo.Subscription
}

// PacketSubscriptionCallback type is used to provide a subscription
// handler function for a PacketSubscription.
type PacketSubscriptionCallback func(msg *Packet, info *rclgo.MessageInfo, err error)

// NewPacketSubscription creates and returns a new subscription for the
// Packet
func NewPacketSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback PacketSubscriptionCallback) (*PacketSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg Packet
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, PacketTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &PacketSubscription{sub}, nil
}

func (s *PacketSubscription) TakeMessage(out *Packet) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// ClonePacketSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func ClonePacketSlice(dst, src []Packet) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var PacketTypeSupport types.MessageTypeSupport = _PacketTypeSupport{}

type _PacketTypeSupport struct{}

func (t _PacketTypeSupport) New() types.Message {
	return NewPacket()
}

func (t _PacketTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.theora_image_transport__msg__Packet
	return (unsafe.Pointer)(C.theora_image_transport__msg__Packet__create())
}

func (t _PacketTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.theora_image_transport__msg__Packet__destroy((*C.theora_image_transport__msg__Packet)(pointer_to_free))
}

func (t _PacketTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*Packet)
	mem := (*C.theora_image_transport__msg__Packet)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	primitives.Uint8__Sequence_to_C((*primitives.CUint8__Sequence)(unsafe.Pointer(&mem.data)), m.Data)
	mem.b_o_s = C.int32_t(m.BOS)
	mem.e_o_s = C.int32_t(m.EOS)
	mem.granulepos = C.int64_t(m.Granulepos)
	mem.packetno = C.int64_t(m.Packetno)
}

func (t _PacketTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*Packet)
	mem := (*C.theora_image_transport__msg__Packet)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	primitives.Uint8__Sequence_to_Go(&m.Data, *(*primitives.CUint8__Sequence)(unsafe.Pointer(&mem.data)))
	m.BOS = int32(mem.b_o_s)
	m.EOS = int32(mem.e_o_s)
	m.Granulepos = int64(mem.granulepos)
	m.Packetno = int64(mem.packetno)
}

func (t _PacketTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__theora_image_transport__msg__Packet())
}

type CPacket = C.theora_image_transport__msg__Packet
type CPacket__Sequence = C.theora_image_transport__msg__Packet__Sequence

func Packet__Sequence_to_Go(goSlice *[]Packet, cSlice CPacket__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Packet, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		PacketTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func Packet__Sequence_to_C(cSlice *CPacket__Sequence, goSlice []Packet) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.theora_image_transport__msg__Packet)(C.malloc(C.sizeof_struct_theora_image_transport__msg__Packet * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		PacketTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func Packet__Array_to_Go(goSlice []Packet, cSlice []CPacket) {
	for i := 0; i < len(cSlice); i++ {
		PacketTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func Packet__Array_to_C(cSlice []CPacket, goSlice []Packet) {
	for i := 0; i < len(goSlice); i++ {
		PacketTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
