// Code generated by rclgo-gen. DO NOT EDIT.

package shape_msgs_msg
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	primitives "github.com/ATIinc/rclgo/pkg/rclgo/primitives"
	geometry_msgs_msg "github.com/iema-group/goros2/msgs/geometry_msgs/msg"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <shape_msgs/msg/solid_primitive.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("shape_msgs/SolidPrimitive", SolidPrimitiveTypeSupport)
	typemap.RegisterMessage("shape_msgs/msg/SolidPrimitive", SolidPrimitiveTypeSupport)
}
const (
	SolidPrimitive_BOX uint8 = 1
	SolidPrimitive_SPHERE uint8 = 2
	SolidPrimitive_CYLINDER uint8 = 3
	SolidPrimitive_CONE uint8 = 4
	SolidPrimitive_PRISM uint8 = 5
	SolidPrimitive_BOX_X uint8 = 0// For type BOX, the X, Y, and Z dimensions are the length of the corresponding sides of the box.
	SolidPrimitive_BOX_Y uint8 = 1
	SolidPrimitive_BOX_Z uint8 = 2
	SolidPrimitive_SPHERE_RADIUS uint8 = 0// For the SPHERE type, only one component is used, and it gives the radius of the sphere.
	SolidPrimitive_CYLINDER_HEIGHT uint8 = 0
	SolidPrimitive_CYLINDER_RADIUS uint8 = 1
	SolidPrimitive_CONE_HEIGHT uint8 = 0
	SolidPrimitive_CONE_RADIUS uint8 = 1
	SolidPrimitive_PRISM_HEIGHT uint8 = 0
)

type SolidPrimitive struct {
	Type uint8 `yaml:"type" json:"type" mapstructure:"type"`// The type of the shape
	Dimensions []float64 `yaml:"dimensions" json:"dimensions" mapstructure:"dimensions"`// At no point will dimensions have a length > 3.. The dimensions of the shape
	Polygon geometry_msgs_msg.Polygon `yaml:"polygon" json:"polygon" mapstructure:"polygon"`
}

// NewSolidPrimitive creates a new SolidPrimitive with default values.
func NewSolidPrimitive() *SolidPrimitive {
	self := SolidPrimitive{}
	self.SetDefaults()
	return &self
}

func (t *SolidPrimitive) Clone() *SolidPrimitive {
	c := &SolidPrimitive{}
	c.Type = t.Type
	if t.Dimensions != nil {
		c.Dimensions = make([]float64, len(t.Dimensions))
		copy(c.Dimensions, t.Dimensions)
	}
	c.Polygon = *t.Polygon.Clone()
	return c
}

func (t *SolidPrimitive) CloneMsg() types.Message {
	return t.Clone()
}

func (t *SolidPrimitive) SetDefaults() {
	t.Type = 0
	t.Dimensions = nil
	t.Polygon.SetDefaults()
}

func (t *SolidPrimitive) GetTypeSupport() types.MessageTypeSupport {
	return SolidPrimitiveTypeSupport
}

// SolidPrimitivePublisher wraps rclgo.Publisher to provide type safe helper
// functions
type SolidPrimitivePublisher struct {
	*rclgo.Publisher
}

// NewSolidPrimitivePublisher creates and returns a new publisher for the
// SolidPrimitive
func NewSolidPrimitivePublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*SolidPrimitivePublisher, error) {
	pub, err := node.NewPublisher(topic_name, SolidPrimitiveTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &SolidPrimitivePublisher{pub}, nil
}

func (p *SolidPrimitivePublisher) Publish(msg *SolidPrimitive) error {
	return p.Publisher.Publish(msg)
}

// SolidPrimitiveSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type SolidPrimitiveSubscription struct {
	*rclgo.Subscription
}

// SolidPrimitiveSubscriptionCallback type is used to provide a subscription
// handler function for a SolidPrimitiveSubscription.
type SolidPrimitiveSubscriptionCallback func(msg *SolidPrimitive, info *rclgo.MessageInfo, err error)

// NewSolidPrimitiveSubscription creates and returns a new subscription for the
// SolidPrimitive
func NewSolidPrimitiveSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback SolidPrimitiveSubscriptionCallback) (*SolidPrimitiveSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg SolidPrimitive
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, SolidPrimitiveTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &SolidPrimitiveSubscription{sub}, nil
}

func (s *SolidPrimitiveSubscription) TakeMessage(out *SolidPrimitive) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneSolidPrimitiveSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneSolidPrimitiveSlice(dst, src []SolidPrimitive) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var SolidPrimitiveTypeSupport types.MessageTypeSupport = _SolidPrimitiveTypeSupport{}

type _SolidPrimitiveTypeSupport struct{}

func (t _SolidPrimitiveTypeSupport) New() types.Message {
	return NewSolidPrimitive()
}

func (t _SolidPrimitiveTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.shape_msgs__msg__SolidPrimitive
	return (unsafe.Pointer)(C.shape_msgs__msg__SolidPrimitive__create())
}

func (t _SolidPrimitiveTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.shape_msgs__msg__SolidPrimitive__destroy((*C.shape_msgs__msg__SolidPrimitive)(pointer_to_free))
}

func (t _SolidPrimitiveTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*SolidPrimitive)
	mem := (*C.shape_msgs__msg__SolidPrimitive)(dst)
	mem._type = C.uint8_t(m.Type)
	primitives.Float64__Sequence_to_C((*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.dimensions)), m.Dimensions)
	geometry_msgs_msg.PolygonTypeSupport.AsCStruct(unsafe.Pointer(&mem.polygon), &m.Polygon)
}

func (t _SolidPrimitiveTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*SolidPrimitive)
	mem := (*C.shape_msgs__msg__SolidPrimitive)(ros2_message_buffer)
	m.Type = uint8(mem._type)
	primitives.Float64__Sequence_to_Go(&m.Dimensions, *(*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.dimensions)))
	geometry_msgs_msg.PolygonTypeSupport.AsGoStruct(&m.Polygon, unsafe.Pointer(&mem.polygon))
}

func (t _SolidPrimitiveTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__shape_msgs__msg__SolidPrimitive())
}

type CSolidPrimitive = C.shape_msgs__msg__SolidPrimitive
type CSolidPrimitive__Sequence = C.shape_msgs__msg__SolidPrimitive__Sequence

func SolidPrimitive__Sequence_to_Go(goSlice *[]SolidPrimitive, cSlice CSolidPrimitive__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]SolidPrimitive, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		SolidPrimitiveTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func SolidPrimitive__Sequence_to_C(cSlice *CSolidPrimitive__Sequence, goSlice []SolidPrimitive) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.shape_msgs__msg__SolidPrimitive)(C.malloc(C.sizeof_struct_shape_msgs__msg__SolidPrimitive * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		SolidPrimitiveTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func SolidPrimitive__Array_to_Go(goSlice []SolidPrimitive, cSlice []CSolidPrimitive) {
	for i := 0; i < len(cSlice); i++ {
		SolidPrimitiveTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func SolidPrimitive__Array_to_C(cSlice []CSolidPrimitive, goSlice []SolidPrimitive) {
	for i := 0; i < len(goSlice); i++ {
		SolidPrimitiveTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
