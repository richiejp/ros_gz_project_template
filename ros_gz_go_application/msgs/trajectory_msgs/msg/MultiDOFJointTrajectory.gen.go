// Code generated by rclgo-gen. DO NOT EDIT.

package trajectory_msgs_msg
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	primitives "github.com/ATIinc/rclgo/pkg/rclgo/primitives"
	std_msgs_msg "github.com/iema-group/goros2/msgs/std_msgs/msg"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <trajectory_msgs/msg/multi_dof_joint_trajectory.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("trajectory_msgs/MultiDOFJointTrajectory", MultiDOFJointTrajectoryTypeSupport)
	typemap.RegisterMessage("trajectory_msgs/msg/MultiDOFJointTrajectory", MultiDOFJointTrajectoryTypeSupport)
}

type MultiDOFJointTrajectory struct {
	Header std_msgs_msg.Header `yaml:"header" json:"header" mapstructure:"header"`// The header is used to specify the coordinate frame and the reference time for the trajectory durations
	JointNames []string `yaml:"joint_names" json:"joint_names" mapstructure:"joint_names"`
	Points []MultiDOFJointTrajectoryPoint `yaml:"points" json:"points" mapstructure:"points"`
}

// NewMultiDOFJointTrajectory creates a new MultiDOFJointTrajectory with default values.
func NewMultiDOFJointTrajectory() *MultiDOFJointTrajectory {
	self := MultiDOFJointTrajectory{}
	self.SetDefaults()
	return &self
}

func (t *MultiDOFJointTrajectory) Clone() *MultiDOFJointTrajectory {
	c := &MultiDOFJointTrajectory{}
	c.Header = *t.Header.Clone()
	if t.JointNames != nil {
		c.JointNames = make([]string, len(t.JointNames))
		copy(c.JointNames, t.JointNames)
	}
	if t.Points != nil {
		c.Points = make([]MultiDOFJointTrajectoryPoint, len(t.Points))
		CloneMultiDOFJointTrajectoryPointSlice(c.Points, t.Points)
	}
	return c
}

func (t *MultiDOFJointTrajectory) CloneMsg() types.Message {
	return t.Clone()
}

func (t *MultiDOFJointTrajectory) SetDefaults() {
	t.Header.SetDefaults()
	t.JointNames = nil
	t.Points = nil
}

func (t *MultiDOFJointTrajectory) GetTypeSupport() types.MessageTypeSupport {
	return MultiDOFJointTrajectoryTypeSupport
}

// MultiDOFJointTrajectoryPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type MultiDOFJointTrajectoryPublisher struct {
	*rclgo.Publisher
}

// NewMultiDOFJointTrajectoryPublisher creates and returns a new publisher for the
// MultiDOFJointTrajectory
func NewMultiDOFJointTrajectoryPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*MultiDOFJointTrajectoryPublisher, error) {
	pub, err := node.NewPublisher(topic_name, MultiDOFJointTrajectoryTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &MultiDOFJointTrajectoryPublisher{pub}, nil
}

func (p *MultiDOFJointTrajectoryPublisher) Publish(msg *MultiDOFJointTrajectory) error {
	return p.Publisher.Publish(msg)
}

// MultiDOFJointTrajectorySubscription wraps rclgo.Subscription to provide type safe helper
// functions
type MultiDOFJointTrajectorySubscription struct {
	*rclgo.Subscription
}

// MultiDOFJointTrajectorySubscriptionCallback type is used to provide a subscription
// handler function for a MultiDOFJointTrajectorySubscription.
type MultiDOFJointTrajectorySubscriptionCallback func(msg *MultiDOFJointTrajectory, info *rclgo.MessageInfo, err error)

// NewMultiDOFJointTrajectorySubscription creates and returns a new subscription for the
// MultiDOFJointTrajectory
func NewMultiDOFJointTrajectorySubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback MultiDOFJointTrajectorySubscriptionCallback) (*MultiDOFJointTrajectorySubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg MultiDOFJointTrajectory
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, MultiDOFJointTrajectoryTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &MultiDOFJointTrajectorySubscription{sub}, nil
}

func (s *MultiDOFJointTrajectorySubscription) TakeMessage(out *MultiDOFJointTrajectory) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneMultiDOFJointTrajectorySlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneMultiDOFJointTrajectorySlice(dst, src []MultiDOFJointTrajectory) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var MultiDOFJointTrajectoryTypeSupport types.MessageTypeSupport = _MultiDOFJointTrajectoryTypeSupport{}

type _MultiDOFJointTrajectoryTypeSupport struct{}

func (t _MultiDOFJointTrajectoryTypeSupport) New() types.Message {
	return NewMultiDOFJointTrajectory()
}

func (t _MultiDOFJointTrajectoryTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.trajectory_msgs__msg__MultiDOFJointTrajectory
	return (unsafe.Pointer)(C.trajectory_msgs__msg__MultiDOFJointTrajectory__create())
}

func (t _MultiDOFJointTrajectoryTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.trajectory_msgs__msg__MultiDOFJointTrajectory__destroy((*C.trajectory_msgs__msg__MultiDOFJointTrajectory)(pointer_to_free))
}

func (t _MultiDOFJointTrajectoryTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*MultiDOFJointTrajectory)
	mem := (*C.trajectory_msgs__msg__MultiDOFJointTrajectory)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	primitives.String__Sequence_to_C((*primitives.CString__Sequence)(unsafe.Pointer(&mem.joint_names)), m.JointNames)
	MultiDOFJointTrajectoryPoint__Sequence_to_C(&mem.points, m.Points)
}

func (t _MultiDOFJointTrajectoryTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*MultiDOFJointTrajectory)
	mem := (*C.trajectory_msgs__msg__MultiDOFJointTrajectory)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	primitives.String__Sequence_to_Go(&m.JointNames, *(*primitives.CString__Sequence)(unsafe.Pointer(&mem.joint_names)))
	MultiDOFJointTrajectoryPoint__Sequence_to_Go(&m.Points, mem.points)
}

func (t _MultiDOFJointTrajectoryTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__trajectory_msgs__msg__MultiDOFJointTrajectory())
}

type CMultiDOFJointTrajectory = C.trajectory_msgs__msg__MultiDOFJointTrajectory
type CMultiDOFJointTrajectory__Sequence = C.trajectory_msgs__msg__MultiDOFJointTrajectory__Sequence

func MultiDOFJointTrajectory__Sequence_to_Go(goSlice *[]MultiDOFJointTrajectory, cSlice CMultiDOFJointTrajectory__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]MultiDOFJointTrajectory, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		MultiDOFJointTrajectoryTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func MultiDOFJointTrajectory__Sequence_to_C(cSlice *CMultiDOFJointTrajectory__Sequence, goSlice []MultiDOFJointTrajectory) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.trajectory_msgs__msg__MultiDOFJointTrajectory)(C.malloc(C.sizeof_struct_trajectory_msgs__msg__MultiDOFJointTrajectory * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		MultiDOFJointTrajectoryTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func MultiDOFJointTrajectory__Array_to_Go(goSlice []MultiDOFJointTrajectory, cSlice []CMultiDOFJointTrajectory) {
	for i := 0; i < len(cSlice); i++ {
		MultiDOFJointTrajectoryTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func MultiDOFJointTrajectory__Array_to_C(cSlice []CMultiDOFJointTrajectory, goSlice []MultiDOFJointTrajectory) {
	for i := 0; i < len(goSlice); i++ {
		MultiDOFJointTrajectoryTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
