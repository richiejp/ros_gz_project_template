// Code generated by rclgo-gen. DO NOT EDIT.

package trajectory_msgs_msg
import (
	"unsafe"

	"github.com/ATIinc/rclgo/pkg/rclgo"
	"github.com/ATIinc/rclgo/pkg/rclgo/types"
	"github.com/ATIinc/rclgo/pkg/rclgo/typemap"
	primitives "github.com/ATIinc/rclgo/pkg/rclgo/primitives"
	builtin_interfaces_msg "github.com/iema-group/goros2/msgs/builtin_interfaces/msg"
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <trajectory_msgs/msg/joint_trajectory_point.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("trajectory_msgs/JointTrajectoryPoint", JointTrajectoryPointTypeSupport)
	typemap.RegisterMessage("trajectory_msgs/msg/JointTrajectoryPoint", JointTrajectoryPointTypeSupport)
}

type JointTrajectoryPoint struct {
	Positions []float64 `yaml:"positions" json:"positions" mapstructure:"positions"`// Single DOF joint positions for each joint relative to their "0" position.The units depend on the specific joint type: radians for revolute orcontinuous joints, and meters for prismatic joints.
	Velocities []float64 `yaml:"velocities" json:"velocities" mapstructure:"velocities"`// The rate of change in position of each joint. Units are joint type dependent.Radians/second for revolute or continuous joints, and meters/second forprismatic joints.
	Accelerations []float64 `yaml:"accelerations" json:"accelerations" mapstructure:"accelerations"`// Rate of change in velocity of each joint. Units are joint type dependent.Radians/second^2 for revolute or continuous joints, and meters/second^2 forprismatic joints.
	Effort []float64 `yaml:"effort" json:"effort" mapstructure:"effort"`// The torque or the force to be applied at each joint. For revolute/continuousjoints effort denotes a torque in newton-meters. For prismatic joints, effortdenotes a force in newtons.
	TimeFromStart builtin_interfaces_msg.Duration `yaml:"time_from_start" json:"time_from_start" mapstructure:"time_from_start"`// Desired time from the trajectory start to arrive at this trajectory point.
}

// NewJointTrajectoryPoint creates a new JointTrajectoryPoint with default values.
func NewJointTrajectoryPoint() *JointTrajectoryPoint {
	self := JointTrajectoryPoint{}
	self.SetDefaults()
	return &self
}

func (t *JointTrajectoryPoint) Clone() *JointTrajectoryPoint {
	c := &JointTrajectoryPoint{}
	if t.Positions != nil {
		c.Positions = make([]float64, len(t.Positions))
		copy(c.Positions, t.Positions)
	}
	if t.Velocities != nil {
		c.Velocities = make([]float64, len(t.Velocities))
		copy(c.Velocities, t.Velocities)
	}
	if t.Accelerations != nil {
		c.Accelerations = make([]float64, len(t.Accelerations))
		copy(c.Accelerations, t.Accelerations)
	}
	if t.Effort != nil {
		c.Effort = make([]float64, len(t.Effort))
		copy(c.Effort, t.Effort)
	}
	c.TimeFromStart = *t.TimeFromStart.Clone()
	return c
}

func (t *JointTrajectoryPoint) CloneMsg() types.Message {
	return t.Clone()
}

func (t *JointTrajectoryPoint) SetDefaults() {
	t.Positions = nil
	t.Velocities = nil
	t.Accelerations = nil
	t.Effort = nil
	t.TimeFromStart.SetDefaults()
}

func (t *JointTrajectoryPoint) GetTypeSupport() types.MessageTypeSupport {
	return JointTrajectoryPointTypeSupport
}

// JointTrajectoryPointPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type JointTrajectoryPointPublisher struct {
	*rclgo.Publisher
}

// NewJointTrajectoryPointPublisher creates and returns a new publisher for the
// JointTrajectoryPoint
func NewJointTrajectoryPointPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*JointTrajectoryPointPublisher, error) {
	pub, err := node.NewPublisher(topic_name, JointTrajectoryPointTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &JointTrajectoryPointPublisher{pub}, nil
}

func (p *JointTrajectoryPointPublisher) Publish(msg *JointTrajectoryPoint) error {
	return p.Publisher.Publish(msg)
}

// JointTrajectoryPointSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type JointTrajectoryPointSubscription struct {
	*rclgo.Subscription
}

// JointTrajectoryPointSubscriptionCallback type is used to provide a subscription
// handler function for a JointTrajectoryPointSubscription.
type JointTrajectoryPointSubscriptionCallback func(msg *JointTrajectoryPoint, info *rclgo.MessageInfo, err error)

// NewJointTrajectoryPointSubscription creates and returns a new subscription for the
// JointTrajectoryPoint
func NewJointTrajectoryPointSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback JointTrajectoryPointSubscriptionCallback) (*JointTrajectoryPointSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg JointTrajectoryPoint
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, JointTrajectoryPointTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &JointTrajectoryPointSubscription{sub}, nil
}

func (s *JointTrajectoryPointSubscription) TakeMessage(out *JointTrajectoryPoint) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneJointTrajectoryPointSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneJointTrajectoryPointSlice(dst, src []JointTrajectoryPoint) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var JointTrajectoryPointTypeSupport types.MessageTypeSupport = _JointTrajectoryPointTypeSupport{}

type _JointTrajectoryPointTypeSupport struct{}

func (t _JointTrajectoryPointTypeSupport) New() types.Message {
	return NewJointTrajectoryPoint()
}

func (t _JointTrajectoryPointTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.trajectory_msgs__msg__JointTrajectoryPoint
	return (unsafe.Pointer)(C.trajectory_msgs__msg__JointTrajectoryPoint__create())
}

func (t _JointTrajectoryPointTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.trajectory_msgs__msg__JointTrajectoryPoint__destroy((*C.trajectory_msgs__msg__JointTrajectoryPoint)(pointer_to_free))
}

func (t _JointTrajectoryPointTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*JointTrajectoryPoint)
	mem := (*C.trajectory_msgs__msg__JointTrajectoryPoint)(dst)
	primitives.Float64__Sequence_to_C((*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.positions)), m.Positions)
	primitives.Float64__Sequence_to_C((*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.velocities)), m.Velocities)
	primitives.Float64__Sequence_to_C((*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.accelerations)), m.Accelerations)
	primitives.Float64__Sequence_to_C((*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.effort)), m.Effort)
	builtin_interfaces_msg.DurationTypeSupport.AsCStruct(unsafe.Pointer(&mem.time_from_start), &m.TimeFromStart)
}

func (t _JointTrajectoryPointTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*JointTrajectoryPoint)
	mem := (*C.trajectory_msgs__msg__JointTrajectoryPoint)(ros2_message_buffer)
	primitives.Float64__Sequence_to_Go(&m.Positions, *(*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.positions)))
	primitives.Float64__Sequence_to_Go(&m.Velocities, *(*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.velocities)))
	primitives.Float64__Sequence_to_Go(&m.Accelerations, *(*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.accelerations)))
	primitives.Float64__Sequence_to_Go(&m.Effort, *(*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.effort)))
	builtin_interfaces_msg.DurationTypeSupport.AsGoStruct(&m.TimeFromStart, unsafe.Pointer(&mem.time_from_start))
}

func (t _JointTrajectoryPointTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__trajectory_msgs__msg__JointTrajectoryPoint())
}

type CJointTrajectoryPoint = C.trajectory_msgs__msg__JointTrajectoryPoint
type CJointTrajectoryPoint__Sequence = C.trajectory_msgs__msg__JointTrajectoryPoint__Sequence

func JointTrajectoryPoint__Sequence_to_Go(goSlice *[]JointTrajectoryPoint, cSlice CJointTrajectoryPoint__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]JointTrajectoryPoint, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		JointTrajectoryPointTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func JointTrajectoryPoint__Sequence_to_C(cSlice *CJointTrajectoryPoint__Sequence, goSlice []JointTrajectoryPoint) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.trajectory_msgs__msg__JointTrajectoryPoint)(C.malloc(C.sizeof_struct_trajectory_msgs__msg__JointTrajectoryPoint * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		JointTrajectoryPointTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func JointTrajectoryPoint__Array_to_Go(goSlice []JointTrajectoryPoint, cSlice []CJointTrajectoryPoint) {
	for i := 0; i < len(cSlice); i++ {
		JointTrajectoryPointTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func JointTrajectoryPoint__Array_to_C(cSlice []CJointTrajectoryPoint, goSlice []JointTrajectoryPoint) {
	for i := 0; i < len(goSlice); i++ {
		JointTrajectoryPointTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
